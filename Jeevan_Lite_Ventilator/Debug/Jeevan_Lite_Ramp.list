
Jeevan_Lite_Ramp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eaf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800ec88  0800ec88  0001ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee28  0800ee28  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee28  0800ee28  0001ee28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee30  0800ee30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee30  0800ee30  0001ee30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee34  0800ee34  0001ee34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ee38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004b5c  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004b6c  20004b6c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003beda  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052be  00000000  00000000  0005bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  000611d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e8  00000000  00000000  00062b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c0e  00000000  00000000  00064368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024773  00000000  00000000  0008cf76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5aed  00000000  00000000  000b16e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001971d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b80  00000000  00000000  0019722c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec70 	.word	0x0800ec70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800ec70 	.word	0x0800ec70

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96e 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468c      	mov	ip, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f040 8083 	bne.w	8000cf2 <__udivmoddi4+0x116>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4617      	mov	r7, r2
 8000bf0:	d947      	bls.n	8000c82 <__udivmoddi4+0xa6>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b142      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	f1c2 0020 	rsb	r0, r2, #32
 8000bfc:	fa24 f000 	lsr.w	r0, r4, r0
 8000c00:	4091      	lsls	r1, r2
 8000c02:	4097      	lsls	r7, r2
 8000c04:	ea40 0c01 	orr.w	ip, r0, r1
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbbc f6f8 	udiv	r6, ip, r8
 8000c14:	fa1f fe87 	uxth.w	lr, r7
 8000c18:	fb08 c116 	mls	r1, r8, r6, ip
 8000c1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c20:	fb06 f10e 	mul.w	r1, r6, lr
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 8119 	bcs.w	8000e64 <__udivmoddi4+0x288>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8116 	bls.w	8000e64 <__udivmoddi4+0x288>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8105 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f240 8102 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6c:	eba4 040e 	sub.w	r4, r4, lr
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	b902      	cbnz	r2, 8000c86 <__udivmoddi4+0xaa>
 8000c84:	deff      	udf	#255	; 0xff
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	d150      	bne.n	8000d30 <__udivmoddi4+0x154>
 8000c8e:	1bcb      	subs	r3, r1, r7
 8000c90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c94:	fa1f f887 	uxth.w	r8, r7
 8000c98:	2601      	movs	r6, #1
 8000c9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9e:	0c21      	lsrs	r1, r4, #16
 8000ca0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cac:	428b      	cmp	r3, r1
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000cb0:	1879      	adds	r1, r7, r1
 8000cb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0xe2>
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	f200 80e9 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cbe:	4684      	mov	ip, r0
 8000cc0:	1ac9      	subs	r1, r1, r3
 8000cc2:	b2a3      	uxth	r3, r4
 8000cc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ccc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cd0:	fb08 f800 	mul.w	r8, r8, r0
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x10c>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x10a>
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	f200 80d9 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	eba4 0408 	sub.w	r4, r4, r8
 8000cec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf0:	e7bf      	b.n	8000c72 <__udivmoddi4+0x96>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x12e>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80b1 	beq.w	8000e5e <__udivmoddi4+0x282>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x1cc>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0x140>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80b8 	bhi.w	8000e8c <__udivmoddi4+0x2b0>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	468c      	mov	ip, r1
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0a8      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000d2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2e:	e7a5      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f603 	lsr.w	r6, r0, r3
 8000d38:	4097      	lsls	r7, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d42:	40d9      	lsrs	r1, r3
 8000d44:	4330      	orrs	r0, r6
 8000d46:	0c03      	lsrs	r3, r0, #16
 8000d48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d4c:	fa1f f887 	uxth.w	r8, r7
 8000d50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb06 f108 	mul.w	r1, r6, r8
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x19c>
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d6a:	f080 808d 	bcs.w	8000e88 <__udivmoddi4+0x2ac>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 808a 	bls.w	8000e88 <__udivmoddi4+0x2ac>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	443b      	add	r3, r7
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b281      	uxth	r1, r0
 8000d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d88:	fb00 f308 	mul.w	r3, r0, r8
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x1c4>
 8000d90:	1879      	adds	r1, r7, r1
 8000d92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d96:	d273      	bcs.n	8000e80 <__udivmoddi4+0x2a4>
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d971      	bls.n	8000e80 <__udivmoddi4+0x2a4>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4439      	add	r1, r7
 8000da0:	1acb      	subs	r3, r1, r3
 8000da2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da6:	e778      	b.n	8000c9a <__udivmoddi4+0xbe>
 8000da8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dac:	fa03 f406 	lsl.w	r4, r3, r6
 8000db0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db4:	431c      	orrs	r4, r3
 8000db6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc6:	431f      	orrs	r7, r3
 8000dc8:	0c3b      	lsrs	r3, r7, #16
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fa1f f884 	uxth.w	r8, r4
 8000dd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dda:	fb09 fa08 	mul.w	sl, r9, r8
 8000dde:	458a      	cmp	sl, r1
 8000de0:	fa02 f206 	lsl.w	r2, r2, r6
 8000de4:	fa00 f306 	lsl.w	r3, r0, r6
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x220>
 8000dea:	1861      	adds	r1, r4, r1
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	d248      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000df2:	458a      	cmp	sl, r1
 8000df4:	d946      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4421      	add	r1, r4
 8000dfc:	eba1 010a 	sub.w	r1, r1, sl
 8000e00:	b2bf      	uxth	r7, r7
 8000e02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0e:	fb00 f808 	mul.w	r8, r0, r8
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x24a>
 8000e16:	19e7      	adds	r7, r4, r7
 8000e18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1c:	d22e      	bcs.n	8000e7c <__udivmoddi4+0x2a0>
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d92c      	bls.n	8000e7c <__udivmoddi4+0x2a0>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4427      	add	r7, r4
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	eba7 0708 	sub.w	r7, r7, r8
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	454f      	cmp	r7, r9
 8000e34:	46c6      	mov	lr, r8
 8000e36:	4649      	mov	r1, r9
 8000e38:	d31a      	bcc.n	8000e70 <__udivmoddi4+0x294>
 8000e3a:	d017      	beq.n	8000e6c <__udivmoddi4+0x290>
 8000e3c:	b15d      	cbz	r5, 8000e56 <__udivmoddi4+0x27a>
 8000e3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e42:	eb67 0701 	sbc.w	r7, r7, r1
 8000e46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e4a:	40f2      	lsrs	r2, r6
 8000e4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e50:	40f7      	lsrs	r7, r6
 8000e52:	e9c5 2700 	strd	r2, r7, [r5]
 8000e56:	2600      	movs	r6, #0
 8000e58:	4631      	mov	r1, r6
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e70b      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e9      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fd      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e6c:	4543      	cmp	r3, r8
 8000e6e:	d2e5      	bcs.n	8000e3c <__udivmoddi4+0x260>
 8000e70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e74:	eb69 0104 	sbc.w	r1, r9, r4
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7df      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	e7d2      	b.n	8000e26 <__udivmoddi4+0x24a>
 8000e80:	4660      	mov	r0, ip
 8000e82:	e78d      	b.n	8000da0 <__udivmoddi4+0x1c4>
 8000e84:	4681      	mov	r9, r0
 8000e86:	e7b9      	b.n	8000dfc <__udivmoddi4+0x220>
 8000e88:	4666      	mov	r6, ip
 8000e8a:	e775      	b.n	8000d78 <__udivmoddi4+0x19c>
 8000e8c:	4630      	mov	r0, r6
 8000e8e:	e74a      	b.n	8000d26 <__udivmoddi4+0x14a>
 8000e90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e94:	4439      	add	r1, r7
 8000e96:	e713      	b.n	8000cc0 <__udivmoddi4+0xe4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e724      	b.n	8000ce8 <__udivmoddi4+0x10c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <Back_Up_PC_CMV_Mode_Task>:

extern int Trigger;
extern int now_update;

void Back_Up_PC_CMV_Mode_Task(void *argument)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

	while(1)
	{

		switch (_CurrentComputationState)
 8000eac:	4b83      	ldr	r3, [pc, #524]	; (80010bc <Back_Up_PC_CMV_Mode_Task+0x218>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	f000 80fd 	beq.w	80010b0 <Back_Up_PC_CMV_Mode_Task+0x20c>
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	f300 80fc 	bgt.w	80010b4 <Back_Up_PC_CMV_Mode_Task+0x210>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <Back_Up_PC_CMV_Mode_Task+0x22>
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d011      	beq.n	8000ee8 <Back_Up_PC_CMV_Mode_Task+0x44>

				break;
				case NoComputeState:
				break;
				default:
				break;
 8000ec4:	e0f6      	b.n	80010b4 <Back_Up_PC_CMV_Mode_Task+0x210>
					ExpValve_CLOSE();
 8000ec6:	4b7e      	ldr	r3, [pc, #504]	; (80010c0 <Back_Up_PC_CMV_Mode_Task+0x21c>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a7d      	ldr	r2, [pc, #500]	; (80010c0 <Back_Up_PC_CMV_Mode_Task+0x21c>)
 8000ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ed0:	6153      	str	r3, [r2, #20]
					Blower_Signal( B4._DAC_VAL0);
 8000ed2:	4b7c      	ldr	r3, [pc, #496]	; (80010c4 <Back_Up_PC_CMV_Mode_Task+0x220>)
 8000ed4:	889a      	ldrh	r2, [r3, #4]
 8000ed6:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <Back_Up_PC_CMV_Mode_Task+0x224>)
 8000ed8:	609a      	str	r2, [r3, #8]
					S5.peep_process_done=0;
 8000eda:	4b7c      	ldr	r3, [pc, #496]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	645a      	str	r2, [r3, #68]	; 0x44
					S5.lock=1;
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000ee6:	e0e8      	b.n	80010ba <Back_Up_PC_CMV_Mode_Task+0x216>
					B4._DAC_VAL0=0;
 8000ee8:	4b76      	ldr	r3, [pc, #472]	; (80010c4 <Back_Up_PC_CMV_Mode_Task+0x220>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	809a      	strh	r2, [r3, #4]
					Blower_Signal( B4._DAC_VAL0);
 8000eee:	4b75      	ldr	r3, [pc, #468]	; (80010c4 <Back_Up_PC_CMV_Mode_Task+0x220>)
 8000ef0:	889a      	ldrh	r2, [r3, #4]
 8000ef2:	4b75      	ldr	r3, [pc, #468]	; (80010c8 <Back_Up_PC_CMV_Mode_Task+0x224>)
 8000ef4:	609a      	str	r2, [r3, #8]
							if(S5.peep_process_done==1)
 8000ef6:	4b75      	ldr	r3, [pc, #468]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d116      	bne.n	8000f2c <Back_Up_PC_CMV_Mode_Task+0x88>
									if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 8000efe:	4b74      	ldr	r3, [pc, #464]	; (80010d0 <Back_Up_PC_CMV_Mode_Task+0x22c>)
 8000f00:	791b      	ldrb	r3, [r3, #4]
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0a:	4b70      	ldr	r3, [pc, #448]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000f0c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	d504      	bpl.n	8000f24 <Back_Up_PC_CMV_Mode_Task+0x80>
										Blower_Signal( B4._DAC_VAL0);
 8000f1a:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <Back_Up_PC_CMV_Mode_Task+0x220>)
 8000f1c:	889a      	ldrh	r2, [r3, #4]
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <Back_Up_PC_CMV_Mode_Task+0x224>)
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	e003      	b.n	8000f2c <Back_Up_PC_CMV_Mode_Task+0x88>
										Blower_Signal( B4._DAC_VAL0);
 8000f24:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <Back_Up_PC_CMV_Mode_Task+0x220>)
 8000f26:	889a      	ldrh	r2, [r3, #4]
 8000f28:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <Back_Up_PC_CMV_Mode_Task+0x224>)
 8000f2a:	609a      	str	r2, [r3, #8]
							if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 8000f2c:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <Back_Up_PC_CMV_Mode_Task+0x22c>)
 8000f2e:	791b      	ldrb	r3, [r3, #4]
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f38:	4b64      	ldr	r3, [pc, #400]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000f3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f46:	d815      	bhi.n	8000f74 <Back_Up_PC_CMV_Mode_Task+0xd0>
								if(S5.lock==1)
 8000f48:	4b60      	ldr	r3, [pc, #384]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d107      	bne.n	8000f60 <Back_Up_PC_CMV_Mode_Task+0xbc>
									S5.lock=0;
 8000f50:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	63da      	str	r2, [r3, #60]	; 0x3c
									vTaskDelay(S5.Lock_delay);
 8000f56:	4b5d      	ldr	r3, [pc, #372]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000f58:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00c f844 	bl	800cfe8 <vTaskDelay>
								S5.peep_process_done=1;
 8000f60:	4b5a      	ldr	r3, [pc, #360]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
								ExpValve_CLOSE();
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <Back_Up_PC_CMV_Mode_Task+0x21c>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	4a55      	ldr	r2, [pc, #340]	; (80010c0 <Back_Up_PC_CMV_Mode_Task+0x21c>)
 8000f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f70:	6153      	str	r3, [r2, #20]
 8000f72:	e009      	b.n	8000f88 <Back_Up_PC_CMV_Mode_Task+0xe4>
							else if(S5.peep_process_done==0)
 8000f74:	4b55      	ldr	r3, [pc, #340]	; (80010cc <Back_Up_PC_CMV_Mode_Task+0x228>)
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d105      	bne.n	8000f88 <Back_Up_PC_CMV_Mode_Task+0xe4>
								ExpValve_OPEN();
 8000f7c:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <Back_Up_PC_CMV_Mode_Task+0x21c>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	4a4f      	ldr	r2, [pc, #316]	; (80010c0 <Back_Up_PC_CMV_Mode_Task+0x21c>)
 8000f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f86:	6153      	str	r3, [r2, #20]
										if(_E_TIMER <= (P1._TRIG_WINDOW) &&  _E_TIMER != 0)
 8000f88:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8000f8a:	8a1b      	ldrh	r3, [r3, #16]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b52      	ldr	r3, [pc, #328]	; (80010d8 <Back_Up_PC_CMV_Mode_Task+0x234>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d378      	bcc.n	8001088 <Back_Up_PC_CMV_Mode_Task+0x1e4>
 8000f96:	4b50      	ldr	r3, [pc, #320]	; (80010d8 <Back_Up_PC_CMV_Mode_Task+0x234>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d074      	beq.n	8001088 <Back_Up_PC_CMV_Mode_Task+0x1e4>
											if(P1._TRIG_TYPE==1)
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8000fa0:	88db      	ldrh	r3, [r3, #6]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d16a      	bne.n	800107c <Back_Up_PC_CMV_Mode_Task+0x1d8>
												if((Pressure_sensor._Pressure_Val>(P1.simv_trigger_offset+P1._TRIG_LMT))||(Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <Back_Up_PC_CMV_Mode_Task+0x22c>)
 8000fa8:	791b      	ldrb	r3, [r3, #4]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb2:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8000fb4:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fb8:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8000fba:	891b      	ldrh	r3, [r3, #8]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	dc16      	bgt.n	8001000 <Back_Up_PC_CMV_Mode_Task+0x15c>
 8000fd2:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <Back_Up_PC_CMV_Mode_Task+0x22c>)
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fde:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8000fe0:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8000fe6:	891b      	ldrh	r3, [r3, #8]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d400      	bmi.n	8001000 <Back_Up_PC_CMV_Mode_Task+0x15c>
											if(P1._TRIG_TYPE==1)
 8000ffe:	e055      	b.n	80010ac <Back_Up_PC_CMV_Mode_Task+0x208>
													P1.PIP_PSV_DAC_Val=call_PIP_PSV_DAC_Val(P1.PIP_PSV_Val);
 8001000:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fa1f 	bl	8004448 <call_PIP_PSV_DAC_Val>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8001010:	835a      	strh	r2, [r3, #26]
													P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8001014:	8b9b      	ldrh	r3, [r3, #28]
 8001016:	461a      	mov	r2, r3
 8001018:	0152      	lsls	r2, r2, #5
 800101a:	1ad2      	subs	r2, r2, r3
 800101c:	0092      	lsls	r2, r2, #2
 800101e:	4413      	add	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8001026:	83da      	strh	r2, [r3, #30]
													P1._Apnea_counter_trigger_check_time=3000;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 800102a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800102e:	809a      	strh	r2, [r3, #4]
													Trigger=1;
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <Back_Up_PC_CMV_Mode_Task+0x238>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
													now_update=2;
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <Back_Up_PC_CMV_Mode_Task+0x23c>)
 8001038:	2202      	movs	r2, #2
 800103a:	601a      	str	r2, [r3, #0]
													B4._DAC_VAL0=0;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <Back_Up_PC_CMV_Mode_Task+0x220>)
 800103e:	2200      	movs	r2, #0
 8001040:	809a      	strh	r2, [r3, #4]
													_I_TIMER = B2._I_TIMER_HOLD;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <Back_Up_PC_CMV_Mode_Task+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <Back_Up_PC_CMV_Mode_Task+0x244>)
 8001048:	6013      	str	r3, [r2, #0]
													if(_CurrentMode==PSV)
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <Back_Up_PC_CMV_Mode_Task+0x248>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b06      	cmp	r3, #6
 8001050:	d12c      	bne.n	80010ac <Back_Up_PC_CMV_Mode_Task+0x208>
														vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <Back_Up_PC_CMV_Mode_Task+0x24c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f00b fffa 	bl	800d050 <vTaskSuspend>
														vTaskResume(Psv_Pid_Handler);
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <Back_Up_PC_CMV_Mode_Task+0x250>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00c f8b9 	bl	800d1d8 <vTaskResume>
														vTaskSuspend(One_Time_Handler);
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <Back_Up_PC_CMV_Mode_Task+0x254>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f00b fff0 	bl	800d050 <vTaskSuspend>
														vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8001070:	4b22      	ldr	r3, [pc, #136]	; (80010fc <Back_Up_PC_CMV_Mode_Task+0x258>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f00b ffeb 	bl	800d050 <vTaskSuspend>
											if(P1._TRIG_TYPE==1)
 800107a:	e017      	b.n	80010ac <Back_Up_PC_CMV_Mode_Task+0x208>
												if((Flow_Sensor_cal._Flow_Val>(P1._TRIG_LMT))||(Flow_Sensor_cal._Flow_Val<(P1._TRIG_LMT*-1)))
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <Back_Up_PC_CMV_Mode_Task+0x25c>)
 800107e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 8001082:	8912      	ldrh	r2, [r2, #8]
 8001084:	4293      	cmp	r3, r2
											if(P1._TRIG_TYPE==1)
 8001086:	e011      	b.n	80010ac <Back_Up_PC_CMV_Mode_Task+0x208>
											if(P1._TRIG_TYPE==1)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 800108a:	88db      	ldrh	r3, [r3, #6]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d113      	bne.n	80010b8 <Back_Up_PC_CMV_Mode_Task+0x214>
											  if(Flow_Sensor_cal._Flow_Val==0)
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <Back_Up_PC_CMV_Mode_Task+0x25c>)
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	2b00      	cmp	r3, #0
 8001096:	d10f      	bne.n	80010b8 <Back_Up_PC_CMV_Mode_Task+0x214>
												  P1.simv_trigger_offset=Pressure_sensor._Pressure_Val;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <Back_Up_PC_CMV_Mode_Task+0x22c>)
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <Back_Up_PC_CMV_Mode_Task+0x230>)
 80010a6:	edc3 7a05 	vstr	s15, [r3, #20]
				break;
 80010aa:	e005      	b.n	80010b8 <Back_Up_PC_CMV_Mode_Task+0x214>
											if(P1._TRIG_TYPE==1)
 80010ac:	bf00      	nop
				break;
 80010ae:	e003      	b.n	80010b8 <Back_Up_PC_CMV_Mode_Task+0x214>
				break;
 80010b0:	bf00      	nop
 80010b2:	e6fb      	b.n	8000eac <Back_Up_PC_CMV_Mode_Task+0x8>
				break;
 80010b4:	bf00      	nop
 80010b6:	e6f9      	b.n	8000eac <Back_Up_PC_CMV_Mode_Task+0x8>
				break;
 80010b8:	bf00      	nop
		switch (_CurrentComputationState)
 80010ba:	e6f7      	b.n	8000eac <Back_Up_PC_CMV_Mode_Task+0x8>
 80010bc:	20004798 	.word	0x20004798
 80010c0:	40020400 	.word	0x40020400
 80010c4:	2000486c 	.word	0x2000486c
 80010c8:	40007400 	.word	0x40007400
 80010cc:	200048fc 	.word	0x200048fc
 80010d0:	200047ac 	.word	0x200047ac
 80010d4:	200045ac 	.word	0x200045ac
 80010d8:	20004848 	.word	0x20004848
 80010dc:	2000002c 	.word	0x2000002c
 80010e0:	20000030 	.word	0x20000030
 80010e4:	2000479c 	.word	0x2000479c
 80010e8:	200048f8 	.word	0x200048f8
 80010ec:	200046e8 	.word	0x200046e8
 80010f0:	200047e4 	.word	0x200047e4
 80010f4:	20004610 	.word	0x20004610
 80010f8:	200047e8 	.word	0x200047e8
 80010fc:	200046d0 	.word	0x200046d0
 8001100:	20004730 	.word	0x20004730

08001104 <BACKUP_PC_SIMV_Pulse_I_Parameter>:
	 xTaskCreate(One_Time_Task, "one-time-task", 256, NULL, 2, &One_Time_Handler);

}

void BACKUP_PC_SIMV_Pulse_I_Parameter()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0



		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110e:	482c      	ldr	r0, [pc, #176]	; (80011c0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xbc>)
 8001110:	f007 fc2c 	bl	800896c <HAL_GPIO_WritePin>
		_I_TIMER_ACHEIVED = 0;
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc0>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
		S5.peep_process_done = 0;
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc4>)
 800111c:	2200      	movs	r2, #0
 800111e:	645a      	str	r2, [r3, #68]	; 0x44

			B4._DAC_VAL0 = B4.starting_DAC;
 8001120:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112a:	ee17 3a90 	vmov	r3, s15
 800112e:	b29a      	uxth	r2, r3
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 8001132:	809a      	strh	r2, [r3, #4]
			B4.Last_DAC = B4._DAC_VAL0;
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 8001136:	889a      	ldrh	r2, [r3, #4]
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 800113a:	80da      	strh	r2, [r3, #6]
			B3.ok = 1;
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xcc>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
			B3.cycle_done = 1;
 8001142:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xcc>)
 8001144:	2201      	movs	r2, #1
 8001146:	605a      	str	r2, [r3, #4]
			B4.last_result1 = B4.result1;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 800114e:	60d3      	str	r3, [r2, #12]
			DAC_Value_Correction_BACKUP_PC();
 8001150:	f000 f89a 	bl	8001288 <DAC_Value_Correction_BACKUP_PC>
			Ending_Dac_value_correction_BACKUP_PC();
 8001154:	f000 fa98 	bl	8001688 <Ending_Dac_value_correction_BACKUP_PC>
			S5.P_Max = 0;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc4>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
			B3.Pip_Acheived_Flag = 0;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xcc>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
			S5.now_check = 0;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc4>)
 8001166:	2200      	movs	r2, #0
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
			S5.P_Min = 60;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc4>)
 800116c:	223c      	movs	r2, #60	; 0x3c
 800116e:	605a      	str	r2, [r3, #4]

		B3.cycle_done = 1;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xcc>)
 8001172:	2201      	movs	r2, #1
 8001174:	605a      	str	r2, [r3, #4]
		Peep_Vale_Lock_delay_BACKUP_PC();
 8001176:	f000 fd93 	bl	8001ca0 <Peep_Vale_Lock_delay_BACKUP_PC>
		vol.Volume = 0;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xd0>)
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
		_Control_Byte &= (uint8_t) (~(0x80));
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xd4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xd4>)
 800118e:	701a      	strb	r2, [r3, #0]
		B4.ten_ms = 0;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 8001192:	2200      	movs	r2, #0
 8001194:	831a      	strh	r2, [r3, #24]
		B4.Acheived_ten_ms = 0;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xc8>)
 8001198:	2200      	movs	r2, #0
 800119a:	839a      	strh	r2, [r3, #28]
		_I_TIMER = B2._I_TIMER_HOLD;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xd8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xdc>)
 80011a2:	6013      	str	r3, [r2, #0]
		_CurrentWaveFormState = Generate_E_Wave;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xe0>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_I_Wave ;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <BACKUP_PC_SIMV_Pulse_I_Parameter+0xe4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		vTaskDelay(B2._I_TIMER_HOLD);
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <BACKUP_PC_SIMV_Pulse_I_Parameter+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00b ff17 	bl	800cfe8 <vTaskDelay>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40020400 	.word	0x40020400
 80011c4:	20004658 	.word	0x20004658
 80011c8:	200048fc 	.word	0x200048fc
 80011cc:	2000486c 	.word	0x2000486c
 80011d0:	20004974 	.word	0x20004974
 80011d4:	2000482c 	.word	0x2000482c
 80011d8:	20004944 	.word	0x20004944
 80011dc:	2000479c 	.word	0x2000479c
 80011e0:	200048f8 	.word	0x200048f8
 80011e4:	20004642 	.word	0x20004642
 80011e8:	20004798 	.word	0x20004798

080011ec <BACKUP_PC_SIMV_Pulse_E_Parameter>:



void BACKUP_PC_SIMV_Pulse_E_Parameter()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	_E_TIMER = B2._E_TIMER_HOLD;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <BACKUP_PC_SIMV_Pulse_E_Parameter+0x40>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x44>)
 80011f6:	6013      	str	r3, [r2, #0]
	_E_TIMER_ACHEIVED = 0;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x48>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	801a      	strh	r2, [r3, #0]
	S5.lock = 1;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x4c>)
 8001200:	2201      	movs	r2, #1
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
	_CurrentWaveFormState = Generate_I_Wave;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <BACKUP_PC_SIMV_Pulse_E_Parameter+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x54>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
	_Control_Byte |= (uint8_t) 0x80;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <BACKUP_PC_SIMV_Pulse_E_Parameter+0x58>)
 800121c:	701a      	strb	r2, [r3, #0]
	vTaskDelay(B2._E_TIMER_HOLD);
 800121e:	4b03      	ldr	r3, [pc, #12]	; (800122c <BACKUP_PC_SIMV_Pulse_E_Parameter+0x40>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	f00b fee0 	bl	800cfe8 <vTaskDelay>

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000479c 	.word	0x2000479c
 8001230:	20004848 	.word	0x20004848
 8001234:	20004964 	.word	0x20004964
 8001238:	200048fc 	.word	0x200048fc
 800123c:	20004642 	.word	0x20004642
 8001240:	20004798 	.word	0x20004798
 8001244:	20004944 	.word	0x20004944

08001248 <PID_Back_Up_PC_CMV_Mode_Task>:


void PID_Back_Up_PC_CMV_Mode_Task(void *argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		B4.ten_ms++;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <PID_Back_Up_PC_CMV_Mode_Task+0x34>)
 8001252:	8b1b      	ldrh	r3, [r3, #24]
 8001254:	3301      	adds	r3, #1
 8001256:	b29a      	uxth	r2, r3
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <PID_Back_Up_PC_CMV_Mode_Task+0x34>)
 800125a:	831a      	strh	r2, [r3, #24]
			if(S1._Mode_Val == 9)
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <PID_Back_Up_PC_CMV_Mode_Task+0x38>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b09      	cmp	r3, #9
 8001262:	d105      	bne.n	8001270 <PID_Back_Up_PC_CMV_Mode_Task+0x28>
			 {
				if(_CurrentComputationState==Compute_I_Wave)
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <PID_Back_Up_PC_CMV_Mode_Task+0x3c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <PID_Back_Up_PC_CMV_Mode_Task+0x28>
				{
					pip_value_correction_BACKUP_PC();
 800126c:	f000 f844 	bl	80012f8 <pip_value_correction_BACKUP_PC>
				}
			 }
		vTaskDelay(B4.PID_task_delay);
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <PID_Back_Up_PC_CMV_Mode_Task+0x34>)
 8001272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001274:	4618      	mov	r0, r3
 8001276:	f00b feb7 	bl	800cfe8 <vTaskDelay>
		B4.ten_ms++;
 800127a:	e7e9      	b.n	8001250 <PID_Back_Up_PC_CMV_Mode_Task+0x8>
 800127c:	2000486c 	.word	0x2000486c
 8001280:	20004644 	.word	0x20004644
 8001284:	20004798 	.word	0x20004798

08001288 <DAC_Value_Correction_BACKUP_PC>:

}


void DAC_Value_Correction_BACKUP_PC()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0



		 if(B4.Acheived_ms < (B2.ramp_time_percentage -40))
 800128c:	4b17      	ldr	r3, [pc, #92]	; (80012ec <DAC_Value_Correction_BACKUP_PC+0x64>)
 800128e:	8b5b      	ldrh	r3, [r3, #26]
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <DAC_Value_Correction_BACKUP_PC+0x68>)
 800129a:	edd3 7a03 	vldr	s15, [r3, #12]
 800129e:	eddf 6a15 	vldr	s13, [pc, #84]	; 80012f4 <DAC_Value_Correction_BACKUP_PC+0x6c>
 80012a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80012a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	d502      	bpl.n	80012b6 <DAC_Value_Correction_BACKUP_PC+0x2e>
	     {
			 Pip_Acheived_Early_BACKUP_PC();
 80012b0:	f000 fabe 	bl	8001830 <Pip_Acheived_Early_BACKUP_PC>
 80012b4:	e016      	b.n	80012e4 <DAC_Value_Correction_BACKUP_PC+0x5c>

	     }


	       else if(B4.Acheived_ms > (B2.ramp_time_percentage +40))
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <DAC_Value_Correction_BACKUP_PC+0x64>)
 80012b8:	8b5b      	ldrh	r3, [r3, #26]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <DAC_Value_Correction_BACKUP_PC+0x68>)
 80012c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80012f4 <DAC_Value_Correction_BACKUP_PC+0x6c>
 80012cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	dd02      	ble.n	80012e0 <DAC_Value_Correction_BACKUP_PC+0x58>
	       {
	    	   Pip_Acheived_Slowly_BACKUP_PC();
 80012da:	f000 fbe5 	bl	8001aa8 <Pip_Acheived_Slowly_BACKUP_PC>
 80012de:	e001      	b.n	80012e4 <DAC_Value_Correction_BACKUP_PC+0x5c>
	       }

	       else
	       {
	    	   Pip_Acheived_Normally_BACKUP_PC();
 80012e0:	f000 fca2 	bl	8001c28 <Pip_Acheived_Normally_BACKUP_PC>

	       }

		     Pip_Not_Acheived_BACKUP_PC();
 80012e4:	f000 fcae 	bl	8001c44 <Pip_Not_Acheived_BACKUP_PC>

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2000486c 	.word	0x2000486c
 80012f0:	2000479c 	.word	0x2000479c
 80012f4:	42200000 	.word	0x42200000

080012f8 <pip_value_correction_BACKUP_PC>:

void pip_value_correction_BACKUP_PC()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	if (Pressure_sensor._Pressure_Val >= (B1._PIP_Val ))
 80012fc:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <pip_value_correction_BACKUP_PC+0xe8>)
 80012fe:	791a      	ldrb	r2, [r3, #4]
 8001300:	4b38      	ldr	r3, [pc, #224]	; (80013e4 <pip_value_correction_BACKUP_PC+0xec>)
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	429a      	cmp	r2, r3
 8001306:	d324      	bcc.n	8001352 <pip_value_correction_BACKUP_PC+0x5a>
	{
		B3.cycle_done = 0;
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <pip_value_correction_BACKUP_PC+0xf0>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001314:	4835      	ldr	r0, [pc, #212]	; (80013ec <pip_value_correction_BACKUP_PC+0xf4>)
 8001316:	f007 fb29 	bl	800896c <HAL_GPIO_WritePin>
		if(B3.ok==1)
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <pip_value_correction_BACKUP_PC+0xf0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d117      	bne.n	8001352 <pip_value_correction_BACKUP_PC+0x5a>
		{
			B4.Acheived_ten_ms = B4.ten_ms;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001324:	8b1a      	ldrh	r2, [r3, #24]
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001328:	839a      	strh	r2, [r3, #28]
			B4.Acheived_ms=(B4.Acheived_ten_ms*B4.PID_task_delay);
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 800132c:	8b9a      	ldrh	r2, [r3, #28]
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001332:	b29b      	uxth	r3, r3
 8001334:	fb12 f303 	smulbb	r3, r2, r3
 8001338:	b29a      	uxth	r2, r3
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 800133c:	835a      	strh	r2, [r3, #26]
			B3.ok=0;
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <pip_value_correction_BACKUP_PC+0xf0>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
			B3.Pip_Acheived_Flag=1;
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <pip_value_correction_BACKUP_PC+0xf0>)
 8001346:	2201      	movs	r2, #1
 8001348:	609a      	str	r2, [r3, #8]
			B4._DAC_VAL0 = B4.Last_DAC;
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 800134c:	88da      	ldrh	r2, [r3, #6]
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001350:	809a      	strh	r2, [r3, #4]
		}
	}
	if (B3.cycle_done == 1)
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <pip_value_correction_BACKUP_PC+0xf0>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d140      	bne.n	80013dc <pip_value_correction_BACKUP_PC+0xe4>
	{
		if (B4.Last_DAC >= B4.Ending_Dac)
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 800135c:	88db      	ldrh	r3, [r3, #6]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001368:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800136c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	db0d      	blt.n	8001392 <pip_value_correction_BACKUP_PC+0x9a>
		{
			B4.Last_DAC = B4.Ending_Dac;
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001378:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800137c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001388:	80da      	strh	r2, [r3, #6]
			B3.cycle_done = 0;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <pip_value_correction_BACKUP_PC+0xf0>)
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
			B4.Last_DAC = B4._DAC_VAL0;
			B4._DAC_VAL0=B4.Last_DAC + (B4.incrementing_Dac_value_10ms );
		}
	}

}
 8001390:	e024      	b.n	80013dc <pip_value_correction_BACKUP_PC+0xe4>
		else if (B4.Last_DAC < B4.Ending_Dac)
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 8001394:	88db      	ldrh	r3, [r3, #6]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 80013a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d400      	bmi.n	80013b0 <pip_value_correction_BACKUP_PC+0xb8>
}
 80013ae:	e015      	b.n	80013dc <pip_value_correction_BACKUP_PC+0xe4>
			B4.Last_DAC = B4._DAC_VAL0;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 80013b2:	889a      	ldrh	r2, [r3, #4]
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 80013b6:	80da      	strh	r2, [r3, #6]
			B4._DAC_VAL0=B4.Last_DAC + (B4.incrementing_Dac_value_10ms );
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 80013ba:	88db      	ldrh	r3, [r3, #6]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 80013c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d2:	ee17 3a90 	vmov	r3, s15
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <pip_value_correction_BACKUP_PC+0xf8>)
 80013da:	809a      	strh	r2, [r3, #4]
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200047ac 	.word	0x200047ac
 80013e4:	2000494c 	.word	0x2000494c
 80013e8:	20004974 	.word	0x20004974
 80013ec:	40020400 	.word	0x40020400
 80013f0:	2000486c 	.word	0x2000486c
 80013f4:	00000000 	.word	0x00000000

080013f8 <BACKUP_PC_CMV_PARAMETERS>:




void BACKUP_PC_CMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]


			B1._PIP_Val = RX_PARAM_CMD_PACKET->_PIP;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	791a      	ldrb	r2, [r3, #4]
 8001404:	4b8e      	ldr	r3, [pc, #568]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001406:	709a      	strb	r2, [r3, #2]
			B1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	795a      	ldrb	r2, [r3, #5]
 800140c:	4b8c      	ldr	r3, [pc, #560]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 800140e:	70da      	strb	r2, [r3, #3]
			B1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7a5b      	ldrb	r3, [r3, #9]
 8001414:	461a      	mov	r2, r3
 8001416:	f64e 2360 	movw	r3, #60000	; 0xea60
 800141a:	fb93 f3f2 	sdiv	r3, r3, r2
 800141e:	461a      	mov	r2, r3
 8001420:	4b87      	ldr	r3, [pc, #540]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001422:	605a      	str	r2, [r3, #4]
			B1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7a1b      	ldrb	r3, [r3, #8]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4b84      	ldr	r3, [pc, #528]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001430:	609a      	str	r2, [r3, #8]
			B1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7a1b      	ldrb	r3, [r3, #8]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	4a81      	ldr	r2, [pc, #516]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 800143c:	60d3      	str	r3, [r2, #12]
			B1.RT_Value =(0xF0 & RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME)>>4;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7adb      	ldrb	r3, [r3, #11]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 800144a:	821a      	strh	r2, [r3, #16]
			B1.RR=RX_PARAM_CMD_PACKET->_RR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7a5a      	ldrb	r2, [r3, #9]
 8001450:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001452:	749a      	strb	r2, [r3, #18]
			_FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7a9a      	ldrb	r2, [r3, #10]
 8001458:	4b7a      	ldr	r3, [pc, #488]	; (8001644 <BACKUP_PC_CMV_PARAMETERS+0x24c>)
 800145a:	701a      	strb	r2, [r3, #0]
			B5._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
			B5._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);*/



			B2._I_TIMER_HOLD = (B1.I_Time * (B1.CycleTime / (B1.I_Time +B1.E_Time)));
 800145c:	4b78      	ldr	r3, [pc, #480]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	4a77      	ldr	r2, [pc, #476]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001462:	6851      	ldr	r1, [r2, #4]
 8001464:	4a76      	ldr	r2, [pc, #472]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001466:	6890      	ldr	r0, [r2, #8]
 8001468:	4a75      	ldr	r2, [pc, #468]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 800146a:	68d2      	ldr	r2, [r2, #12]
 800146c:	4402      	add	r2, r0
 800146e:	fbb1 f2f2 	udiv	r2, r1, r2
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	4a74      	ldr	r2, [pc, #464]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 8001478:	6013      	str	r3, [r2, #0]
			B2._E_TIMER_HOLD = (B1.E_Time * (B1.CycleTime / (B1.I_Time + B1.E_Time)));
 800147a:	4b71      	ldr	r3, [pc, #452]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	4a70      	ldr	r2, [pc, #448]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001480:	6851      	ldr	r1, [r2, #4]
 8001482:	4a6f      	ldr	r2, [pc, #444]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001484:	6890      	ldr	r0, [r2, #8]
 8001486:	4a6e      	ldr	r2, [pc, #440]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 8001488:	68d2      	ldr	r2, [r2, #12]
 800148a:	4402      	add	r2, r0
 800148c:	fbb1 f2f2 	udiv	r2, r1, r2
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	4a6c      	ldr	r2, [pc, #432]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 8001496:	6053      	str	r3, [r2, #4]
			B2.ramp_time=(B1.RT_Value*10);
 8001498:	4b69      	ldr	r3, [pc, #420]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 800149a:	8a1b      	ldrh	r3, [r3, #16]
 800149c:	461a      	mov	r2, r3
 800149e:	0092      	lsls	r2, r2, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 80014a8:	811a      	strh	r2, [r3, #8]
			B2.ramp_time_percentage = ((float)B2.ramp_time/100.00)*(B2._I_TIMER_HOLD) ;
 80014aa:	4b67      	ldr	r3, [pc, #412]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 80014ac:	891b      	ldrh	r3, [r3, #8]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b6:	ee17 0a90 	vmov	r0, s15
 80014ba:	f7fe ffed 	bl	8000498 <__aeabi_f2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b62      	ldr	r3, [pc, #392]	; (800164c <BACKUP_PC_CMV_PARAMETERS+0x254>)
 80014c4:	f7ff f96a 	bl	800079c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	461d      	mov	r5, r3
 80014d0:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ffbd 	bl	8000454 <__aeabi_ui2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4620      	mov	r0, r4
 80014e0:	4629      	mov	r1, r5
 80014e2:	f7ff f831 	bl	8000548 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb0d 	bl	8000b0c <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 80014f6:	60d3      	str	r3, [r2, #12]
			B4.Ending_Dac=17.1129 * (B1._PIP_Val) + 587.7390+((1/70)*200);
 80014f8:	4b51      	ldr	r3, [pc, #324]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 80014fa:	789b      	ldrb	r3, [r3, #2]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ffb9 	bl	8000474 <__aeabi_i2d>
 8001502:	a349      	add	r3, pc, #292	; (adr r3, 8001628 <BACKUP_PC_CMV_PARAMETERS+0x230>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f81e 	bl	8000548 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	a346      	add	r3, pc, #280	; (adr r3, 8001630 <BACKUP_PC_CMV_PARAMETERS+0x238>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7fe fe5f 	bl	80001dc <__adddf3>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f7fe fe55 	bl	80001dc <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fae7 	bl	8000b0c <__aeabi_d2f>
 800153e:	4603      	mov	r3, r0
 8001540:	4a43      	ldr	r2, [pc, #268]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 8001542:	6293      	str	r3, [r2, #40]	; 0x28
			B4.incrementing_Dac_value_10ms=70;
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 8001546:	4a43      	ldr	r2, [pc, #268]	; (8001654 <BACKUP_PC_CMV_PARAMETERS+0x25c>)
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
			B4.Acheived_ms=(B2.ramp_time_percentage*2);
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 800154c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001550:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001558:	ee17 3a90 	vmov	r3, s15
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 8001560:	835a      	strh	r2, [r3, #26]

			/*B5._CALC_TRIG_VAL = ((float) E_TIME_TOLERANCE / 100.00)* (B2._E_TIMER_HOLD);
			B5._TOLERANCE_EWAVE = B2._E_TIMER_HOLD - B5._CALC_TRIG_VAL;
			B5._TRIG_WINDOW = B5._TOLERANCE_EWAVE* (((float) B5._TRIG_TIME * 10.00) / 100.00);*/

			P1._CALC_TRIG_VAL = ((float)E_TIME_TOLERANCE/100.00)*(B2._E_TIMER_HOLD) ;
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <BACKUP_PC_CMV_PARAMETERS+0x250>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ff74 	bl	8000454 <__aeabi_ui2d>
 800156c:	a332      	add	r3, pc, #200	; (adr r3, 8001638 <BACKUP_PC_CMV_PARAMETERS+0x240>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7fe ffe9 	bl	8000548 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff faa5 	bl	8000acc <__aeabi_d2uiz>
 8001582:	4603      	mov	r3, r0
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <BACKUP_PC_CMV_PARAMETERS+0x260>)
 8001588:	819a      	strh	r2, [r3, #12]

			B3.Pip_Acheived_Flag=0;
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <BACKUP_PC_CMV_PARAMETERS+0x264>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
			B4.nack=1;
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 8001592:	2201      	movs	r2, #1
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
			B4.PID_task_delay=10;
 8001596:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 8001598:	220a      	movs	r2, #10
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
			B4.result1_error=0;
 800159c:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 800159e:	2200      	movs	r2, #0
 80015a0:	63da      	str	r2, [r3, #60]	; 0x3c
			B4.last_result1=0;
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
			B4.PID_task_delay_lock=0;
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <BACKUP_PC_CMV_PARAMETERS+0x258>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
			S5._Set_Peep=B1._PEEP_Val/2;
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <BACKUP_PC_CMV_PARAMETERS+0x248>)
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	085b      	lsrs	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <BACKUP_PC_CMV_PARAMETERS+0x268>)
 80015c2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			vTaskSuspend(Vc_mode_Handler);
 80015c6:	4b27      	ldr	r3, [pc, #156]	; (8001664 <BACKUP_PC_CMV_PARAMETERS+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00b fd40 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <BACKUP_PC_CMV_PARAMETERS+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00b fd3b 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(pc_mode_Handler);
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <BACKUP_PC_CMV_PARAMETERS+0x274>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f00b fd36 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <BACKUP_PC_CMV_PARAMETERS+0x278>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00b fd31 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_simv_mode_Handler);
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <BACKUP_PC_CMV_PARAMETERS+0x27c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f00b fd2c 	bl	800d050 <vTaskSuspend>
		    vTaskSuspend(Vc_cmv_simv_Pid_Handler);
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <BACKUP_PC_CMV_PARAMETERS+0x280>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00b fd27 	bl	800d050 <vTaskSuspend>
		    vTaskSuspend(Pc_simv_Mode_Handler);
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <BACKUP_PC_CMV_PARAMETERS+0x284>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f00b fd22 	bl	800d050 <vTaskSuspend>
		    vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <BACKUP_PC_CMV_PARAMETERS+0x288>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f00b fd1d 	bl	800d050 <vTaskSuspend>

			_CurrentBackupMode=PCCMV_BACKUP;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <BACKUP_PC_CMV_PARAMETERS+0x28c>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]





}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	f3af 8000 	nop.w
 8001628:	03afb7e9 	.word	0x03afb7e9
 800162c:	40311ce7 	.word	0x40311ce7
 8001630:	78d4fdf4 	.word	0x78d4fdf4
 8001634:	40825de9 	.word	0x40825de9
 8001638:	33333333 	.word	0x33333333
 800163c:	3fd33333 	.word	0x3fd33333
 8001640:	2000494c 	.word	0x2000494c
 8001644:	2000466d 	.word	0x2000466d
 8001648:	2000479c 	.word	0x2000479c
 800164c:	40590000 	.word	0x40590000
 8001650:	2000486c 	.word	0x2000486c
 8001654:	428c0000 	.word	0x428c0000
 8001658:	200045ac 	.word	0x200045ac
 800165c:	20004974 	.word	0x20004974
 8001660:	200048fc 	.word	0x200048fc
 8001664:	2000484c 	.word	0x2000484c
 8001668:	200045a8 	.word	0x200045a8
 800166c:	20004614 	.word	0x20004614
 8001670:	2000460c 	.word	0x2000460c
 8001674:	20004728 	.word	0x20004728
 8001678:	200048f4 	.word	0x200048f4
 800167c:	20004948 	.word	0x20004948
 8001680:	20004960 	.word	0x20004960
 8001684:	20004850 	.word	0x20004850

08001688 <Ending_Dac_value_correction_BACKUP_PC>:




void Ending_Dac_value_correction_BACKUP_PC()
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

	if(B1.RR>=30 || B2.ramp_time>80 || (B1.E_Time>4))
 800168c:	4b5f      	ldr	r3, [pc, #380]	; (800180c <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800168e:	7c9b      	ldrb	r3, [r3, #18]
 8001690:	2b1d      	cmp	r3, #29
 8001692:	d807      	bhi.n	80016a4 <Ending_Dac_value_correction_BACKUP_PC+0x1c>
 8001694:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <Ending_Dac_value_correction_BACKUP_PC+0x188>)
 8001696:	891b      	ldrh	r3, [r3, #8]
 8001698:	2b50      	cmp	r3, #80	; 0x50
 800169a:	d803      	bhi.n	80016a4 <Ending_Dac_value_correction_BACKUP_PC+0x1c>
 800169c:	4b5b      	ldr	r3, [pc, #364]	; (800180c <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d961      	bls.n	8001768 <Ending_Dac_value_correction_BACKUP_PC+0xe0>
    {
		    if(S5.P_Max>(B1._PIP_Val))
 80016a4:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a58      	ldr	r2, [pc, #352]	; (800180c <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 80016aa:	7892      	ldrb	r2, [r2, #2]
 80016ac:	4293      	cmp	r3, r2
 80016ae:	dd28      	ble.n	8001702 <Ending_Dac_value_correction_BACKUP_PC+0x7a>
			{
		    	B4.pmax_error1++;
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a58      	ldr	r2, [pc, #352]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016b8:	6253      	str	r3, [r2, #36]	; 0x24
		    	B4.pmax_error2=0;
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
		    	if(B4.pmax_error1>2)
 80016c0:	4b55      	ldr	r3, [pc, #340]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	f340 809a 	ble.w	80017fe <Ending_Dac_value_correction_BACKUP_PC+0x176>
		    	{
		    	B4.Ending_Dac=B4.Ending_Dac-1;
 80016ca:	4b53      	ldr	r3, [pc, #332]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				B4.pmax_error1=0;
 80016de:	4b4e      	ldr	r3, [pc, #312]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
					if(B4.Ending_Dac<=500)
 80016e4:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016e6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016ea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800181c <Ending_Dac_value_correction_BACKUP_PC+0x194>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d900      	bls.n	80016fa <Ending_Dac_value_correction_BACKUP_PC+0x72>
		    if(S5.P_Max>(B1._PIP_Val))
 80016f8:	e081      	b.n	80017fe <Ending_Dac_value_correction_BACKUP_PC+0x176>
						B4.Ending_Dac=500;
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80016fc:	4a48      	ldr	r2, [pc, #288]	; (8001820 <Ending_Dac_value_correction_BACKUP_PC+0x198>)
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(B1._PIP_Val))
 8001700:	e07d      	b.n	80017fe <Ending_Dac_value_correction_BACKUP_PC+0x176>
		    	}
			}
			else if(S5.P_Max<(B1._PIP_Val))
 8001702:	4b44      	ldr	r3, [pc, #272]	; (8001814 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a41      	ldr	r2, [pc, #260]	; (800180c <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 8001708:	7892      	ldrb	r2, [r2, #2]
 800170a:	4293      	cmp	r3, r2
 800170c:	da27      	bge.n	800175e <Ending_Dac_value_correction_BACKUP_PC+0xd6>
			{
				B4.pmax_error2++;
 800170e:	4b42      	ldr	r3, [pc, #264]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	3301      	adds	r3, #1
 8001714:	4a40      	ldr	r2, [pc, #256]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001716:	6213      	str	r3, [r2, #32]
				B4.pmax_error1=0;
 8001718:	4b3f      	ldr	r3, [pc, #252]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	; 0x24
				if(B4.pmax_error2>2)
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	2b02      	cmp	r3, #2
 8001724:	dd6b      	ble.n	80017fe <Ending_Dac_value_correction_BACKUP_PC+0x176>
				{
				B4.Ending_Dac=B4.Ending_Dac+1;
 8001726:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001728:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800172c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001736:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				B4.pmax_error2=0;
 800173a:	4b37      	ldr	r3, [pc, #220]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
				if(B4.Ending_Dac>=4095)
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001742:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001746:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001824 <Ending_Dac_value_correction_BACKUP_PC+0x19c>
 800174a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	da00      	bge.n	8001756 <Ending_Dac_value_correction_BACKUP_PC+0xce>
		    if(S5.P_Max>(B1._PIP_Val))
 8001754:	e053      	b.n	80017fe <Ending_Dac_value_correction_BACKUP_PC+0x176>
					 B4.Ending_Dac=4095;
 8001756:	4b30      	ldr	r3, [pc, #192]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001758:	4a33      	ldr	r2, [pc, #204]	; (8001828 <Ending_Dac_value_correction_BACKUP_PC+0x1a0>)
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(B1._PIP_Val))
 800175c:	e04f      	b.n	80017fe <Ending_Dac_value_correction_BACKUP_PC+0x176>
				}
			}
			else
			{
				B4.Ending_Dac=B4.Ending_Dac;
 800175e:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001764:	6293      	str	r3, [r2, #40]	; 0x28
		    if(S5.P_Max>(B1._PIP_Val))
 8001766:	e04a      	b.n	80017fe <Ending_Dac_value_correction_BACKUP_PC+0x176>
			}
    }

 else if(B1.RR<30 || B2.ramp_time<=80)
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800176a:	7c9b      	ldrb	r3, [r3, #18]
 800176c:	2b1d      	cmp	r3, #29
 800176e:	d903      	bls.n	8001778 <Ending_Dac_value_correction_BACKUP_PC+0xf0>
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <Ending_Dac_value_correction_BACKUP_PC+0x188>)
 8001772:	891b      	ldrh	r3, [r3, #8]
 8001774:	2b50      	cmp	r3, #80	; 0x50
 8001776:	d843      	bhi.n	8001800 <Ending_Dac_value_correction_BACKUP_PC+0x178>
 {
	if(S5._Pip_Avg_val_int>B1._PIP_Val)
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	4a23      	ldr	r2, [pc, #140]	; (800180c <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 800177e:	7892      	ldrb	r2, [r2, #2]
 8001780:	4293      	cmp	r3, r2
 8001782:	dd18      	ble.n	80017b6 <Ending_Dac_value_correction_BACKUP_PC+0x12e>
	{
		B4.Ending_Dac=B4.Ending_Dac-5;
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001786:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800178a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800178e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 8001794:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(B4.Ending_Dac<=500)
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 800179a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800179e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800181c <Ending_Dac_value_correction_BACKUP_PC+0x194>
 80017a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	d900      	bls.n	80017ae <Ending_Dac_value_correction_BACKUP_PC+0x126>
	{
		B4.Ending_Dac=B4.Ending_Dac;

	}
 }
}
 80017ac:	e028      	b.n	8001800 <Ending_Dac_value_correction_BACKUP_PC+0x178>
			B4.Ending_Dac=500;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <Ending_Dac_value_correction_BACKUP_PC+0x198>)
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b4:	e024      	b.n	8001800 <Ending_Dac_value_correction_BACKUP_PC+0x178>
	else if(S5._Pip_Avg_val_int<B1._PIP_Val)
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <Ending_Dac_value_correction_BACKUP_PC+0x18c>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	4a14      	ldr	r2, [pc, #80]	; (800180c <Ending_Dac_value_correction_BACKUP_PC+0x184>)
 80017bc:	7892      	ldrb	r2, [r2, #2]
 80017be:	4293      	cmp	r3, r2
 80017c0:	da18      	bge.n	80017f4 <Ending_Dac_value_correction_BACKUP_PC+0x16c>
		B4.Ending_Dac=B4.Ending_Dac+5;
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80017c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017c8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80017cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80017d2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(B4.Ending_Dac>=4095)
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80017d8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017dc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001824 <Ending_Dac_value_correction_BACKUP_PC+0x19c>
 80017e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	da00      	bge.n	80017ec <Ending_Dac_value_correction_BACKUP_PC+0x164>
}
 80017ea:	e009      	b.n	8001800 <Ending_Dac_value_correction_BACKUP_PC+0x178>
			B4.Ending_Dac=4095;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <Ending_Dac_value_correction_BACKUP_PC+0x1a0>)
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f2:	e005      	b.n	8001800 <Ending_Dac_value_correction_BACKUP_PC+0x178>
		B4.Ending_Dac=B4.Ending_Dac;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <Ending_Dac_value_correction_BACKUP_PC+0x190>)
 80017fa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017fc:	e000      	b.n	8001800 <Ending_Dac_value_correction_BACKUP_PC+0x178>
		    if(S5.P_Max>(B1._PIP_Val))
 80017fe:	bf00      	nop
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000494c 	.word	0x2000494c
 8001810:	2000479c 	.word	0x2000479c
 8001814:	200048fc 	.word	0x200048fc
 8001818:	2000486c 	.word	0x2000486c
 800181c:	43fa0000 	.word	0x43fa0000
 8001820:	43fa0000 	.word	0x43fa0000
 8001824:	457ff000 	.word	0x457ff000
 8001828:	457ff000 	.word	0x457ff000
 800182c:	00000000 	.word	0x00000000

08001830 <Pip_Acheived_Early_BACKUP_PC>:


void Pip_Acheived_Early_BACKUP_PC()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

		     if(B3.Pip_Acheived_Flag==0)
 8001834:	4b90      	ldr	r3, [pc, #576]	; (8001a78 <Pip_Acheived_Early_BACKUP_PC+0x248>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8115 	beq.w	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>

			 }
			 else
			 {

			    B4.result1=(B4.Acheived_ms/B2.ramp_time_percentage)*100;
 800183e:	4b8f      	ldr	r3, [pc, #572]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001840:	8b5b      	ldrh	r3, [r3, #26]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800184a:	4b8d      	ldr	r3, [pc, #564]	; (8001a80 <Pip_Acheived_Early_BACKUP_PC+0x250>)
 800184c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001854:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001a84 <Pip_Acheived_Early_BACKUP_PC+0x254>
 8001858:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185c:	4b87      	ldr	r3, [pc, #540]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800185e:	edc3 7a02 	vstr	s15, [r3, #8]
			    if(B4.result1<=70)
 8001862:	4b86      	ldr	r3, [pc, #536]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001864:	edd3 7a02 	vldr	s15, [r3, #8]
 8001868:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001a88 <Pip_Acheived_Early_BACKUP_PC+0x258>
 800186c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001874:	d81a      	bhi.n	80018ac <Pip_Acheived_Early_BACKUP_PC+0x7c>
			    {
			    	B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms-5;
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001878:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800187c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001884:	4b7d      	ldr	r3, [pc, #500]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001886:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(B4.incrementing_Dac_value_10ms<=50)
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800188c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001890:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001a8c <Pip_Acheived_Early_BACKUP_PC+0x25c>
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d86c      	bhi.n	8001978 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	{
			    		B4.incrementing_Dac_value_10ms=50;
 800189e:	4b77      	ldr	r3, [pc, #476]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018a0:	4a7b      	ldr	r2, [pc, #492]	; (8001a90 <Pip_Acheived_Early_BACKUP_PC+0x260>)
 80018a2:	62da      	str	r2, [r3, #44]	; 0x2c
			    		B4.nack=0;
 80018a4:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	631a      	str	r2, [r3, #48]	; 0x30
 80018aa:	e065      	b.n	8001978 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	}
			    }

			    else if(B4.result1<=80 && B4.result1>70)
 80018ac:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80018b2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001a94 <Pip_Acheived_Early_BACKUP_PC+0x264>
 80018b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	d824      	bhi.n	800190a <Pip_Acheived_Early_BACKUP_PC+0xda>
 80018c0:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001a88 <Pip_Acheived_Early_BACKUP_PC+0x258>
 80018ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	dd1a      	ble.n	800190a <Pip_Acheived_Early_BACKUP_PC+0xda>
			    {
			    	B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms-(0.5);
 80018d4:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018e2:	4b66      	ldr	r3, [pc, #408]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018e4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(B4.incrementing_Dac_value_10ms<=50)
 80018e8:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018ea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018ee:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001a8c <Pip_Acheived_Early_BACKUP_PC+0x25c>
 80018f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d83d      	bhi.n	8001978 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	{
			    		B4.incrementing_Dac_value_10ms=50;
 80018fc:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80018fe:	4a64      	ldr	r2, [pc, #400]	; (8001a90 <Pip_Acheived_Early_BACKUP_PC+0x260>)
 8001900:	62da      	str	r2, [r3, #44]	; 0x2c
			    		B4.nack=0;
 8001902:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001904:	2200      	movs	r2, #0
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
			    	if(B4.incrementing_Dac_value_10ms<=50)
 8001908:	e036      	b.n	8001978 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	}
			    }
			    else if(B4.result1<=90 && B4.result1>80)
 800190a:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800190c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001910:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001a98 <Pip_Acheived_Early_BACKUP_PC+0x268>
 8001914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	d82c      	bhi.n	8001978 <Pip_Acheived_Early_BACKUP_PC+0x148>
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001920:	edd3 7a02 	vldr	s15, [r3, #8]
 8001924:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001a94 <Pip_Acheived_Early_BACKUP_PC+0x264>
 8001928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd22      	ble.n	8001978 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    {
			    	B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms-(0.1);
 8001932:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fdae 	bl	8000498 <__aeabi_f2d>
 800193c:	a34c      	add	r3, pc, #304	; (adr r3, 8001a70 <Pip_Acheived_Early_BACKUP_PC+0x240>)
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	f7fe fc49 	bl	80001d8 <__aeabi_dsub>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f8dd 	bl	8000b0c <__aeabi_d2f>
 8001952:	4603      	mov	r3, r0
 8001954:	4a49      	ldr	r2, [pc, #292]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001956:	62d3      	str	r3, [r2, #44]	; 0x2c
			    	if(B4.incrementing_Dac_value_10ms<=50)
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800195a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800195e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001a8c <Pip_Acheived_Early_BACKUP_PC+0x25c>
 8001962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	d805      	bhi.n	8001978 <Pip_Acheived_Early_BACKUP_PC+0x148>
			    	{
			    		B4.incrementing_Dac_value_10ms=50;
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800196e:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <Pip_Acheived_Early_BACKUP_PC+0x260>)
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
			    		B4.nack=0;
 8001972:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001974:	2200      	movs	r2, #0
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
			    	}
			    }


			    if(B4.nack==0)
 8001978:	4b40      	ldr	r3, [pc, #256]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	2b00      	cmp	r3, #0
 800197e:	d173      	bne.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    {

			    	if(S5.P_Max<B1._PIP_Val)
 8001980:	4b46      	ldr	r3, [pc, #280]	; (8001a9c <Pip_Acheived_Early_BACKUP_PC+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a46      	ldr	r2, [pc, #280]	; (8001aa0 <Pip_Acheived_Early_BACKUP_PC+0x270>)
 8001986:	7892      	ldrb	r2, [r2, #2]
 8001988:	4293      	cmp	r3, r2
 800198a:	da13      	bge.n	80019b4 <Pip_Acheived_Early_BACKUP_PC+0x184>
			    	{
			    		 B4.result1_error++;
 800198c:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	3301      	adds	r3, #1
 8001992:	4a3a      	ldr	r2, [pc, #232]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001994:	63d3      	str	r3, [r2, #60]	; 0x3c
			    		 if(B4.result1_error>=5)
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199a:	2b04      	cmp	r3, #4
 800199c:	dd64      	ble.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		 {
			    			B4.PID_task_delay=B4.PID_task_delay;
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	4a36      	ldr	r2, [pc, #216]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019a4:	6353      	str	r3, [r2, #52]	; 0x34
			    			B4.result1_error=6;
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019a8:	2206      	movs	r2, #6
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
			    		    B4.PID_task_delay_lock=1;
 80019ac:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38
			    	}

			    }
			 }

}
 80019b2:	e059      	b.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    	else if(B4.result1>B4.last_result1)
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	dc00      	bgt.n	80019cc <Pip_Acheived_Early_BACKUP_PC+0x19c>
}
 80019ca:	e04d      	b.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		if(B4.PID_task_delay_lock==0)
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d149      	bne.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		  if(B4.result1<60)
 80019d4:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019da:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001aa4 <Pip_Acheived_Early_BACKUP_PC+0x274>
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	d505      	bpl.n	80019f4 <Pip_Acheived_Early_BACKUP_PC+0x1c4>
			    			  B4.PID_task_delay=B4.PID_task_delay+10;
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ec:	330a      	adds	r3, #10
 80019ee:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019f0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80019f2:	e039      	b.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		  else if(B4.result1<70 && B4.result1>=60)
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 80019f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80019fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001a88 <Pip_Acheived_Early_BACKUP_PC+0x258>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d50f      	bpl.n	8001a28 <Pip_Acheived_Early_BACKUP_PC+0x1f8>
 8001a08:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a0e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001aa4 <Pip_Acheived_Early_BACKUP_PC+0x274>
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	db05      	blt.n	8001a28 <Pip_Acheived_Early_BACKUP_PC+0x1f8>
			    			  B4.PID_task_delay=B4.PID_task_delay+6;
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	3306      	adds	r3, #6
 8001a22:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a24:	6353      	str	r3, [r2, #52]	; 0x34
 8001a26:	e01f      	b.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    		  else if(B4.result1<=80 && B4.result1>=70)
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a2e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001a94 <Pip_Acheived_Early_BACKUP_PC+0x264>
 8001a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	d80f      	bhi.n	8001a5c <Pip_Acheived_Early_BACKUP_PC+0x22c>
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a42:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001a88 <Pip_Acheived_Early_BACKUP_PC+0x258>
 8001a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	db05      	blt.n	8001a5c <Pip_Acheived_Early_BACKUP_PC+0x22c>
			    			  B4.PID_task_delay=B4.PID_task_delay+4;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	3304      	adds	r3, #4
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a58:	6353      	str	r3, [r2, #52]	; 0x34
 8001a5a:	e005      	b.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
			    			  B4.PID_task_delay=B4.PID_task_delay+1;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <Pip_Acheived_Early_BACKUP_PC+0x24c>)
 8001a64:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001a66:	e7ff      	b.n	8001a68 <Pip_Acheived_Early_BACKUP_PC+0x238>
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	f3af 8000 	nop.w
 8001a70:	9999999a 	.word	0x9999999a
 8001a74:	3fb99999 	.word	0x3fb99999
 8001a78:	20004974 	.word	0x20004974
 8001a7c:	2000486c 	.word	0x2000486c
 8001a80:	2000479c 	.word	0x2000479c
 8001a84:	42c80000 	.word	0x42c80000
 8001a88:	428c0000 	.word	0x428c0000
 8001a8c:	42480000 	.word	0x42480000
 8001a90:	42480000 	.word	0x42480000
 8001a94:	42a00000 	.word	0x42a00000
 8001a98:	42b40000 	.word	0x42b40000
 8001a9c:	200048fc 	.word	0x200048fc
 8001aa0:	2000494c 	.word	0x2000494c
 8001aa4:	42700000 	.word	0x42700000

08001aa8 <Pip_Acheived_Slowly_BACKUP_PC>:



void Pip_Acheived_Slowly_BACKUP_PC()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	               B4.result2=(B4.Acheived_ms/B2.ramp_time_percentage)*100;
 8001aac:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001aae:	8b5b      	ldrh	r3, [r3, #26]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ab8:	4b54      	ldr	r3, [pc, #336]	; (8001c0c <Pip_Acheived_Slowly_BACKUP_PC+0x164>)
 8001aba:	ed93 7a03 	vldr	s14, [r3, #12]
 8001abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001c10 <Pip_Acheived_Slowly_BACKUP_PC+0x168>
 8001ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aca:	4b4f      	ldr	r3, [pc, #316]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001acc:	edc3 7a04 	vstr	s15, [r3, #16]
		    	   B4.last_result2=B4.result2;
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001ad6:	6153      	str	r3, [r2, #20]

		    	   if(B4.result2 >= 130)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001ada:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ade:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001c14 <Pip_Acheived_Slowly_BACKUP_PC+0x16c>
 8001ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aea:	db1b      	blt.n	8001b24 <Pip_Acheived_Slowly_BACKUP_PC+0x7c>
		    	   {
		    		    B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+5;
 8001aec:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001aee:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001af2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001af6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001afc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   	    if(B4.incrementing_Dac_value_10ms>=350)
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b02:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b06:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001c18 <Pip_Acheived_Slowly_BACKUP_PC+0x170>
 8001b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b12:	da00      	bge.n	8001b16 <Pip_Acheived_Slowly_BACKUP_PC+0x6e>
		    	   			   B4.nack=0;
		    	   		}
		    	   	}


}
 8001b14:	e070      	b.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   	    	 B4.incrementing_Dac_value_10ms=350;
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b18:	4a40      	ldr	r2, [pc, #256]	; (8001c1c <Pip_Acheived_Slowly_BACKUP_PC+0x174>)
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   	    	 B4.nack=0;
 8001b1c:	4b3a      	ldr	r3, [pc, #232]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b22:	e069      	b.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   else if(B4.result2 > 120 && B4.result2 <130)
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b26:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b2a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001c20 <Pip_Acheived_Slowly_BACKUP_PC+0x178>
 8001b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd24      	ble.n	8001b82 <Pip_Acheived_Slowly_BACKUP_PC+0xda>
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b3e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001c14 <Pip_Acheived_Slowly_BACKUP_PC+0x16c>
 8001b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d51a      	bpl.n	8001b82 <Pip_Acheived_Slowly_BACKUP_PC+0xda>
		    		    B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+(0.5);
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b4e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b5a:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b5c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   		if(B4.incrementing_Dac_value_10ms>=350)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b62:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b66:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001c18 <Pip_Acheived_Slowly_BACKUP_PC+0x170>
 8001b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	db41      	blt.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   			  B4.incrementing_Dac_value_10ms=350;
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b76:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <Pip_Acheived_Slowly_BACKUP_PC+0x174>)
 8001b78:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			  B4.nack=0;
 8001b7a:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
		    	   		if(B4.incrementing_Dac_value_10ms>=350)
 8001b80:	e03a      	b.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   	else if(B4.result2<=120 && B4.result2>=110)
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b84:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b88:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001c20 <Pip_Acheived_Slowly_BACKUP_PC+0x178>
 8001b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d900      	bls.n	8001b98 <Pip_Acheived_Slowly_BACKUP_PC+0xf0>
}
 8001b96:	e02f      	b.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   	else if(B4.result2<=120 && B4.result2>=110)
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001b9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b9e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001c24 <Pip_Acheived_Slowly_BACKUP_PC+0x17c>
 8001ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	da00      	bge.n	8001bae <Pip_Acheived_Slowly_BACKUP_PC+0x106>
}
 8001bac:	e024      	b.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   		B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+(0.1);
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc70 	bl	8000498 <__aeabi_f2d>
 8001bb8:	a311      	add	r3, pc, #68	; (adr r3, 8001c00 <Pip_Acheived_Slowly_BACKUP_PC+0x158>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fb0d 	bl	80001dc <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ff9f 	bl	8000b0c <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
		    	   		if(B4.incrementing_Dac_value_10ms>=350)
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001bd6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001bda:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001c18 <Pip_Acheived_Slowly_BACKUP_PC+0x170>
 8001bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	da00      	bge.n	8001bea <Pip_Acheived_Slowly_BACKUP_PC+0x142>
}
 8001be8:	e006      	b.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
		    	   			   B4.incrementing_Dac_value_10ms=350;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <Pip_Acheived_Slowly_BACKUP_PC+0x174>)
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			   B4.nack=0;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <Pip_Acheived_Slowly_BACKUP_PC+0x160>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001bf6:	e7ff      	b.n	8001bf8 <Pip_Acheived_Slowly_BACKUP_PC+0x150>
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	9999999a 	.word	0x9999999a
 8001c04:	3fb99999 	.word	0x3fb99999
 8001c08:	2000486c 	.word	0x2000486c
 8001c0c:	2000479c 	.word	0x2000479c
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	43020000 	.word	0x43020000
 8001c18:	43af0000 	.word	0x43af0000
 8001c1c:	43af0000 	.word	0x43af0000
 8001c20:	42f00000 	.word	0x42f00000
 8001c24:	42dc0000 	.word	0x42dc0000

08001c28 <Pip_Acheived_Normally_BACKUP_PC>:
void Pip_Acheived_Normally_BACKUP_PC()
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
 	   B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms;
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <Pip_Acheived_Normally_BACKUP_PC+0x18>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <Pip_Acheived_Normally_BACKUP_PC+0x18>)
 8001c32:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	2000486c 	.word	0x2000486c

08001c44 <Pip_Not_Acheived_BACKUP_PC>:


void Pip_Not_Acheived_BACKUP_PC()
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
		   if(B3.Pip_Acheived_Flag==0)
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <Pip_Not_Acheived_BACKUP_PC+0x4c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11a      	bne.n	8001c86 <Pip_Not_Acheived_BACKUP_PC+0x42>
		   {
			   B4.incrementing_Dac_value_10ms=B4.incrementing_Dac_value_10ms+1;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8001c52:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001c56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8001c60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			   if(B4.incrementing_Dac_value_10ms>=350)
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8001c66:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001c6a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c98 <Pip_Not_Acheived_BACKUP_PC+0x54>
 8001c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c76:	da00      	bge.n	8001c7a <Pip_Not_Acheived_BACKUP_PC+0x36>
			   {
				   B4.incrementing_Dac_value_10ms=350;
				   B4.nack=0;
			   }
		   }
}
 8001c78:	e005      	b.n	8001c86 <Pip_Not_Acheived_BACKUP_PC+0x42>
				   B4.incrementing_Dac_value_10ms=350;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <Pip_Not_Acheived_BACKUP_PC+0x58>)
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
				   B4.nack=0;
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <Pip_Not_Acheived_BACKUP_PC+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	20004974 	.word	0x20004974
 8001c94:	2000486c 	.word	0x2000486c
 8001c98:	43af0000 	.word	0x43af0000
 8001c9c:	43af0000 	.word	0x43af0000

08001ca0 <Peep_Vale_Lock_delay_BACKUP_PC>:




void Peep_Vale_Lock_delay_BACKUP_PC()
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001ca6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cac:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb4:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cb6:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc4:	ee17 2a90 	vmov	r2, s15
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
		S5._Pip_Avg_count = 0;
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8001cd4:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cde:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ce2:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001ce4:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cec:	4b56      	ldr	r3, [pc, #344]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cee:	edc3 7a07 	vstr	s15, [r3, #28]
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8001cf2:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001cf4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfc:	ee17 2a90 	vmov	r2, s15
 8001d00:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d02:	621a      	str	r2, [r3, #32]

		if (B1.RR >= 30 || B2._E_TIMER_HOLD < 500)
 8001d04:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <Peep_Vale_Lock_delay_BACKUP_PC+0x1ac>)
 8001d06:	7c9b      	ldrb	r3, [r3, #18]
 8001d08:	2b1d      	cmp	r3, #29
 8001d0a:	d804      	bhi.n	8001d16 <Peep_Vale_Lock_delay_BACKUP_PC+0x76>
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <Peep_Vale_Lock_delay_BACKUP_PC+0x1b0>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d14:	d203      	bcs.n	8001d1e <Peep_Vale_Lock_delay_BACKUP_PC+0x7e>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	4a4b      	ldr	r2, [pc, #300]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d1c:	6213      	str	r3, [r2, #32]
		}

		if (S5._Peep_Avg_val_int > (B1._PEEP_Val + 1))
 8001d1e:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <Peep_Vale_Lock_delay_BACKUP_PC+0x1ac>)
 8001d24:	78db      	ldrb	r3, [r3, #3]
 8001d26:	3301      	adds	r3, #1
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dd32      	ble.n	8001d92 <Peep_Vale_Lock_delay_BACKUP_PC+0xf2>
		{
			S5._Set_Peep = S5._Set_Peep - 0.5f;
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d2e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d3a:	4b43      	ldr	r3, [pc, #268]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d3c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			S5.error_count++;
 8001d40:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a40      	ldr	r2, [pc, #256]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d48:	6293      	str	r3, [r2, #40]	; 0x28
			if (S5.error_count > 0)
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	dd11      	ble.n	8001d76 <Peep_Vale_Lock_delay_BACKUP_PC+0xd6>
			{
				S5.Lock_delay = S5.Lock_delay + 10;
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d54:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001d56:	330a      	adds	r3, #10
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d5c:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay > 500)
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001d68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d6c:	d903      	bls.n	8001d76 <Peep_Vale_Lock_delay_BACKUP_PC+0xd6>
					S5.Lock_delay = 500;
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d74:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep <= 3)
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d78:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d7c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d851      	bhi.n	8001e2e <Peep_Vale_Lock_delay_BACKUP_PC+0x18e>
			{
				S5._Set_Peep = 3;
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d8c:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <Peep_Vale_Lock_delay_BACKUP_PC+0x1b4>)
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d90:	e04d      	b.n	8001e2e <Peep_Vale_Lock_delay_BACKUP_PC+0x18e>
			}
		}
		else if (S5._Peep_Avg_val_int < (B1._PEEP_Val - 1))
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <Peep_Vale_Lock_delay_BACKUP_PC+0x1ac>)
 8001d98:	78db      	ldrb	r3, [r3, #3]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	da42      	bge.n	8001e26 <Peep_Vale_Lock_delay_BACKUP_PC+0x186>
		{
			S5._Set_Peep = S5._Set_Peep + 0.5f;
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001da2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001da6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001daa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001db0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			S5.error_count2++;
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	3301      	adds	r3, #1
 8001dba:	4a23      	ldr	r2, [pc, #140]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (S5.error_count2 > 0)
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	dd14      	ble.n	8001df0 <Peep_Vale_Lock_delay_BACKUP_PC+0x150>
			{
				S5.Lock_delay = S5.Lock_delay - 10;
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001dc8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001dca:	3b0a      	subs	r3, #10
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001dd0:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay < 1 || S5.Lock_delay > 500)
 8001dd8:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001dda:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <Peep_Vale_Lock_delay_BACKUP_PC+0x14a>
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001de2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001de4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001de8:	d902      	bls.n	8001df0 <Peep_Vale_Lock_delay_BACKUP_PC+0x150>
					S5.Lock_delay = 1;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep > B1._PEEP_Val + 2)
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001df2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <Peep_Vale_Lock_delay_BACKUP_PC+0x1ac>)
 8001df8:	78db      	ldrb	r3, [r3, #3]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	dd0f      	ble.n	8001e2e <Peep_Vale_Lock_delay_BACKUP_PC+0x18e>
			{
				S5._Set_Peep = B1._PEEP_Val / 2;
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <Peep_Vale_Lock_delay_BACKUP_PC+0x1ac>)
 8001e10:	78db      	ldrb	r3, [r3, #3]
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001e20:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8001e24:	e003      	b.n	8001e2e <Peep_Vale_Lock_delay_BACKUP_PC+0x18e>
			}
		}
		else
		{
			S5._Set_Peep = S5._Set_Peep;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
		}
		S5._Peep_Avg_count = 0;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
		S5._Peep_Avg = 0;
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <Peep_Vale_Lock_delay_BACKUP_PC+0x1a8>)
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	200048fc 	.word	0x200048fc
 8001e4c:	2000494c 	.word	0x2000494c
 8001e50:	2000479c 	.word	0x2000479c
 8001e54:	40400000 	.word	0x40400000

08001e58 <Get_Volume>:

#include "Flow_Sensors_Data.h"


void Get_Volume()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0

	vol.Flow_Volume=(Flow_Sensor_cal.Flow1/60.00)*2;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <Get_Volume+0x64>)
 8001e5e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <Get_Volume+0x68>)
 8001e68:	f7fe fc98 	bl	800079c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4610      	mov	r0, r2
 8001e72:	4619      	mov	r1, r3
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	f7fe f9b0 	bl	80001dc <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7fe fe42 	bl	8000b0c <__aeabi_d2f>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <Get_Volume+0x6c>)
 8001e8c:	6013      	str	r3, [r2, #0]
	vol.Volume=vol.Volume+vol.Flow_Volume;
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <Get_Volume+0x6c>)
 8001e90:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <Get_Volume+0x6c>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <Get_Volume+0x6c>)
 8001ea0:	edc3 7a01 	vstr	s15, [r3, #4]
	vol.Volume_Val=(int)vol.Volume;
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <Get_Volume+0x6c>)
 8001ea6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eae:	ee17 2a90 	vmov	r2, s15
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <Get_Volume+0x6c>)
 8001eb4:	609a      	str	r2, [r3, #8]

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20004730 	.word	0x20004730
 8001ec0:	404e0000 	.word	0x404e0000
 8001ec4:	2000482c 	.word	0x2000482c

08001ec8 <AW_flow_raw_Volt>:

float AW_flow_raw_Volt(uint16_t r)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
	float volt=0;
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
	volt=(r*6144.00)/32768;
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe faca 	bl	8000474 <__aeabi_i2d>
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <AW_flow_raw_Volt+0x54>)
 8001ee6:	f7fe fb2f 	bl	8000548 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <AW_flow_raw_Volt+0x58>)
 8001ef8:	f7fe fc50 	bl	800079c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f7fe fe02 	bl	8000b0c <__aeabi_d2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60fb      	str	r3, [r7, #12]
	return volt;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	ee07 3a90 	vmov	s15, r3
}
 8001f12:	eeb0 0a67 	vmov.f32	s0, s15
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40b80000 	.word	0x40b80000
 8001f20:	40e00000 	.word	0x40e00000

08001f24 <AW_flow_moving_average>:

uint16_t AW_flow_moving_average(uint16_t value)
{
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
	    Flow_sensor.AW_flow_raw1_new = value;
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	81d3      	strh	r3, [r2, #14]

	    Flow_sensor.AW_flow_raw1_new = ((Flow_sensor.AW_flow_raw1_new-Flow_sensor.AW_flow_raw_old)/3.00)+Flow_sensor.AW_flow_raw_old;
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f36:	89db      	ldrh	r3, [r3, #14]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f3c:	8a1b      	ldrh	r3, [r3, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fa97 	bl	8000474 <__aeabi_i2d>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <AW_flow_moving_average+0x78>)
 8001f4c:	f7fe fc26 	bl	800079c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f5a:	8a1b      	ldrh	r3, [r3, #16]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fa89 	bl	8000474 <__aeabi_i2d>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4620      	mov	r0, r4
 8001f68:	4629      	mov	r1, r5
 8001f6a:	f7fe f937 	bl	80001dc <__adddf3>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fda9 	bl	8000acc <__aeabi_d2uiz>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f80:	81da      	strh	r2, [r3, #14]

	    Flow_sensor.AW_flow_raw_old = Flow_sensor.AW_flow_raw1_new;
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f84:	89da      	ldrh	r2, [r3, #14]
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f88:	821a      	strh	r2, [r3, #16]

		return Flow_sensor.AW_flow_raw1_new;
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <AW_flow_moving_average+0x74>)
 8001f8c:	89db      	ldrh	r3, [r3, #14]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bdb0      	pop	{r4, r5, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20004564 	.word	0x20004564
 8001f9c:	40080000 	.word	0x40080000

08001fa0 <ADS1115_AW_flow_sensor>:

uint16_t ADS1115_AW_flow_sensor()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af02      	add	r7, sp, #8
		uint16_t  ADCraw=0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	80fb      	strh	r3, [r7, #6]

		Flow_sensor.ADSwrite[0] = 0x01;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <ADS1115_AW_flow_sensor+0x7c>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	721a      	strb	r2, [r3, #8]

		Flow_sensor.ADSwrite[1] =0x40;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <ADS1115_AW_flow_sensor+0x7c>)
 8001fb2:	2240      	movs	r2, #64	; 0x40
 8001fb4:	725a      	strb	r2, [r3, #9]

		Flow_sensor.ADSwrite[2] = 0xE3;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <ADS1115_AW_flow_sensor+0x7c>)
 8001fb8:	22e3      	movs	r2, #227	; 0xe3
 8001fba:	729a      	strb	r2, [r3, #10]

      	if(HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1,(Flow_sensor.ADSwrite), 3, 10)!=HAL_OK)
 8001fbc:	230a      	movs	r3, #10
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <ADS1115_AW_flow_sensor+0x80>)
 8001fc4:	2190      	movs	r1, #144	; 0x90
 8001fc6:	4817      	ldr	r0, [pc, #92]	; (8002024 <ADS1115_AW_flow_sensor+0x84>)
 8001fc8:	f006 fe52 	bl	8008c70 <HAL_I2C_Master_Transmit>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <ADS1115_AW_flow_sensor+0x38>
      	{
      		Flow_sensor.fault=1;
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <ADS1115_AW_flow_sensor+0x7c>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	749a      	strb	r2, [r3, #18]
      	}

      	Flow_sensor.ADSwrite[0] = 0x00;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <ADS1115_AW_flow_sensor+0x7c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	721a      	strb	r2, [r3, #8]

		HAL_I2C_Master_Transmit(&hi2c2, ADS1115_ADDRESS<<1, (Flow_sensor.ADSwrite), 1, 10);
 8001fde:	230a      	movs	r3, #10
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <ADS1115_AW_flow_sensor+0x80>)
 8001fe6:	2190      	movs	r1, #144	; 0x90
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <ADS1115_AW_flow_sensor+0x84>)
 8001fea:	f006 fe41 	bl	8008c70 <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c2, (ADS1115_ADDRESS<<1),(Flow_sensor.ADSread),2,10);
 8001fee:	230a      	movs	r3, #10
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <ADS1115_AW_flow_sensor+0x88>)
 8001ff6:	2190      	movs	r1, #144	; 0x90
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <ADS1115_AW_flow_sensor+0x84>)
 8001ffa:	f006 ff37 	bl	8008e6c <HAL_I2C_Master_Receive>

		ADCraw = ((Flow_sensor.ADSread[0]) << 8 | (Flow_sensor.ADSread[1]));
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <ADS1115_AW_flow_sensor+0x7c>)
 8002000:	7adb      	ldrb	r3, [r3, #11]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21a      	sxth	r2, r3
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <ADS1115_AW_flow_sensor+0x7c>)
 8002008:	7b1b      	ldrb	r3, [r3, #12]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21b      	sxth	r3, r3
 8002010:	80fb      	strh	r3, [r7, #6]

		return   ADCraw;
 8002012:	88fb      	ldrh	r3, [r7, #6]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20004564 	.word	0x20004564
 8002020:	2000456c 	.word	0x2000456c
 8002024:	20004990 	.word	0x20004990
 8002028:	2000456f 	.word	0x2000456f

0800202c <Get_AW_Flow>:

void Get_AW_Flow(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	    Flow_sensor.AW_flow_raw = ADS1115_AW_flow_sensor();
 8002030:	f7ff ffb6 	bl	8001fa0 <ADS1115_AW_flow_sensor>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <Get_AW_Flow+0x44>)
 800203a:	805a      	strh	r2, [r3, #2]

	    Flow_sensor.AW_flow_raw_filtered = AW_flow_moving_average(Flow_sensor.AW_flow_raw);
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <Get_AW_Flow+0x44>)
 800203e:	885b      	ldrh	r3, [r3, #2]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff6f 	bl	8001f24 <AW_flow_moving_average>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <Get_AW_Flow+0x44>)
 800204c:	809a      	strh	r2, [r3, #4]

	 	Flow_sensor.AW_flow_milli_volt = AW_flow_raw_Volt(Flow_sensor.AW_flow_raw_filtered);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <Get_AW_Flow+0x44>)
 8002050:	889b      	ldrh	r3, [r3, #4]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff38 	bl	8001ec8 <AW_flow_raw_Volt>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
 800205c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002060:	ee17 3a90 	vmov	r3, s15
 8002064:	b29a      	uxth	r2, r3
 8002066:	4b02      	ldr	r3, [pc, #8]	; (8002070 <Get_AW_Flow+0x44>)
 8002068:	80da      	strh	r2, [r3, #6]
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20004564 	.word	0x20004564

08002074 <Flow_Sensor_7002_offset>:

void Flow_Sensor_7002_offset(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	for(int i=0;i<3000;i++)
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	e008      	b.n	8002092 <Flow_Sensor_7002_offset+0x1e>
	{
			Get_AW_Flow();
 8002080:	f7ff ffd4 	bl	800202c <Get_AW_Flow>
			Flow_sensor.AW_Flow_Offset=Flow_sensor.AW_flow_milli_volt;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <Flow_Sensor_7002_offset+0x34>)
 8002086:	88da      	ldrh	r2, [r3, #6]
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <Flow_Sensor_7002_offset+0x34>)
 800208a:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<3000;i++)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002098:	4293      	cmp	r3, r2
 800209a:	ddf1      	ble.n	8002080 <Flow_Sensor_7002_offset+0xc>
	}
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20004564 	.word	0x20004564

080020ac <adj>:




long adj(long x, long in_min, long in_max, long out_min, long out_max)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	69b9      	ldr	r1, [r7, #24]
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	1a8a      	subs	r2, r1, r2
 80020c6:	fb02 f203 	mul.w	r2, r2, r3
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1acb      	subs	r3, r1, r3
 80020d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4413      	add	r3, r2
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	0000      	movs	r0, r0
	...

080020e8 <_Flow>:

void _Flow()
{
 80020e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af02      	add	r7, sp, #8

	    const int numReadings  = 15;
 80020f0:	230f      	movs	r3, #15
 80020f2:	607b      	str	r3, [r7, #4]
	    Flow_Sensor_cal.delp_flow1 =(Flow_sensor.AW_flow_milli_volt-Flow_sensor.AW_Flow_Offset)/1000.00;
 80020f4:	4b58      	ldr	r3, [pc, #352]	; (8002258 <_Flow+0x170>)
 80020f6:	88db      	ldrh	r3, [r3, #6]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b57      	ldr	r3, [pc, #348]	; (8002258 <_Flow+0x170>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe f9b7 	bl	8000474 <__aeabi_i2d>
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	4b54      	ldr	r3, [pc, #336]	; (800225c <_Flow+0x174>)
 800210c:	f7fe fb46 	bl	800079c <__aeabi_ddiv>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fcf8 	bl	8000b0c <__aeabi_d2f>
 800211c:	4603      	mov	r3, r0
 800211e:	4a50      	ldr	r2, [pc, #320]	; (8002260 <_Flow+0x178>)
 8002120:	6013      	str	r3, [r2, #0]
	    Flow_Sensor_cal.dp=Flow_Sensor_cal.delp_flow1*10;
 8002122:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <_Flow+0x178>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800212c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <_Flow+0x178>)
 8002132:	edc3 7a01 	vstr	s15, [r3, #4]


		if(Flow_Sensor_cal.dp>0)
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <_Flow+0x178>)
 8002138:	edd3 7a01 	vldr	s15, [r3, #4]
 800213c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	f340 808e 	ble.w	8002264 <_Flow+0x17c>
		{
			Flow_Sensor_cal.Flow1=0.1512*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)-3.3424*(Flow_Sensor_cal.dp)*(Flow_Sensor_cal.dp)+41.657*(Flow_Sensor_cal.dp);
 8002148:	4b45      	ldr	r3, [pc, #276]	; (8002260 <_Flow+0x178>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f9a3 	bl	8000498 <__aeabi_f2d>
 8002152:	a33b      	add	r3, pc, #236	; (adr r3, 8002240 <_Flow+0x158>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	f7fe f9f6 	bl	8000548 <__aeabi_dmul>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <_Flow+0x178>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f995 	bl	8000498 <__aeabi_f2d>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe f9e7 	bl	8000548 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	461d      	mov	r5, r3
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <_Flow+0x178>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f986 	bl	8000498 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4620      	mov	r0, r4
 8002192:	4629      	mov	r1, r5
 8002194:	f7fe f9d8 	bl	8000548 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4614      	mov	r4, r2
 800219e:	461d      	mov	r5, r3
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <_Flow+0x178>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f977 	bl	8000498 <__aeabi_f2d>
 80021aa:	a327      	add	r3, pc, #156	; (adr r3, 8002248 <_Flow+0x160>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe f9ca 	bl	8000548 <__aeabi_dmul>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4690      	mov	r8, r2
 80021ba:	4699      	mov	r9, r3
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <_Flow+0x178>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f969 	bl	8000498 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4640      	mov	r0, r8
 80021cc:	4649      	mov	r1, r9
 80021ce:	f7fe f9bb 	bl	8000548 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4620      	mov	r0, r4
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fd fffd 	bl	80001d8 <__aeabi_dsub>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4614      	mov	r4, r2
 80021e4:	461d      	mov	r5, r3
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <_Flow+0x178>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f954 	bl	8000498 <__aeabi_f2d>
 80021f0:	a317      	add	r3, pc, #92	; (adr r3, 8002250 <_Flow+0x168>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f9a7 	bl	8000548 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4620      	mov	r0, r4
 8002200:	4629      	mov	r1, r5
 8002202:	f7fd ffeb 	bl	80001dc <__adddf3>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4915      	ldr	r1, [pc, #84]	; (8002260 <_Flow+0x178>)
 800220c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1=adj(Flow_Sensor_cal.Flow1,0,160,0,185);
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <_Flow+0x178>)
 8002212:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f7fe fc2f 	bl	8000a7c <__aeabi_d2iz>
 800221e:	23b9      	movs	r3, #185	; 0xb9
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2300      	movs	r3, #0
 8002224:	22a0      	movs	r2, #160	; 0xa0
 8002226:	2100      	movs	r1, #0
 8002228:	f7ff ff40 	bl	80020ac <adj>
 800222c:	4603      	mov	r3, r0
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f920 	bl	8000474 <__aeabi_i2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4909      	ldr	r1, [pc, #36]	; (8002260 <_Flow+0x178>)
 800223a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800223e:	e0a6      	b.n	800238e <_Flow+0x2a6>
 8002240:	8793dd98 	.word	0x8793dd98
 8002244:	3fc35a85 	.word	0x3fc35a85
 8002248:	36113405 	.word	0x36113405
 800224c:	400abd3c 	.word	0x400abd3c
 8002250:	9374bc6a 	.word	0x9374bc6a
 8002254:	4044d418 	.word	0x4044d418
 8002258:	20004564 	.word	0x20004564
 800225c:	408f4000 	.word	0x408f4000
 8002260:	20004730 	.word	0x20004730
		}
		else if(Flow_Sensor_cal.dp<0)
 8002264:	4b8a      	ldr	r3, [pc, #552]	; (8002490 <_Flow+0x3a8>)
 8002266:	edd3 7a01 	vldr	s15, [r3, #4]
 800226a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	f140 808c 	bpl.w	800238e <_Flow+0x2a6>
		{
			Flow_Sensor_cal.dp*=-1;
 8002276:	4b86      	ldr	r3, [pc, #536]	; (8002490 <_Flow+0x3a8>)
 8002278:	edd3 7a01 	vldr	s15, [r3, #4]
 800227c:	eef1 7a67 	vneg.f32	s15, s15
 8002280:	4b83      	ldr	r3, [pc, #524]	; (8002490 <_Flow+0x3a8>)
 8002282:	edc3 7a01 	vstr	s15, [r3, #4]
			Flow_Sensor_cal.Flow1=0.1512*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp-3.3424*Flow_Sensor_cal.dp*Flow_Sensor_cal.dp+41.657*Flow_Sensor_cal.dp;
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <_Flow+0x3a8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f904 	bl	8000498 <__aeabi_f2d>
 8002290:	a377      	add	r3, pc, #476	; (adr r3, 8002470 <_Flow+0x388>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fe f957 	bl	8000548 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4690      	mov	r8, r2
 80022a0:	4699      	mov	r9, r3
 80022a2:	4b7b      	ldr	r3, [pc, #492]	; (8002490 <_Flow+0x3a8>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f8f6 	bl	8000498 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4640      	mov	r0, r8
 80022b2:	4649      	mov	r1, r9
 80022b4:	f7fe f948 	bl	8000548 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4690      	mov	r8, r2
 80022be:	4699      	mov	r9, r3
 80022c0:	4b73      	ldr	r3, [pc, #460]	; (8002490 <_Flow+0x3a8>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f8e7 	bl	8000498 <__aeabi_f2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	f7fe f939 	bl	8000548 <__aeabi_dmul>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4690      	mov	r8, r2
 80022dc:	4699      	mov	r9, r3
 80022de:	4b6c      	ldr	r3, [pc, #432]	; (8002490 <_Flow+0x3a8>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f8d8 	bl	8000498 <__aeabi_f2d>
 80022e8:	a363      	add	r3, pc, #396	; (adr r3, 8002478 <_Flow+0x390>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f92b 	bl	8000548 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4692      	mov	sl, r2
 80022f8:	469b      	mov	fp, r3
 80022fa:	4b65      	ldr	r3, [pc, #404]	; (8002490 <_Flow+0x3a8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f8ca 	bl	8000498 <__aeabi_f2d>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4650      	mov	r0, sl
 800230a:	4659      	mov	r1, fp
 800230c:	f7fe f91c 	bl	8000548 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4640      	mov	r0, r8
 8002316:	4649      	mov	r1, r9
 8002318:	f7fd ff5e 	bl	80001d8 <__aeabi_dsub>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4690      	mov	r8, r2
 8002322:	4699      	mov	r9, r3
 8002324:	4b5a      	ldr	r3, [pc, #360]	; (8002490 <_Flow+0x3a8>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f8b5 	bl	8000498 <__aeabi_f2d>
 800232e:	a354      	add	r3, pc, #336	; (adr r3, 8002480 <_Flow+0x398>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fe f908 	bl	8000548 <__aeabi_dmul>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4640      	mov	r0, r8
 800233e:	4649      	mov	r1, r9
 8002340:	f7fd ff4c 	bl	80001dc <__adddf3>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4951      	ldr	r1, [pc, #324]	; (8002490 <_Flow+0x3a8>)
 800234a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1=adj(Flow_Sensor_cal.Flow1,0,160,0,185);
 800234e:	4b50      	ldr	r3, [pc, #320]	; (8002490 <_Flow+0x3a8>)
 8002350:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fb90 	bl	8000a7c <__aeabi_d2iz>
 800235c:	23b9      	movs	r3, #185	; 0xb9
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	22a0      	movs	r2, #160	; 0xa0
 8002364:	2100      	movs	r1, #0
 8002366:	f7ff fea1 	bl	80020ac <adj>
 800236a:	4603      	mov	r3, r0
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f881 	bl	8000474 <__aeabi_i2d>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	4946      	ldr	r1, [pc, #280]	; (8002490 <_Flow+0x3a8>)
 8002378:	e9c1 2304 	strd	r2, r3, [r1, #16]
			Flow_Sensor_cal.Flow1*=-1;
 800237c:	4b44      	ldr	r3, [pc, #272]	; (8002490 <_Flow+0x3a8>)
 800237e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002382:	4614      	mov	r4, r2
 8002384:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <_Flow+0x3a8>)
 800238a:	e9c3 4504 	strd	r4, r5, [r3, #16]

		}


		      Flow_Sensor_cal.total = Flow_Sensor_cal.total - Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex];
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <_Flow+0x3a8>)
 8002390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <_Flow+0x3a8>)
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	493e      	ldr	r1, [pc, #248]	; (8002490 <_Flow+0x3a8>)
 8002398:	3306      	adds	r3, #6
 800239a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	4a3b      	ldr	r2, [pc, #236]	; (8002490 <_Flow+0x3a8>)
 80023a2:	6593      	str	r3, [r2, #88]	; 0x58
		      Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex] = Flow_Sensor_cal.Flow1;
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <_Flow+0x3a8>)
 80023a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023aa:	4939      	ldr	r1, [pc, #228]	; (8002490 <_Flow+0x3a8>)
 80023ac:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7fe fb63 	bl	8000a7c <__aeabi_d2iz>
 80023b6:	4602      	mov	r2, r0
 80023b8:	4935      	ldr	r1, [pc, #212]	; (8002490 <_Flow+0x3a8>)
 80023ba:	1da3      	adds	r3, r4, #6
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		      Flow_Sensor_cal.total = Flow_Sensor_cal.total + Flow_Sensor_cal.readings[Flow_Sensor_cal.readIndex];
 80023c0:	4b33      	ldr	r3, [pc, #204]	; (8002490 <_Flow+0x3a8>)
 80023c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023c4:	4b32      	ldr	r3, [pc, #200]	; (8002490 <_Flow+0x3a8>)
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	4931      	ldr	r1, [pc, #196]	; (8002490 <_Flow+0x3a8>)
 80023ca:	3306      	adds	r3, #6
 80023cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a2f      	ldr	r2, [pc, #188]	; (8002490 <_Flow+0x3a8>)
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
		      Flow_Sensor_cal.readIndex = Flow_Sensor_cal.readIndex + 1;
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <_Flow+0x3a8>)
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	3301      	adds	r3, #1
 80023dc:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <_Flow+0x3a8>)
 80023de:	6553      	str	r3, [r2, #84]	; 0x54
			  if (Flow_Sensor_cal.readIndex >= numReadings)
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <_Flow+0x3a8>)
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	dc02      	bgt.n	80023f0 <_Flow+0x308>
			  {
				  Flow_Sensor_cal.readIndex = 0;
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <_Flow+0x3a8>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54
			  }
			  Flow_Sensor_cal.average = Flow_Sensor_cal.total / numReadings;
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <_Flow+0x3a8>)
 80023f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <_Flow+0x3a8>)
 80023fc:	65d3      	str	r3, [r2, #92]	; 0x5c
			  Flow_Sensor_cal.Flow1= Flow_Sensor_cal.average;
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <_Flow+0x3a8>)
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f836 	bl	8000474 <__aeabi_i2d>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4920      	ldr	r1, [pc, #128]	; (8002490 <_Flow+0x3a8>)
 800240e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if((Flow_Sensor_cal.Flow1<1.2)&&(Flow_Sensor_cal.Flow1>-1.2))
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <_Flow+0x3a8>)
 8002414:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002418:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <_Flow+0x3ac>)
 800241e:	f7fe fb05 	bl	8000a2c <__aeabi_dcmplt>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d011      	beq.n	800244c <_Flow+0x364>
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <_Flow+0x3a8>)
 800242a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800242e:	a316      	add	r3, pc, #88	; (adr r3, 8002488 <_Flow+0x3a0>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe fb18 	bl	8000a68 <__aeabi_dcmpgt>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <_Flow+0x364>
	    {
			Flow_Sensor_cal.Flow1=0;
 800243e:	4914      	ldr	r1, [pc, #80]	; (8002490 <_Flow+0x3a8>)
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}

		    Flow_Sensor_cal._Flow_Val=(int)Flow_Sensor_cal.Flow1;
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <_Flow+0x3a8>)
 800244e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fb11 	bl	8000a7c <__aeabi_d2iz>
 800245a:	4603      	mov	r3, r0
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <_Flow+0x3a8>)
 800245e:	6613      	str	r3, [r2, #96]	; 0x60


}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800246a:	bf00      	nop
 800246c:	f3af 8000 	nop.w
 8002470:	8793dd98 	.word	0x8793dd98
 8002474:	3fc35a85 	.word	0x3fc35a85
 8002478:	36113405 	.word	0x36113405
 800247c:	400abd3c 	.word	0x400abd3c
 8002480:	9374bc6a 	.word	0x9374bc6a
 8002484:	4044d418 	.word	0x4044d418
 8002488:	33333333 	.word	0x33333333
 800248c:	bff33333 	.word	0xbff33333
 8002490:	20004730 	.word	0x20004730
 8002494:	3ff33333 	.word	0x3ff33333

08002498 <Flow_Sensor_Value>:

void  Flow_Sensor_Value()
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	Get_AW_Flow();
 800249c:	f7ff fdc6 	bl	800202c <Get_AW_Flow>
	_Flow();
 80024a0:	f7ff fe22 	bl	80020e8 <_Flow>


}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <PC_SIMV_Task>:
 */

#include "Pc_SIMV.h"

void PC_SIMV_Task (void *argument)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

	while(1)
	{

		switch (_CurrentComputationState)
 80024b0:	4b6b      	ldr	r3, [pc, #428]	; (8002660 <PC_SIMV_Task+0x1b8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f000 80cc 	beq.w	8002652 <PC_SIMV_Task+0x1aa>
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f300 80cb 	bgt.w	8002656 <PC_SIMV_Task+0x1ae>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <PC_SIMV_Task+0x22>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d011      	beq.n	80024ec <PC_SIMV_Task+0x44>

				break;
				case NoComputeState:
				break;
				default:
				break;
 80024c8:	e0c5      	b.n	8002656 <PC_SIMV_Task+0x1ae>
					ExpValve_CLOSE();
 80024ca:	4b66      	ldr	r3, [pc, #408]	; (8002664 <PC_SIMV_Task+0x1bc>)
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <PC_SIMV_Task+0x1bc>)
 80024d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d4:	6153      	str	r3, [r2, #20]
					Blower_Signal( T4._DAC_VAL0);
 80024d6:	4b64      	ldr	r3, [pc, #400]	; (8002668 <PC_SIMV_Task+0x1c0>)
 80024d8:	889a      	ldrh	r2, [r3, #4]
 80024da:	4b64      	ldr	r3, [pc, #400]	; (800266c <PC_SIMV_Task+0x1c4>)
 80024dc:	609a      	str	r2, [r3, #8]
					S5.peep_process_done=0;
 80024de:	4b64      	ldr	r3, [pc, #400]	; (8002670 <PC_SIMV_Task+0x1c8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
					S5.lock=1;
 80024e4:	4b62      	ldr	r3, [pc, #392]	; (8002670 <PC_SIMV_Task+0x1c8>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80024ea:	e0b7      	b.n	800265c <PC_SIMV_Task+0x1b4>
					T4._DAC_VAL0=0;
 80024ec:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <PC_SIMV_Task+0x1c0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	809a      	strh	r2, [r3, #4]
					Blower_Signal( T4._DAC_VAL0);
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <PC_SIMV_Task+0x1c0>)
 80024f4:	889a      	ldrh	r2, [r3, #4]
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <PC_SIMV_Task+0x1c4>)
 80024f8:	609a      	str	r2, [r3, #8]
							if(S5.peep_process_done==1)
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <PC_SIMV_Task+0x1c8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d116      	bne.n	8002530 <PC_SIMV_Task+0x88>
									if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 8002502:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <PC_SIMV_Task+0x1cc>)
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	ee07 3a90 	vmov	s15, r3
 800250a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250e:	4b58      	ldr	r3, [pc, #352]	; (8002670 <PC_SIMV_Task+0x1c8>)
 8002510:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	d504      	bpl.n	8002528 <PC_SIMV_Task+0x80>
										Blower_Signal( T4._DAC_VAL0);
 800251e:	4b52      	ldr	r3, [pc, #328]	; (8002668 <PC_SIMV_Task+0x1c0>)
 8002520:	889a      	ldrh	r2, [r3, #4]
 8002522:	4b52      	ldr	r3, [pc, #328]	; (800266c <PC_SIMV_Task+0x1c4>)
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	e003      	b.n	8002530 <PC_SIMV_Task+0x88>
										Blower_Signal( T4._DAC_VAL0);
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <PC_SIMV_Task+0x1c0>)
 800252a:	889a      	ldrh	r2, [r3, #4]
 800252c:	4b4f      	ldr	r3, [pc, #316]	; (800266c <PC_SIMV_Task+0x1c4>)
 800252e:	609a      	str	r2, [r3, #8]
							if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 8002530:	4b50      	ldr	r3, [pc, #320]	; (8002674 <PC_SIMV_Task+0x1cc>)
 8002532:	791b      	ldrb	r3, [r3, #4]
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800253c:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <PC_SIMV_Task+0x1c8>)
 800253e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	d815      	bhi.n	8002578 <PC_SIMV_Task+0xd0>
								if(S5.lock==1)
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <PC_SIMV_Task+0x1c8>)
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d107      	bne.n	8002564 <PC_SIMV_Task+0xbc>
									S5.lock=0;
 8002554:	4b46      	ldr	r3, [pc, #280]	; (8002670 <PC_SIMV_Task+0x1c8>)
 8002556:	2200      	movs	r2, #0
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c
									vTaskDelay(S5.Lock_delay);
 800255a:	4b45      	ldr	r3, [pc, #276]	; (8002670 <PC_SIMV_Task+0x1c8>)
 800255c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800255e:	4618      	mov	r0, r3
 8002560:	f00a fd42 	bl	800cfe8 <vTaskDelay>
								S5.peep_process_done=1;
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <PC_SIMV_Task+0x1c8>)
 8002566:	2201      	movs	r2, #1
 8002568:	645a      	str	r2, [r3, #68]	; 0x44
								ExpValve_CLOSE();
 800256a:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <PC_SIMV_Task+0x1bc>)
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4a3d      	ldr	r2, [pc, #244]	; (8002664 <PC_SIMV_Task+0x1bc>)
 8002570:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002574:	6153      	str	r3, [r2, #20]
 8002576:	e009      	b.n	800258c <PC_SIMV_Task+0xe4>
							else if(S5.peep_process_done==0)
 8002578:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <PC_SIMV_Task+0x1c8>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <PC_SIMV_Task+0xe4>
								ExpValve_OPEN();
 8002580:	4b38      	ldr	r3, [pc, #224]	; (8002664 <PC_SIMV_Task+0x1bc>)
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	4a37      	ldr	r2, [pc, #220]	; (8002664 <PC_SIMV_Task+0x1bc>)
 8002586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800258a:	6153      	str	r3, [r2, #20]
										if(_E_TIMER <= (T5._TRIG_WINDOW) &&  _E_TIMER != 0)
 800258c:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <PC_SIMV_Task+0x1d0>)
 800258e:	895b      	ldrh	r3, [r3, #10]
 8002590:	461a      	mov	r2, r3
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <PC_SIMV_Task+0x1d4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d347      	bcc.n	800262a <PC_SIMV_Task+0x182>
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <PC_SIMV_Task+0x1d4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d043      	beq.n	800262a <PC_SIMV_Task+0x182>
											if(T5._TRIG_TYPE==1)
 80025a2:	4b35      	ldr	r3, [pc, #212]	; (8002678 <PC_SIMV_Task+0x1d0>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d12f      	bne.n	800260a <PC_SIMV_Task+0x162>
												if((Pressure_sensor._Pressure_Val>(T5.simv_trigger_offset+T5._TRIG_LMT))||(Pressure_sensor._Pressure_Val<(T5.simv_trigger_offset-T5._TRIG_LMT)))
 80025aa:	4b32      	ldr	r3, [pc, #200]	; (8002674 <PC_SIMV_Task+0x1cc>)
 80025ac:	791b      	ldrb	r3, [r3, #4]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <PC_SIMV_Task+0x1d0>)
 80025b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80025bc:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <PC_SIMV_Task+0x1d0>)
 80025be:	885b      	ldrh	r3, [r3, #2]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	dc16      	bgt.n	8002604 <PC_SIMV_Task+0x15c>
 80025d6:	4b27      	ldr	r3, [pc, #156]	; (8002674 <PC_SIMV_Task+0x1cc>)
 80025d8:	791b      	ldrb	r3, [r3, #4]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <PC_SIMV_Task+0x1d0>)
 80025e4:	edd3 6a03 	vldr	s13, [r3, #12]
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <PC_SIMV_Task+0x1d0>)
 80025ea:	885b      	ldrh	r3, [r3, #2]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002600:	d400      	bmi.n	8002604 <PC_SIMV_Task+0x15c>
											if(T5._TRIG_TYPE==1)
 8002602:	e024      	b.n	800264e <PC_SIMV_Task+0x1a6>
													Switch_TASK_I_CYCLE();
 8002604:	f000 f83e 	bl	8002684 <Switch_TASK_I_CYCLE>
											if(T5._TRIG_TYPE==1)
 8002608:	e021      	b.n	800264e <PC_SIMV_Task+0x1a6>
												if((Flow_Sensor_cal._Flow_Val>(T5._TRIG_LMT))||(Flow_Sensor_cal._Flow_Val<(T5._TRIG_LMT*-1)))
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <PC_SIMV_Task+0x1d8>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <PC_SIMV_Task+0x1d0>)
 8002610:	8852      	ldrh	r2, [r2, #2]
 8002612:	4293      	cmp	r3, r2
 8002614:	dc06      	bgt.n	8002624 <PC_SIMV_Task+0x17c>
 8002616:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <PC_SIMV_Task+0x1d8>)
 8002618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <PC_SIMV_Task+0x1d0>)
 800261c:	885b      	ldrh	r3, [r3, #2]
 800261e:	425b      	negs	r3, r3
 8002620:	429a      	cmp	r2, r3
 8002622:	da14      	bge.n	800264e <PC_SIMV_Task+0x1a6>
													Switch_TASK_I_CYCLE();
 8002624:	f000 f82e 	bl	8002684 <Switch_TASK_I_CYCLE>
											if(T5._TRIG_TYPE==1)
 8002628:	e011      	b.n	800264e <PC_SIMV_Task+0x1a6>
											if(T5._TRIG_TYPE==1)
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <PC_SIMV_Task+0x1d0>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d113      	bne.n	800265a <PC_SIMV_Task+0x1b2>
											  if(Flow_Sensor_cal._Flow_Val==0)
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <PC_SIMV_Task+0x1d8>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <PC_SIMV_Task+0x1b2>
												  T5.simv_trigger_offset=Pressure_sensor._Pressure_Val;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <PC_SIMV_Task+0x1cc>)
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <PC_SIMV_Task+0x1d0>)
 8002648:	edc3 7a03 	vstr	s15, [r3, #12]
				break;
 800264c:	e005      	b.n	800265a <PC_SIMV_Task+0x1b2>
											if(T5._TRIG_TYPE==1)
 800264e:	bf00      	nop
				break;
 8002650:	e003      	b.n	800265a <PC_SIMV_Task+0x1b2>
				break;
 8002652:	bf00      	nop
 8002654:	e72c      	b.n	80024b0 <PC_SIMV_Task+0x8>
				break;
 8002656:	bf00      	nop
 8002658:	e72a      	b.n	80024b0 <PC_SIMV_Task+0x8>
				break;
 800265a:	bf00      	nop
		switch (_CurrentComputationState)
 800265c:	e728      	b.n	80024b0 <PC_SIMV_Task+0x8>
 800265e:	bf00      	nop
 8002660:	20004798 	.word	0x20004798
 8002664:	40020400 	.word	0x40020400
 8002668:	200045cc 	.word	0x200045cc
 800266c:	40007400 	.word	0x40007400
 8002670:	200048fc 	.word	0x200048fc
 8002674:	200047ac 	.word	0x200047ac
 8002678:	20004618 	.word	0x20004618
 800267c:	20004848 	.word	0x20004848
 8002680:	20004730 	.word	0x20004730

08002684 <Switch_TASK_I_CYCLE>:


}

void Switch_TASK_I_CYCLE()
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af02      	add	r7, sp, #8

	vTaskDelete(One_Time_Handler);
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <Switch_TASK_I_CYCLE+0x40>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f00a fc1a 	bl	800cec8 <vTaskDelete>
	_I_TIMER = 0 ;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <Switch_TASK_I_CYCLE+0x44>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
	_E_TIMER = 0 ;
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <Switch_TASK_I_CYCLE+0x48>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
	_CurrentWaveFormState = Generate_I_Wave ;
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <Switch_TASK_I_CYCLE+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
	 xTaskCreate(One_Time_Task, "one-time-task", 256, NULL, 2, &One_Time_Handler);
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <Switch_TASK_I_CYCLE+0x40>)
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2302      	movs	r3, #2
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <Switch_TASK_I_CYCLE+0x50>)
 80026b6:	4808      	ldr	r0, [pc, #32]	; (80026d8 <Switch_TASK_I_CYCLE+0x54>)
 80026b8:	f00a facf 	bl	800cc5a <xTaskCreate>

}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200047e8 	.word	0x200047e8
 80026c8:	200048f8 	.word	0x200048f8
 80026cc:	20004848 	.word	0x20004848
 80026d0:	20004642 	.word	0x20004642
 80026d4:	0800ec88 	.word	0x0800ec88
 80026d8:	0800676d 	.word	0x0800676d

080026dc <PC_SIMV_Pulse_I_Parameter>:

void PC_SIMV_Pulse_I_Parameter()
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0



		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80026e0:	2201      	movs	r2, #1
 80026e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026e6:	482c      	ldr	r0, [pc, #176]	; (8002798 <PC_SIMV_Pulse_I_Parameter+0xbc>)
 80026e8:	f006 f940 	bl	800896c <HAL_GPIO_WritePin>
		_I_TIMER_ACHEIVED = 0;
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <PC_SIMV_Pulse_I_Parameter+0xc0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	801a      	strh	r2, [r3, #0]
		S5.peep_process_done = 0;
 80026f2:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <PC_SIMV_Pulse_I_Parameter+0xc4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44

			T4._DAC_VAL0 = T4.starting_DAC;
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002702:	ee17 3a90 	vmov	r3, s15
 8002706:	b29a      	uxth	r2, r3
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 800270a:	809a      	strh	r2, [r3, #4]
			T4.Last_DAC = T4._DAC_VAL0;
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 800270e:	889a      	ldrh	r2, [r3, #4]
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 8002712:	80da      	strh	r2, [r3, #6]
			T3.ok = 1;
 8002714:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <PC_SIMV_Pulse_I_Parameter+0xcc>)
 8002716:	2201      	movs	r2, #1
 8002718:	601a      	str	r2, [r3, #0]
			T3.cycle_done = 1;
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <PC_SIMV_Pulse_I_Parameter+0xcc>)
 800271c:	2201      	movs	r2, #1
 800271e:	605a      	str	r2, [r3, #4]
			T4.last_result1 = T4.result1;
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 8002726:	60d3      	str	r3, [r2, #12]
			DAC_Value_Correction_SIMV();
 8002728:	f000 f89a 	bl	8002860 <DAC_Value_Correction_SIMV>
			Ending_Dac_value_correction_SIMV();
 800272c:	f000 fb08 	bl	8002d40 <Ending_Dac_value_correction_SIMV>
			S5.P_Max = 0;
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <PC_SIMV_Pulse_I_Parameter+0xc4>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
			T3.Pip_Acheived_Flag = 0;
 8002736:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <PC_SIMV_Pulse_I_Parameter+0xcc>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
			S5.now_check = 0;
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <PC_SIMV_Pulse_I_Parameter+0xc4>)
 800273e:	2200      	movs	r2, #0
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
			S5.P_Min = 60;
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <PC_SIMV_Pulse_I_Parameter+0xc4>)
 8002744:	223c      	movs	r2, #60	; 0x3c
 8002746:	605a      	str	r2, [r3, #4]

		T3.cycle_done = 1;
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <PC_SIMV_Pulse_I_Parameter+0xcc>)
 800274a:	2201      	movs	r2, #1
 800274c:	605a      	str	r2, [r3, #4]
		Peep_Vale_Lock_delay_Pc_SIMV();
 800274e:	f000 fbc9 	bl	8002ee4 <Peep_Vale_Lock_delay_Pc_SIMV>
		vol.Volume = 0;
 8002752:	4b16      	ldr	r3, [pc, #88]	; (80027ac <PC_SIMV_Pulse_I_Parameter+0xd0>)
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	605a      	str	r2, [r3, #4]
		_Control_Byte &= (uint8_t) (~(0x80));
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <PC_SIMV_Pulse_I_Parameter+0xd4>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002762:	b2da      	uxtb	r2, r3
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <PC_SIMV_Pulse_I_Parameter+0xd4>)
 8002766:	701a      	strb	r2, [r3, #0]
		T4.ten_ms = 0;
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 800276a:	2200      	movs	r2, #0
 800276c:	831a      	strh	r2, [r3, #24]
		T4.Acheived_ten_ms = 0;
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <PC_SIMV_Pulse_I_Parameter+0xc8>)
 8002770:	2200      	movs	r2, #0
 8002772:	839a      	strh	r2, [r3, #28]
		_I_TIMER = T2._I_TIMER_HOLD;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <PC_SIMV_Pulse_I_Parameter+0xd8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <PC_SIMV_Pulse_I_Parameter+0xdc>)
 800277a:	6013      	str	r3, [r2, #0]
		_CurrentWaveFormState = Generate_E_Wave;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <PC_SIMV_Pulse_I_Parameter+0xe0>)
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_I_Wave ;
 8002782:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <PC_SIMV_Pulse_I_Parameter+0xe4>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
		vTaskDelay(T2._I_TIMER_HOLD);
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <PC_SIMV_Pulse_I_Parameter+0xd8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f00a fc2b 	bl	800cfe8 <vTaskDelay>
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40020400 	.word	0x40020400
 800279c:	20004658 	.word	0x20004658
 80027a0:	200048fc 	.word	0x200048fc
 80027a4:	200045cc 	.word	0x200045cc
 80027a8:	200046dc 	.word	0x200046dc
 80027ac:	2000482c 	.word	0x2000482c
 80027b0:	20004944 	.word	0x20004944
 80027b4:	20004548 	.word	0x20004548
 80027b8:	200048f8 	.word	0x200048f8
 80027bc:	20004642 	.word	0x20004642
 80027c0:	20004798 	.word	0x20004798

080027c4 <PC_SIMV_Pulse_E_Parameter>:



void PC_SIMV_Pulse_E_Parameter()
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	_E_TIMER = T2._E_TIMER_HOLD;
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <PC_SIMV_Pulse_E_Parameter+0x40>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4a0e      	ldr	r2, [pc, #56]	; (8002808 <PC_SIMV_Pulse_E_Parameter+0x44>)
 80027ce:	6013      	str	r3, [r2, #0]
	_E_TIMER_ACHEIVED = 0;
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <PC_SIMV_Pulse_E_Parameter+0x48>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	801a      	strh	r2, [r3, #0]
	S5.lock = 1;
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <PC_SIMV_Pulse_E_Parameter+0x4c>)
 80027d8:	2201      	movs	r2, #1
 80027da:	63da      	str	r2, [r3, #60]	; 0x3c
	_CurrentWaveFormState = Generate_I_Wave;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <PC_SIMV_Pulse_E_Parameter+0x50>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 80027e2:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <PC_SIMV_Pulse_E_Parameter+0x54>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
	_Control_Byte |= (uint8_t) 0x80;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <PC_SIMV_Pulse_E_Parameter+0x58>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <PC_SIMV_Pulse_E_Parameter+0x58>)
 80027f4:	701a      	strb	r2, [r3, #0]
	vTaskDelay(T2._E_TIMER_HOLD);
 80027f6:	4b03      	ldr	r3, [pc, #12]	; (8002804 <PC_SIMV_Pulse_E_Parameter+0x40>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f00a fbf4 	bl	800cfe8 <vTaskDelay>

}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20004548 	.word	0x20004548
 8002808:	20004848 	.word	0x20004848
 800280c:	20004964 	.word	0x20004964
 8002810:	200048fc 	.word	0x200048fc
 8002814:	20004642 	.word	0x20004642
 8002818:	20004798 	.word	0x20004798
 800281c:	20004944 	.word	0x20004944

08002820 <PC_SIMV_PID_Task>:


void PC_SIMV_PID_Task(void *argument)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

	while(1)
	{
		T4.ten_ms++;
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <PC_SIMV_PID_Task+0x34>)
 800282a:	8b1b      	ldrh	r3, [r3, #24]
 800282c:	3301      	adds	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <PC_SIMV_PID_Task+0x34>)
 8002832:	831a      	strh	r2, [r3, #24]
			if(S1._Mode_Val == 3)
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <PC_SIMV_PID_Task+0x38>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d105      	bne.n	8002848 <PC_SIMV_PID_Task+0x28>
			 {
				if(_CurrentComputationState==Compute_I_Wave)
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <PC_SIMV_PID_Task+0x3c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <PC_SIMV_PID_Task+0x28>
				{
					pip_value_correction_SIMV();
 8002844:	f000 f844 	bl	80028d0 <pip_value_correction_SIMV>
				}
			 }
		vTaskDelay(T4.PID_task_delay);
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <PC_SIMV_PID_Task+0x34>)
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	4618      	mov	r0, r3
 800284e:	f00a fbcb 	bl	800cfe8 <vTaskDelay>
		T4.ten_ms++;
 8002852:	e7e9      	b.n	8002828 <PC_SIMV_PID_Task+0x8>
 8002854:	200045cc 	.word	0x200045cc
 8002858:	20004644 	.word	0x20004644
 800285c:	20004798 	.word	0x20004798

08002860 <DAC_Value_Correction_SIMV>:

}


void DAC_Value_Correction_SIMV()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0



		 if(T4.Acheived_ms < (T2.ramp_time_percentage -40))
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <DAC_Value_Correction_SIMV+0x64>)
 8002866:	8b5b      	ldrh	r3, [r3, #26]
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002870:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <DAC_Value_Correction_SIMV+0x68>)
 8002872:	edd3 7a03 	vldr	s15, [r3, #12]
 8002876:	eddf 6a15 	vldr	s13, [pc, #84]	; 80028cc <DAC_Value_Correction_SIMV+0x6c>
 800287a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800287e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	d502      	bpl.n	800288e <DAC_Value_Correction_SIMV+0x2e>
	     {
			 Pip_Acheived_Early();
 8002888:	f001 f81e 	bl	80038c8 <Pip_Acheived_Early>
 800288c:	e016      	b.n	80028bc <DAC_Value_Correction_SIMV+0x5c>

	     }


	       else if(T4.Acheived_ms > (T2.ramp_time_percentage +40))
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <DAC_Value_Correction_SIMV+0x64>)
 8002890:	8b5b      	ldrh	r3, [r3, #26]
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <DAC_Value_Correction_SIMV+0x68>)
 800289c:	edd3 7a03 	vldr	s15, [r3, #12]
 80028a0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80028cc <DAC_Value_Correction_SIMV+0x6c>
 80028a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	dd02      	ble.n	80028b8 <DAC_Value_Correction_SIMV+0x58>
	       {
	    	   Pip_Acheived_Slowly();
 80028b2:	f001 f945 	bl	8003b40 <Pip_Acheived_Slowly>
 80028b6:	e001      	b.n	80028bc <DAC_Value_Correction_SIMV+0x5c>
	       }

	       else
	       {
	    	   Pip_Acheived_Normally();
 80028b8:	f001 fa02 	bl	8003cc0 <Pip_Acheived_Normally>

	       }

		     Pip_Not_Acheived();
 80028bc:	f001 fa0e 	bl	8003cdc <Pip_Not_Acheived>

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200045cc 	.word	0x200045cc
 80028c8:	20004548 	.word	0x20004548
 80028cc:	42200000 	.word	0x42200000

080028d0 <pip_value_correction_SIMV>:

void pip_value_correction_SIMV()
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	if (Pressure_sensor._Pressure_Val >= (T1._PIP_Val ))
 80028d4:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <pip_value_correction_SIMV+0xe8>)
 80028d6:	791a      	ldrb	r2, [r3, #4]
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <pip_value_correction_SIMV+0xec>)
 80028da:	789b      	ldrb	r3, [r3, #2]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d324      	bcc.n	800292a <pip_value_correction_SIMV+0x5a>
	{
		T3.cycle_done = 0;
 80028e0:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <pip_value_correction_SIMV+0xf0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028ec:	4835      	ldr	r0, [pc, #212]	; (80029c4 <pip_value_correction_SIMV+0xf4>)
 80028ee:	f006 f83d 	bl	800896c <HAL_GPIO_WritePin>
		if(T3.ok==1)
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <pip_value_correction_SIMV+0xf0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d117      	bne.n	800292a <pip_value_correction_SIMV+0x5a>
		{
			T4.Acheived_ten_ms = T4.ten_ms;
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 80028fc:	8b1a      	ldrh	r2, [r3, #24]
 80028fe:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002900:	839a      	strh	r2, [r3, #28]
			T4.Acheived_ms=(T4.Acheived_ten_ms*T4.PID_task_delay);
 8002902:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002904:	8b9a      	ldrh	r2, [r3, #28]
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	b29b      	uxth	r3, r3
 800290c:	fb12 f303 	smulbb	r3, r2, r3
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b2d      	ldr	r3, [pc, #180]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002914:	835a      	strh	r2, [r3, #26]
			T3.ok=0;
 8002916:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <pip_value_correction_SIMV+0xf0>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
			T3.Pip_Acheived_Flag=1;
 800291c:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <pip_value_correction_SIMV+0xf0>)
 800291e:	2201      	movs	r2, #1
 8002920:	609a      	str	r2, [r3, #8]
			T4._DAC_VAL0 = T4.Last_DAC;
 8002922:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002924:	88da      	ldrh	r2, [r3, #6]
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002928:	809a      	strh	r2, [r3, #4]
		}
	}
	if (T3.cycle_done == 1)
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <pip_value_correction_SIMV+0xf0>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d140      	bne.n	80029b4 <pip_value_correction_SIMV+0xe4>
	{
		if (T4.Last_DAC >= T4.Ending_Dac)
 8002932:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002934:	88db      	ldrh	r3, [r3, #6]
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002940:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	db0d      	blt.n	800296a <pip_value_correction_SIMV+0x9a>
		{
			T4.Last_DAC = T4.Ending_Dac;
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002950:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002958:	ee17 3a90 	vmov	r3, s15
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002960:	80da      	strh	r2, [r3, #6]
			T3.cycle_done = 0;
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <pip_value_correction_SIMV+0xf0>)
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
			T4.Last_DAC = T4._DAC_VAL0;
			T4._DAC_VAL0=T4.Last_DAC + (T4.incrementing_Dac_value_10ms );
		}
	}

}
 8002968:	e024      	b.n	80029b4 <pip_value_correction_SIMV+0xe4>
		else if (T4.Last_DAC < T4.Ending_Dac)
 800296a:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 800296c:	88db      	ldrh	r3, [r3, #6]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002978:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800297c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	d400      	bmi.n	8002988 <pip_value_correction_SIMV+0xb8>
}
 8002986:	e015      	b.n	80029b4 <pip_value_correction_SIMV+0xe4>
			T4.Last_DAC = T4._DAC_VAL0;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 800298a:	889a      	ldrh	r2, [r3, #4]
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 800298e:	80da      	strh	r2, [r3, #6]
			T4._DAC_VAL0=T4.Last_DAC + (T4.incrementing_Dac_value_10ms );
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 8002992:	88db      	ldrh	r3, [r3, #6]
 8002994:	ee07 3a90 	vmov	s15, r3
 8002998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 800299e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029aa:	ee17 3a90 	vmov	r3, s15
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <pip_value_correction_SIMV+0xf8>)
 80029b2:	809a      	strh	r2, [r3, #4]
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200047ac 	.word	0x200047ac
 80029bc:	200047bc 	.word	0x200047bc
 80029c0:	200046dc 	.word	0x200046dc
 80029c4:	40020400 	.word	0x40020400
 80029c8:	200045cc 	.word	0x200045cc
 80029cc:	00000000 	.word	0x00000000

080029d0 <PC_SIMV_PARAMETERS>:




void PC_SIMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]


			T1._PIP_Val = RX_PARAM_CMD_PACKET->_PIP;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	791a      	ldrb	r2, [r3, #4]
 80029dc:	4bb2      	ldr	r3, [pc, #712]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 80029de:	709a      	strb	r2, [r3, #2]
			T1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	795a      	ldrb	r2, [r3, #5]
 80029e4:	4bb0      	ldr	r3, [pc, #704]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 80029e6:	70da      	strb	r2, [r3, #3]
			T1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7a5b      	ldrb	r3, [r3, #9]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f64e 2360 	movw	r3, #60000	; 0xea60
 80029f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80029f6:	461a      	mov	r2, r3
 80029f8:	4bab      	ldr	r3, [pc, #684]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 80029fa:	605a      	str	r2, [r3, #4]
			T1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7a1b      	ldrb	r3, [r3, #8]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	4ba8      	ldr	r3, [pc, #672]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a08:	609a      	str	r2, [r3, #8]
			T1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	7a1b      	ldrb	r3, [r3, #8]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4aa5      	ldr	r2, [pc, #660]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a14:	60d3      	str	r3, [r2, #12]
			T1.RT_Value =(0xF0 & RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME)>>4;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7adb      	ldrb	r3, [r3, #11]
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4ba1      	ldr	r3, [pc, #644]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a22:	821a      	strh	r2, [r3, #16]
			T1.RR=RX_PARAM_CMD_PACKET->_RR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7a5a      	ldrb	r2, [r3, #9]
 8002a28:	4b9f      	ldr	r3, [pc, #636]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a2a:	749a      	strb	r2, [r3, #18]
			_FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7a9a      	ldrb	r2, [r3, #10]
 8002a30:	4b9e      	ldr	r3, [pc, #632]	; (8002cac <PC_SIMV_PARAMETERS+0x2dc>)
 8002a32:	701a      	strb	r2, [r3, #0]


			T5._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT) >> 4;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7b9b      	ldrb	r3, [r3, #14]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	4b9c      	ldr	r3, [pc, #624]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002a40:	801a      	strh	r2, [r3, #0]
			T5._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7b9b      	ldrb	r3, [r3, #14]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	4b98      	ldr	r3, [pc, #608]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002a50:	805a      	strh	r2, [r3, #2]
			T5._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	7adb      	ldrb	r3, [r3, #11]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	4b94      	ldr	r3, [pc, #592]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002a60:	809a      	strh	r2, [r3, #4]



			T2._I_TIMER_HOLD = (T1.I_Time * (T1.CycleTime / (T1.I_Time +T1.E_Time)));
 8002a62:	4b91      	ldr	r3, [pc, #580]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4a90      	ldr	r2, [pc, #576]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a68:	6851      	ldr	r1, [r2, #4]
 8002a6a:	4a8f      	ldr	r2, [pc, #572]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a6c:	6890      	ldr	r0, [r2, #8]
 8002a6e:	4a8e      	ldr	r2, [pc, #568]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a70:	68d2      	ldr	r2, [r2, #12]
 8002a72:	4402      	add	r2, r0
 8002a74:	fbb1 f2f2 	udiv	r2, r1, r2
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	4a8d      	ldr	r2, [pc, #564]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002a7e:	6013      	str	r3, [r2, #0]
			T2._E_TIMER_HOLD = (T1.E_Time * (T1.CycleTime / (T1.I_Time + T1.E_Time)));
 8002a80:	4b89      	ldr	r3, [pc, #548]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4a88      	ldr	r2, [pc, #544]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a86:	6851      	ldr	r1, [r2, #4]
 8002a88:	4a87      	ldr	r2, [pc, #540]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a8a:	6890      	ldr	r0, [r2, #8]
 8002a8c:	4a86      	ldr	r2, [pc, #536]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002a8e:	68d2      	ldr	r2, [r2, #12]
 8002a90:	4402      	add	r2, r0
 8002a92:	fbb1 f2f2 	udiv	r2, r1, r2
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	4a86      	ldr	r2, [pc, #536]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002a9c:	6053      	str	r3, [r2, #4]
			T2.ramp_time=(T1.RT_Value*10);
 8002a9e:	4b82      	ldr	r3, [pc, #520]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002aa0:	8a1b      	ldrh	r3, [r3, #16]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	0092      	lsls	r2, r2, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4b81      	ldr	r3, [pc, #516]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002aae:	811a      	strh	r2, [r3, #8]
			T2.ramp_time_percentage = ((float)T2.ramp_time/100.00)*(T2._I_TIMER_HOLD) ;
 8002ab0:	4b80      	ldr	r3, [pc, #512]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002ab2:	891b      	ldrh	r3, [r3, #8]
 8002ab4:	ee07 3a90 	vmov	s15, r3
 8002ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002abc:	ee17 0a90 	vmov	r0, s15
 8002ac0:	f7fd fcea 	bl	8000498 <__aeabi_f2d>
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	4b7b      	ldr	r3, [pc, #492]	; (8002cb8 <PC_SIMV_PARAMETERS+0x2e8>)
 8002aca:	f7fd fe67 	bl	800079c <__aeabi_ddiv>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	4b77      	ldr	r3, [pc, #476]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fcba 	bl	8000454 <__aeabi_ui2d>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	f7fd fd2e 	bl	8000548 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fe f80a 	bl	8000b0c <__aeabi_d2f>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a6e      	ldr	r2, [pc, #440]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002afc:	60d3      	str	r3, [r2, #12]
			T4.Ending_Dac=17.1129 * (T1._PIP_Val) + 587.7390+((1/70)*200);
 8002afe:	4b6a      	ldr	r3, [pc, #424]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002b00:	789b      	ldrb	r3, [r3, #2]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fcb6 	bl	8000474 <__aeabi_i2d>
 8002b08:	a361      	add	r3, pc, #388	; (adr r3, 8002c90 <PC_SIMV_PARAMETERS+0x2c0>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd fd1b 	bl	8000548 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	a35f      	add	r3, pc, #380	; (adr r3, 8002c98 <PC_SIMV_PARAMETERS+0x2c8>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fb5c 	bl	80001dc <__adddf3>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f7fd fb52 	bl	80001dc <__adddf3>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fd ffe4 	bl	8000b0c <__aeabi_d2f>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4a5d      	ldr	r2, [pc, #372]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002b48:	6293      	str	r3, [r2, #40]	; 0x28
			T4.incrementing_Dac_value_10ms=70;
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002b4c:	4a5c      	ldr	r2, [pc, #368]	; (8002cc0 <PC_SIMV_PARAMETERS+0x2f0>)
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c
			T4.Acheived_ms=(T2.ramp_time_percentage*2);
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5e:	ee17 3a90 	vmov	r3, s15
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b55      	ldr	r3, [pc, #340]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002b66:	835a      	strh	r2, [r3, #26]

			T5._CALC_TRIG_VAL = ((float) E_TIME_TOLERANCE / 100.00)* (T2._E_TIMER_HOLD);
 8002b68:	4b52      	ldr	r3, [pc, #328]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fc71 	bl	8000454 <__aeabi_ui2d>
 8002b72:	a34b      	add	r3, pc, #300	; (adr r3, 8002ca0 <PC_SIMV_PARAMETERS+0x2d0>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f7fd fce6 	bl	8000548 <__aeabi_dmul>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7fd ffa2 	bl	8000acc <__aeabi_d2uiz>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	4b48      	ldr	r3, [pc, #288]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002b8e:	80da      	strh	r2, [r3, #6]
			T5._TOLERANCE_EWAVE = T2._E_TIMER_HOLD - T5._CALC_TRIG_VAL;
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <PC_SIMV_PARAMETERS+0x2e4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002b98:	88db      	ldrh	r3, [r3, #6]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002ba0:	811a      	strh	r2, [r3, #8]
			T5._TRIG_WINDOW = T5._TOLERANCE_EWAVE* (((float) T5._TRIG_TIME * 10.00) / 100.00);
 8002ba2:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002ba4:	891b      	ldrh	r3, [r3, #8]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fc64 	bl	8000474 <__aeabi_i2d>
 8002bac:	4604      	mov	r4, r0
 8002bae:	460d      	mov	r5, r1
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002bb2:	889b      	ldrh	r3, [r3, #4]
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbc:	ee17 0a90 	vmov	r0, s15
 8002bc0:	f7fd fc6a 	bl	8000498 <__aeabi_f2d>
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <PC_SIMV_PARAMETERS+0x2f4>)
 8002bca:	f7fd fcbd 	bl	8000548 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <PC_SIMV_PARAMETERS+0x2e8>)
 8002bdc:	f7fd fdde 	bl	800079c <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4620      	mov	r0, r4
 8002be6:	4629      	mov	r1, r5
 8002be8:	f7fd fcae 	bl	8000548 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fd ff6a 	bl	8000acc <__aeabi_d2uiz>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <PC_SIMV_PARAMETERS+0x2e0>)
 8002bfe:	815a      	strh	r2, [r3, #10]

			T3.Pip_Acheived_Flag=0;
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <PC_SIMV_PARAMETERS+0x2f8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
			T4.nack=1;
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
			T4.PID_task_delay=10;
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002c0e:	220a      	movs	r2, #10
 8002c10:	635a      	str	r2, [r3, #52]	; 0x34
			T4.result1_error=0;
 8002c12:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	63da      	str	r2, [r3, #60]	; 0x3c
			T4.last_result1=0;
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	60da      	str	r2, [r3, #12]
			T4.PID_task_delay_lock=0;
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <PC_SIMV_PARAMETERS+0x2ec>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
			S5._Set_Peep=T1._PEEP_Val/2;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <PC_SIMV_PARAMETERS+0x2d8>)
 8002c28:	78db      	ldrb	r3, [r3, #3]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <PC_SIMV_PARAMETERS+0x2fc>)
 8002c38:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			vTaskSuspend(Vc_mode_Handler);
 8002c3c:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <PC_SIMV_PARAMETERS+0x300>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f00a fa05 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <PC_SIMV_PARAMETERS+0x304>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f00a fa00 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(pc_mode_Handler);
 8002c50:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <PC_SIMV_PARAMETERS+0x308>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00a f9fb 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <PC_SIMV_PARAMETERS+0x30c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f00a f9f6 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_simv_mode_Handler);
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <PC_SIMV_PARAMETERS+0x310>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f00a f9f1 	bl	800d050 <vTaskSuspend>
		    vTaskSuspend(Vc_cmv_simv_Pid_Handler);
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <PC_SIMV_PARAMETERS+0x314>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f00a f9ec 	bl	800d050 <vTaskSuspend>
		    vTaskSuspend(Psv_Handler);
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <PC_SIMV_PARAMETERS+0x318>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f00a f9e7 	bl	800d050 <vTaskSuspend>
		    vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <PC_SIMV_PARAMETERS+0x31c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f00a f9e2 	bl	800d050 <vTaskSuspend>
 8002c8c:	e030      	b.n	8002cf0 <PC_SIMV_PARAMETERS+0x320>
 8002c8e:	bf00      	nop
 8002c90:	03afb7e9 	.word	0x03afb7e9
 8002c94:	40311ce7 	.word	0x40311ce7
 8002c98:	78d4fdf4 	.word	0x78d4fdf4
 8002c9c:	40825de9 	.word	0x40825de9
 8002ca0:	33333333 	.word	0x33333333
 8002ca4:	3fd33333 	.word	0x3fd33333
 8002ca8:	200047bc 	.word	0x200047bc
 8002cac:	2000466d 	.word	0x2000466d
 8002cb0:	20004618 	.word	0x20004618
 8002cb4:	20004548 	.word	0x20004548
 8002cb8:	40590000 	.word	0x40590000
 8002cbc:	200045cc 	.word	0x200045cc
 8002cc0:	428c0000 	.word	0x428c0000
 8002cc4:	40240000 	.word	0x40240000
 8002cc8:	200046dc 	.word	0x200046dc
 8002ccc:	200048fc 	.word	0x200048fc
 8002cd0:	2000484c 	.word	0x2000484c
 8002cd4:	200045a8 	.word	0x200045a8
 8002cd8:	20004614 	.word	0x20004614
 8002cdc:	2000460c 	.word	0x2000460c
 8002ce0:	20004728 	.word	0x20004728
 8002ce4:	200048f4 	.word	0x200048f4
 8002ce8:	200046d8 	.word	0x200046d8
 8002cec:	200046d0 	.word	0x200046d0
		    vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <PC_SIMV_PARAMETERS+0x358>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f00a f9ab 	bl	800d050 <vTaskSuspend>
		    vTaskResume(Pc_simv_Mode_Handler);
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <PC_SIMV_PARAMETERS+0x35c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f00a fa6a 	bl	800d1d8 <vTaskResume>
			vTaskResume(Pc_simv_Mode_Pid_Handler);
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <PC_SIMV_PARAMETERS+0x360>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f00a fa65 	bl	800d1d8 <vTaskResume>

			_CurrentMode=SIMVPC;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <PC_SIMV_PARAMETERS+0x364>)
 8002d10:	2203      	movs	r2, #3
 8002d12:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <PC_SIMV_PARAMETERS+0x368>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <PC_SIMV_PARAMETERS+0x36c>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]




}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bdb0      	pop	{r4, r5, r7, pc}
 8002d28:	200047e4 	.word	0x200047e4
 8002d2c:	20004948 	.word	0x20004948
 8002d30:	20004960 	.word	0x20004960
 8002d34:	200046e8 	.word	0x200046e8
 8002d38:	20004642 	.word	0x20004642
 8002d3c:	20004798 	.word	0x20004798

08002d40 <Ending_Dac_value_correction_SIMV>:




void Ending_Dac_value_correction_SIMV()
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0

	if(T1.RR>=30 || T2.ramp_time>80 || (T1.E_Time>4))
 8002d44:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <Ending_Dac_value_correction_SIMV+0x184>)
 8002d46:	7c9b      	ldrb	r3, [r3, #18]
 8002d48:	2b1d      	cmp	r3, #29
 8002d4a:	d807      	bhi.n	8002d5c <Ending_Dac_value_correction_SIMV+0x1c>
 8002d4c:	4b5e      	ldr	r3, [pc, #376]	; (8002ec8 <Ending_Dac_value_correction_SIMV+0x188>)
 8002d4e:	891b      	ldrh	r3, [r3, #8]
 8002d50:	2b50      	cmp	r3, #80	; 0x50
 8002d52:	d803      	bhi.n	8002d5c <Ending_Dac_value_correction_SIMV+0x1c>
 8002d54:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <Ending_Dac_value_correction_SIMV+0x184>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d961      	bls.n	8002e20 <Ending_Dac_value_correction_SIMV+0xe0>
    {
		    if(S5.P_Max>(T1._PIP_Val))
 8002d5c:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <Ending_Dac_value_correction_SIMV+0x18c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <Ending_Dac_value_correction_SIMV+0x184>)
 8002d62:	7892      	ldrb	r2, [r2, #2]
 8002d64:	4293      	cmp	r3, r2
 8002d66:	dd28      	ble.n	8002dba <Ending_Dac_value_correction_SIMV+0x7a>
			{
		    	T4.pmax_error1++;
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d70:	6253      	str	r3, [r2, #36]	; 0x24
		    	T4.pmax_error2=0;
 8002d72:	4b57      	ldr	r3, [pc, #348]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
		    	if(T4.pmax_error1>2)
 8002d78:	4b55      	ldr	r3, [pc, #340]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	f340 809a 	ble.w	8002eb6 <Ending_Dac_value_correction_SIMV+0x176>
		    	{
		    	T4.Ending_Dac=T4.Ending_Dac-1;
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d90:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d92:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				T4.pmax_error1=0;
 8002d96:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
					if(T4.Ending_Dac<=500)
 8002d9c:	4b4c      	ldr	r3, [pc, #304]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002d9e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002da2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002ed4 <Ending_Dac_value_correction_SIMV+0x194>
 8002da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dae:	d900      	bls.n	8002db2 <Ending_Dac_value_correction_SIMV+0x72>
		    if(S5.P_Max>(T1._PIP_Val))
 8002db0:	e081      	b.n	8002eb6 <Ending_Dac_value_correction_SIMV+0x176>
						T4.Ending_Dac=500;
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002db4:	4a48      	ldr	r2, [pc, #288]	; (8002ed8 <Ending_Dac_value_correction_SIMV+0x198>)
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(T1._PIP_Val))
 8002db8:	e07d      	b.n	8002eb6 <Ending_Dac_value_correction_SIMV+0x176>
		    	}
			}
			else if(S5.P_Max<(T1._PIP_Val))
 8002dba:	4b44      	ldr	r3, [pc, #272]	; (8002ecc <Ending_Dac_value_correction_SIMV+0x18c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a41      	ldr	r2, [pc, #260]	; (8002ec4 <Ending_Dac_value_correction_SIMV+0x184>)
 8002dc0:	7892      	ldrb	r2, [r2, #2]
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	da27      	bge.n	8002e16 <Ending_Dac_value_correction_SIMV+0xd6>
			{
				T4.pmax_error2++;
 8002dc6:	4b42      	ldr	r3, [pc, #264]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	4a40      	ldr	r2, [pc, #256]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002dce:	6213      	str	r3, [r2, #32]
				T4.pmax_error1=0;
 8002dd0:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
				if(T4.pmax_error2>2)
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	dd6b      	ble.n	8002eb6 <Ending_Dac_value_correction_SIMV+0x176>
				{
				T4.Ending_Dac=T4.Ending_Dac+1;
 8002dde:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002de0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002de8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dec:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002dee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				T4.pmax_error2=0;
 8002df2:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	621a      	str	r2, [r3, #32]
				if(T4.Ending_Dac>=4095)
 8002df8:	4b35      	ldr	r3, [pc, #212]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002dfa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dfe:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002edc <Ending_Dac_value_correction_SIMV+0x19c>
 8002e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	da00      	bge.n	8002e0e <Ending_Dac_value_correction_SIMV+0xce>
		    if(S5.P_Max>(T1._PIP_Val))
 8002e0c:	e053      	b.n	8002eb6 <Ending_Dac_value_correction_SIMV+0x176>
					 T4.Ending_Dac=4095;
 8002e0e:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e10:	4a33      	ldr	r2, [pc, #204]	; (8002ee0 <Ending_Dac_value_correction_SIMV+0x1a0>)
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(T1._PIP_Val))
 8002e14:	e04f      	b.n	8002eb6 <Ending_Dac_value_correction_SIMV+0x176>
				}
			}
			else
			{
				T4.Ending_Dac=T4.Ending_Dac;
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	4a2d      	ldr	r2, [pc, #180]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e1c:	6293      	str	r3, [r2, #40]	; 0x28
		    if(S5.P_Max>(T1._PIP_Val))
 8002e1e:	e04a      	b.n	8002eb6 <Ending_Dac_value_correction_SIMV+0x176>
			}
    }

 else if(T1.RR<30 || T2.ramp_time<=80)
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <Ending_Dac_value_correction_SIMV+0x184>)
 8002e22:	7c9b      	ldrb	r3, [r3, #18]
 8002e24:	2b1d      	cmp	r3, #29
 8002e26:	d903      	bls.n	8002e30 <Ending_Dac_value_correction_SIMV+0xf0>
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <Ending_Dac_value_correction_SIMV+0x188>)
 8002e2a:	891b      	ldrh	r3, [r3, #8]
 8002e2c:	2b50      	cmp	r3, #80	; 0x50
 8002e2e:	d843      	bhi.n	8002eb8 <Ending_Dac_value_correction_SIMV+0x178>
 {
	if(S5._Pip_Avg_val_int>T1._PIP_Val)
 8002e30:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <Ending_Dac_value_correction_SIMV+0x18c>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <Ending_Dac_value_correction_SIMV+0x184>)
 8002e36:	7892      	ldrb	r2, [r2, #2]
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	dd18      	ble.n	8002e6e <Ending_Dac_value_correction_SIMV+0x12e>
	{
		T4.Ending_Dac=T4.Ending_Dac-5;
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e42:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e4a:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(T4.Ending_Dac<=500)
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002ed4 <Ending_Dac_value_correction_SIMV+0x194>
 8002e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	d900      	bls.n	8002e66 <Ending_Dac_value_correction_SIMV+0x126>
	{
		T4.Ending_Dac=T4.Ending_Dac;

	}
 }
}
 8002e64:	e028      	b.n	8002eb8 <Ending_Dac_value_correction_SIMV+0x178>
			T4.Ending_Dac=500;
 8002e66:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e68:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <Ending_Dac_value_correction_SIMV+0x198>)
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e6c:	e024      	b.n	8002eb8 <Ending_Dac_value_correction_SIMV+0x178>
	else if(S5._Pip_Avg_val_int<T1._PIP_Val)
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <Ending_Dac_value_correction_SIMV+0x18c>)
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <Ending_Dac_value_correction_SIMV+0x184>)
 8002e74:	7892      	ldrb	r2, [r2, #2]
 8002e76:	4293      	cmp	r3, r2
 8002e78:	da18      	bge.n	8002eac <Ending_Dac_value_correction_SIMV+0x16c>
		T4.Ending_Dac=T4.Ending_Dac+5;
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e7c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e80:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e88:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e8a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(T4.Ending_Dac>=4095)
 8002e8e:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002e90:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e94:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002edc <Ending_Dac_value_correction_SIMV+0x19c>
 8002e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	da00      	bge.n	8002ea4 <Ending_Dac_value_correction_SIMV+0x164>
}
 8002ea2:	e009      	b.n	8002eb8 <Ending_Dac_value_correction_SIMV+0x178>
			T4.Ending_Dac=4095;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002ea6:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <Ending_Dac_value_correction_SIMV+0x1a0>)
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eaa:	e005      	b.n	8002eb8 <Ending_Dac_value_correction_SIMV+0x178>
		T4.Ending_Dac=T4.Ending_Dac;
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <Ending_Dac_value_correction_SIMV+0x190>)
 8002eb2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002eb4:	e000      	b.n	8002eb8 <Ending_Dac_value_correction_SIMV+0x178>
		    if(S5.P_Max>(T1._PIP_Val))
 8002eb6:	bf00      	nop
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200047bc 	.word	0x200047bc
 8002ec8:	20004548 	.word	0x20004548
 8002ecc:	200048fc 	.word	0x200048fc
 8002ed0:	200045cc 	.word	0x200045cc
 8002ed4:	43fa0000 	.word	0x43fa0000
 8002ed8:	43fa0000 	.word	0x43fa0000
 8002edc:	457ff000 	.word	0x457ff000
 8002ee0:	457ff000 	.word	0x457ff000

08002ee4 <Peep_Vale_Lock_delay_Pc_SIMV>:




void Peep_Vale_Lock_delay_Pc_SIMV()
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8002ee8:	4b68      	ldr	r3, [pc, #416]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002eea:	edd3 6a02 	vldr	s13, [r3, #8]
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002ef0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef8:	4b64      	ldr	r3, [pc, #400]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002efa:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f00:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f08:	ee17 2a90 	vmov	r2, s15
 8002f0c:	4b5f      	ldr	r3, [pc, #380]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
		S5._Pip_Avg_count = 0;
 8002f10:	4b5e      	ldr	r3, [pc, #376]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8002f18:	4b5c      	ldr	r3, [pc, #368]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f22:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f26:	4b59      	ldr	r3, [pc, #356]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f28:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f30:	4b56      	ldr	r3, [pc, #344]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f32:	edc3 7a07 	vstr	s15, [r3, #28]
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8002f36:	4b55      	ldr	r3, [pc, #340]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f38:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f40:	ee17 2a90 	vmov	r2, s15
 8002f44:	4b51      	ldr	r3, [pc, #324]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f46:	621a      	str	r2, [r3, #32]

		if (T1.RR >= 30 || T2._E_TIMER_HOLD < 500)
 8002f48:	4b51      	ldr	r3, [pc, #324]	; (8003090 <Peep_Vale_Lock_delay_Pc_SIMV+0x1ac>)
 8002f4a:	7c9b      	ldrb	r3, [r3, #18]
 8002f4c:	2b1d      	cmp	r3, #29
 8002f4e:	d804      	bhi.n	8002f5a <Peep_Vale_Lock_delay_Pc_SIMV+0x76>
 8002f50:	4b50      	ldr	r3, [pc, #320]	; (8003094 <Peep_Vale_Lock_delay_Pc_SIMV+0x1b0>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f58:	d203      	bcs.n	8002f62 <Peep_Vale_Lock_delay_Pc_SIMV+0x7e>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 8002f5a:	4b4c      	ldr	r3, [pc, #304]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	4a4b      	ldr	r2, [pc, #300]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f60:	6213      	str	r3, [r2, #32]
		}

		if (S5._Peep_Avg_val_int > (T1._PEEP_Val + 1))
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f64:	6a1a      	ldr	r2, [r3, #32]
 8002f66:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <Peep_Vale_Lock_delay_Pc_SIMV+0x1ac>)
 8002f68:	78db      	ldrb	r3, [r3, #3]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	dd32      	ble.n	8002fd6 <Peep_Vale_Lock_delay_Pc_SIMV+0xf2>
		{
			S5._Set_Peep = S5._Set_Peep - 0.5f;
 8002f70:	4b46      	ldr	r3, [pc, #280]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f72:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f7e:	4b43      	ldr	r3, [pc, #268]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f80:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			S5.error_count++;
 8002f84:	4b41      	ldr	r3, [pc, #260]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4a40      	ldr	r2, [pc, #256]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f8c:	6293      	str	r3, [r2, #40]	; 0x28
			if (S5.error_count > 0)
 8002f8e:	4b3f      	ldr	r3, [pc, #252]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	dd11      	ble.n	8002fba <Peep_Vale_Lock_delay_Pc_SIMV+0xd6>
			{
				S5.Lock_delay = S5.Lock_delay + 10;
 8002f96:	4b3d      	ldr	r3, [pc, #244]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002f98:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002f9a:	330a      	adds	r3, #10
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002fa0:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay > 500)
 8002fa8:	4b38      	ldr	r3, [pc, #224]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002faa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002fac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fb0:	d903      	bls.n	8002fba <Peep_Vale_Lock_delay_Pc_SIMV+0xd6>
					S5.Lock_delay = 500;
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002fb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fb8:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep <= 3)
 8002fba:	4b34      	ldr	r3, [pc, #208]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002fbc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002fc0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	d851      	bhi.n	8003072 <Peep_Vale_Lock_delay_Pc_SIMV+0x18e>
			{
				S5._Set_Peep = 3;
 8002fce:	4b2f      	ldr	r3, [pc, #188]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002fd0:	4a31      	ldr	r2, [pc, #196]	; (8003098 <Peep_Vale_Lock_delay_Pc_SIMV+0x1b4>)
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd4:	e04d      	b.n	8003072 <Peep_Vale_Lock_delay_Pc_SIMV+0x18e>
			}
		}
		else if (S5._Peep_Avg_val_int < (T1._PEEP_Val - 1))
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <Peep_Vale_Lock_delay_Pc_SIMV+0x1ac>)
 8002fdc:	78db      	ldrb	r3, [r3, #3]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	da42      	bge.n	800306a <Peep_Vale_Lock_delay_Pc_SIMV+0x186>
		{
			S5._Set_Peep = S5._Set_Peep + 0.5f;
 8002fe4:	4b29      	ldr	r3, [pc, #164]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002fe6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002fea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002ff4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			S5.error_count2++;
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	4a23      	ldr	r2, [pc, #140]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003000:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (S5.error_count2 > 0)
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	2b00      	cmp	r3, #0
 8003008:	dd14      	ble.n	8003034 <Peep_Vale_Lock_delay_Pc_SIMV+0x150>
			{
				S5.Lock_delay = S5.Lock_delay - 10;
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 800300c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800300e:	3b0a      	subs	r3, #10
 8003010:	b29a      	uxth	r2, r3
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003014:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8003016:	4b1d      	ldr	r3, [pc, #116]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003018:	2200      	movs	r2, #0
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay < 1 || S5.Lock_delay > 500)
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 800301e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <Peep_Vale_Lock_delay_Pc_SIMV+0x14a>
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003026:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003028:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800302c:	d902      	bls.n	8003034 <Peep_Vale_Lock_delay_Pc_SIMV+0x150>
					S5.Lock_delay = 1;
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003030:	2201      	movs	r2, #1
 8003032:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep > T1._PEEP_Val + 2)
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003036:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <Peep_Vale_Lock_delay_Pc_SIMV+0x1ac>)
 800303c:	78db      	ldrb	r3, [r3, #3]
 800303e:	3302      	adds	r3, #2
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	dd0f      	ble.n	8003072 <Peep_Vale_Lock_delay_Pc_SIMV+0x18e>
			{
				S5._Set_Peep = T1._PEEP_Val / 2;
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <Peep_Vale_Lock_delay_Pc_SIMV+0x1ac>)
 8003054:	78db      	ldrb	r3, [r3, #3]
 8003056:	085b      	lsrs	r3, r3, #1
 8003058:	b2db      	uxtb	r3, r3
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003064:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8003068:	e003      	b.n	8003072 <Peep_Vale_Lock_delay_Pc_SIMV+0x18e>
			}
		}
		else
		{
			S5._Set_Peep = S5._Set_Peep;
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
		}
		S5._Peep_Avg_count = 0;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	619a      	str	r2, [r3, #24]
		S5._Peep_Avg = 0;
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <Peep_Vale_Lock_delay_Pc_SIMV+0x1a8>)
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	615a      	str	r2, [r3, #20]
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	200048fc 	.word	0x200048fc
 8003090:	200047bc 	.word	0x200047bc
 8003094:	20004548 	.word	0x20004548
 8003098:	40400000 	.word	0x40400000

0800309c <PC_CMV_Task>:
#include "Pc_cmv.h"



void PC_CMV_Task (void *argument)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

	while(1)
	{

		switch (_CurrentComputationState)
 80030a4:	4b39      	ldr	r3, [pc, #228]	; (800318c <PC_CMV_Task+0xf0>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d068      	beq.n	800317e <PC_CMV_Task+0xe2>
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	dc68      	bgt.n	8003182 <PC_CMV_Task+0xe6>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <PC_CMV_Task+0x1e>
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d011      	beq.n	80030dc <PC_CMV_Task+0x40>
							}
				break;
				case NoComputeState:
				break;
				default:
				break;
 80030b8:	e063      	b.n	8003182 <PC_CMV_Task+0xe6>
					ExpValve_CLOSE();
 80030ba:	4b35      	ldr	r3, [pc, #212]	; (8003190 <PC_CMV_Task+0xf4>)
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <PC_CMV_Task+0xf4>)
 80030c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030c4:	6153      	str	r3, [r2, #20]
					Blower_Signal( S4._DAC_VAL0);
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <PC_CMV_Task+0xf8>)
 80030c8:	889a      	ldrh	r2, [r3, #4]
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <PC_CMV_Task+0xfc>)
 80030cc:	609a      	str	r2, [r3, #8]
					S5.peep_process_done=0;
 80030ce:	4b33      	ldr	r3, [pc, #204]	; (800319c <PC_CMV_Task+0x100>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	645a      	str	r2, [r3, #68]	; 0x44
					S5.lock=1;
 80030d4:	4b31      	ldr	r3, [pc, #196]	; (800319c <PC_CMV_Task+0x100>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 80030da:	e055      	b.n	8003188 <PC_CMV_Task+0xec>
					S4._DAC_VAL0=0;
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <PC_CMV_Task+0xf8>)
 80030de:	2200      	movs	r2, #0
 80030e0:	809a      	strh	r2, [r3, #4]
					Blower_Signal( S4._DAC_VAL0);
 80030e2:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <PC_CMV_Task+0xf8>)
 80030e4:	889a      	ldrh	r2, [r3, #4]
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <PC_CMV_Task+0xfc>)
 80030e8:	609a      	str	r2, [r3, #8]
							if(S5.peep_process_done==1)
 80030ea:	4b2c      	ldr	r3, [pc, #176]	; (800319c <PC_CMV_Task+0x100>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d116      	bne.n	8003120 <PC_CMV_Task+0x84>
									if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <PC_CMV_Task+0x104>)
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <PC_CMV_Task+0x100>)
 8003100:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310c:	d504      	bpl.n	8003118 <PC_CMV_Task+0x7c>
										Blower_Signal( S4._DAC_VAL0);
 800310e:	4b21      	ldr	r3, [pc, #132]	; (8003194 <PC_CMV_Task+0xf8>)
 8003110:	889a      	ldrh	r2, [r3, #4]
 8003112:	4b21      	ldr	r3, [pc, #132]	; (8003198 <PC_CMV_Task+0xfc>)
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	e003      	b.n	8003120 <PC_CMV_Task+0x84>
										Blower_Signal( S4._DAC_VAL0);
 8003118:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <PC_CMV_Task+0xf8>)
 800311a:	889a      	ldrh	r2, [r3, #4]
 800311c:	4b1e      	ldr	r3, [pc, #120]	; (8003198 <PC_CMV_Task+0xfc>)
 800311e:	609a      	str	r2, [r3, #8]
							if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <PC_CMV_Task+0x104>)
 8003122:	791b      	ldrb	r3, [r3, #4]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <PC_CMV_Task+0x100>)
 800312e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313a:	d815      	bhi.n	8003168 <PC_CMV_Task+0xcc>
								if(S5.lock==1)
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <PC_CMV_Task+0x100>)
 800313e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <PC_CMV_Task+0xb8>
									S5.lock=0;
 8003144:	4b15      	ldr	r3, [pc, #84]	; (800319c <PC_CMV_Task+0x100>)
 8003146:	2200      	movs	r2, #0
 8003148:	63da      	str	r2, [r3, #60]	; 0x3c
									vTaskDelay(S5.Lock_delay);
 800314a:	4b14      	ldr	r3, [pc, #80]	; (800319c <PC_CMV_Task+0x100>)
 800314c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800314e:	4618      	mov	r0, r3
 8003150:	f009 ff4a 	bl	800cfe8 <vTaskDelay>
								S5.peep_process_done=1;
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <PC_CMV_Task+0x100>)
 8003156:	2201      	movs	r2, #1
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
								ExpValve_CLOSE();
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <PC_CMV_Task+0xf4>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <PC_CMV_Task+0xf4>)
 8003160:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003164:	6153      	str	r3, [r2, #20]
				break;
 8003166:	e00e      	b.n	8003186 <PC_CMV_Task+0xea>
							else if(S5.peep_process_done==0)
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <PC_CMV_Task+0x100>)
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <PC_CMV_Task+0xea>
								ExpValve_OPEN();
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <PC_CMV_Task+0xf4>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <PC_CMV_Task+0xf4>)
 8003176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800317a:	6153      	str	r3, [r2, #20]
				break;
 800317c:	e003      	b.n	8003186 <PC_CMV_Task+0xea>
				break;
 800317e:	bf00      	nop
 8003180:	e790      	b.n	80030a4 <PC_CMV_Task+0x8>
				break;
 8003182:	bf00      	nop
 8003184:	e78e      	b.n	80030a4 <PC_CMV_Task+0x8>
				break;
 8003186:	bf00      	nop
		switch (_CurrentComputationState)
 8003188:	e78c      	b.n	80030a4 <PC_CMV_Task+0x8>
 800318a:	bf00      	nop
 800318c:	20004798 	.word	0x20004798
 8003190:	40020400 	.word	0x40020400
 8003194:	200047ec 	.word	0x200047ec
 8003198:	40007400 	.word	0x40007400
 800319c:	200048fc 	.word	0x200048fc
 80031a0:	200047ac 	.word	0x200047ac

080031a4 <PC_CMV_Pulse_I_Parameter>:
}



void PC_CMV_Pulse_I_Parameter()
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0



		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80031a8:	2201      	movs	r2, #1
 80031aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031ae:	4829      	ldr	r0, [pc, #164]	; (8003254 <PC_CMV_Pulse_I_Parameter+0xb0>)
 80031b0:	f005 fbdc 	bl	800896c <HAL_GPIO_WritePin>
		_I_TIMER_ACHEIVED = 0;
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <PC_CMV_Pulse_I_Parameter+0xb4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	801a      	strh	r2, [r3, #0]
		S5.peep_process_done = 0;
 80031ba:	4b28      	ldr	r3, [pc, #160]	; (800325c <PC_CMV_Pulse_I_Parameter+0xb8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	645a      	str	r2, [r3, #68]	; 0x44
		    //S4.starting_DAC=400;
			//S4._DAC_VAL0 = S4.starting_DAC;
		    S4._DAC_VAL0 = 400;
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <PC_CMV_Pulse_I_Parameter+0xbc>)
 80031c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80031c6:	809a      	strh	r2, [r3, #4]
			S4.Last_DAC = S4._DAC_VAL0;
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <PC_CMV_Pulse_I_Parameter+0xbc>)
 80031ca:	889a      	ldrh	r2, [r3, #4]
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <PC_CMV_Pulse_I_Parameter+0xbc>)
 80031ce:	80da      	strh	r2, [r3, #6]
			S3.ok = 1;
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <PC_CMV_Pulse_I_Parameter+0xc0>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
			S3.cycle_done = 1;
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <PC_CMV_Pulse_I_Parameter+0xc0>)
 80031d8:	2201      	movs	r2, #1
 80031da:	605a      	str	r2, [r3, #4]
			S4.last_result1 = S4.result1;
 80031dc:	4b20      	ldr	r3, [pc, #128]	; (8003260 <PC_CMV_Pulse_I_Parameter+0xbc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <PC_CMV_Pulse_I_Parameter+0xbc>)
 80031e2:	60d3      	str	r3, [r2, #12]
			DAC_Value_Correction();
 80031e4:	f000 f94c 	bl	8003480 <DAC_Value_Correction>
			Ending_Dac_value_correction();
 80031e8:	f000 f878 	bl	80032dc <Ending_Dac_value_correction>
			S5.P_Max = 0;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <PC_CMV_Pulse_I_Parameter+0xb8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
			S3.Pip_Acheived_Flag = 0;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <PC_CMV_Pulse_I_Parameter+0xc0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
			S5.now_check = 0;
 80031f8:	4b18      	ldr	r3, [pc, #96]	; (800325c <PC_CMV_Pulse_I_Parameter+0xb8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
			S5.P_Min = 60;
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <PC_CMV_Pulse_I_Parameter+0xb8>)
 8003200:	223c      	movs	r2, #60	; 0x3c
 8003202:	605a      	str	r2, [r3, #4]

		S3.cycle_done = 1;
 8003204:	4b17      	ldr	r3, [pc, #92]	; (8003264 <PC_CMV_Pulse_I_Parameter+0xc0>)
 8003206:	2201      	movs	r2, #1
 8003208:	605a      	str	r2, [r3, #4]
		Peep_Vale_Lock_delay_Pc_cmv();
 800320a:	f000 fd95 	bl	8003d38 <Peep_Vale_Lock_delay_Pc_cmv>
		vol.Volume = 0;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <PC_CMV_Pulse_I_Parameter+0xc4>)
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	605a      	str	r2, [r3, #4]
		_Control_Byte &= (uint8_t) (~(0x80));
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <PC_CMV_Pulse_I_Parameter+0xc8>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <PC_CMV_Pulse_I_Parameter+0xc8>)
 8003222:	701a      	strb	r2, [r3, #0]
		S4.ten_ms = 0;
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <PC_CMV_Pulse_I_Parameter+0xbc>)
 8003226:	2200      	movs	r2, #0
 8003228:	831a      	strh	r2, [r3, #24]
		S4.Acheived_ten_ms = 0;
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <PC_CMV_Pulse_I_Parameter+0xbc>)
 800322c:	2200      	movs	r2, #0
 800322e:	839a      	strh	r2, [r3, #28]
		_I_TIMER = S2._I_TIMER_HOLD;
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <PC_CMV_Pulse_I_Parameter+0xcc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <PC_CMV_Pulse_I_Parameter+0xd0>)
 8003236:	6013      	str	r3, [r2, #0]
		_CurrentWaveFormState = Generate_E_Wave;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <PC_CMV_Pulse_I_Parameter+0xd4>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
		_CurrentComputationState = Compute_I_Wave ;
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <PC_CMV_Pulse_I_Parameter+0xd8>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
		vTaskDelay(S2._I_TIMER_HOLD);
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <PC_CMV_Pulse_I_Parameter+0xcc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f009 fecd 	bl	800cfe8 <vTaskDelay>
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40020400 	.word	0x40020400
 8003258:	20004658 	.word	0x20004658
 800325c:	200048fc 	.word	0x200048fc
 8003260:	200047ec 	.word	0x200047ec
 8003264:	2000453c 	.word	0x2000453c
 8003268:	2000482c 	.word	0x2000482c
 800326c:	20004944 	.word	0x20004944
 8003270:	20004838 	.word	0x20004838
 8003274:	200048f8 	.word	0x200048f8
 8003278:	20004642 	.word	0x20004642
 800327c:	20004798 	.word	0x20004798

08003280 <PC_CMV_Pulse_E_Parameter>:



void PC_CMV_Pulse_E_Parameter()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	_E_TIMER = S2._E_TIMER_HOLD;
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <PC_CMV_Pulse_E_Parameter+0x40>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <PC_CMV_Pulse_E_Parameter+0x44>)
 800328a:	6013      	str	r3, [r2, #0]
	_E_TIMER_ACHEIVED = 0;
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <PC_CMV_Pulse_E_Parameter+0x48>)
 800328e:	2200      	movs	r2, #0
 8003290:	801a      	strh	r2, [r3, #0]
	S5.lock = 1;
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <PC_CMV_Pulse_E_Parameter+0x4c>)
 8003294:	2201      	movs	r2, #1
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
	_CurrentWaveFormState = Generate_I_Wave;
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <PC_CMV_Pulse_E_Parameter+0x50>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <PC_CMV_Pulse_E_Parameter+0x54>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
	_Control_Byte |= (uint8_t) 0x80;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <PC_CMV_Pulse_E_Parameter+0x58>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <PC_CMV_Pulse_E_Parameter+0x58>)
 80032b0:	701a      	strb	r2, [r3, #0]
	vTaskDelay(S2._E_TIMER_HOLD);
 80032b2:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <PC_CMV_Pulse_E_Parameter+0x40>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f009 fe96 	bl	800cfe8 <vTaskDelay>

}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20004838 	.word	0x20004838
 80032c4:	20004848 	.word	0x20004848
 80032c8:	20004964 	.word	0x20004964
 80032cc:	200048fc 	.word	0x200048fc
 80032d0:	20004642 	.word	0x20004642
 80032d4:	20004798 	.word	0x20004798
 80032d8:	20004944 	.word	0x20004944

080032dc <Ending_Dac_value_correction>:



void Ending_Dac_value_correction()
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

	if(S1.RR>=30 || S2.ramp_time>80 || (S1.E_Time>4))
 80032e0:	4b5f      	ldr	r3, [pc, #380]	; (8003460 <Ending_Dac_value_correction+0x184>)
 80032e2:	7c9b      	ldrb	r3, [r3, #18]
 80032e4:	2b1d      	cmp	r3, #29
 80032e6:	d807      	bhi.n	80032f8 <Ending_Dac_value_correction+0x1c>
 80032e8:	4b5e      	ldr	r3, [pc, #376]	; (8003464 <Ending_Dac_value_correction+0x188>)
 80032ea:	891b      	ldrh	r3, [r3, #8]
 80032ec:	2b50      	cmp	r3, #80	; 0x50
 80032ee:	d803      	bhi.n	80032f8 <Ending_Dac_value_correction+0x1c>
 80032f0:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <Ending_Dac_value_correction+0x184>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d961      	bls.n	80033bc <Ending_Dac_value_correction+0xe0>
    {
		    if(S5.P_Max>(S1._PIP_Val))
 80032f8:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <Ending_Dac_value_correction+0x18c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a58      	ldr	r2, [pc, #352]	; (8003460 <Ending_Dac_value_correction+0x184>)
 80032fe:	7892      	ldrb	r2, [r2, #2]
 8003300:	4293      	cmp	r3, r2
 8003302:	dd28      	ble.n	8003356 <Ending_Dac_value_correction+0x7a>
			{
		    	S4.pmax_error1++;
 8003304:	4b59      	ldr	r3, [pc, #356]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	3301      	adds	r3, #1
 800330a:	4a58      	ldr	r2, [pc, #352]	; (800346c <Ending_Dac_value_correction+0x190>)
 800330c:	6253      	str	r3, [r2, #36]	; 0x24
		    	S4.pmax_error2=0;
 800330e:	4b57      	ldr	r3, [pc, #348]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
		    	if(S4.pmax_error1>2)
 8003314:	4b55      	ldr	r3, [pc, #340]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	2b02      	cmp	r3, #2
 800331a:	f340 809a 	ble.w	8003452 <Ending_Dac_value_correction+0x176>
		    	{
		    	S4.Ending_Dac=S4.Ending_Dac-1;
 800331e:	4b53      	ldr	r3, [pc, #332]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003320:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800332c:	4b4f      	ldr	r3, [pc, #316]	; (800346c <Ending_Dac_value_correction+0x190>)
 800332e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				S4.pmax_error1=0;
 8003332:	4b4e      	ldr	r3, [pc, #312]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003334:	2200      	movs	r2, #0
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
					if(S4.Ending_Dac<=500)
 8003338:	4b4c      	ldr	r3, [pc, #304]	; (800346c <Ending_Dac_value_correction+0x190>)
 800333a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800333e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003470 <Ending_Dac_value_correction+0x194>
 8003342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	d900      	bls.n	800334e <Ending_Dac_value_correction+0x72>
		    if(S5.P_Max>(S1._PIP_Val))
 800334c:	e081      	b.n	8003452 <Ending_Dac_value_correction+0x176>
						S4.Ending_Dac=500;
 800334e:	4b47      	ldr	r3, [pc, #284]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003350:	4a48      	ldr	r2, [pc, #288]	; (8003474 <Ending_Dac_value_correction+0x198>)
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(S1._PIP_Val))
 8003354:	e07d      	b.n	8003452 <Ending_Dac_value_correction+0x176>
		    	}
			}
			else if(S5.P_Max<(S1._PIP_Val))
 8003356:	4b44      	ldr	r3, [pc, #272]	; (8003468 <Ending_Dac_value_correction+0x18c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a41      	ldr	r2, [pc, #260]	; (8003460 <Ending_Dac_value_correction+0x184>)
 800335c:	7892      	ldrb	r2, [r2, #2]
 800335e:	4293      	cmp	r3, r2
 8003360:	da27      	bge.n	80033b2 <Ending_Dac_value_correction+0xd6>
			{
				S4.pmax_error2++;
 8003362:	4b42      	ldr	r3, [pc, #264]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	3301      	adds	r3, #1
 8003368:	4a40      	ldr	r2, [pc, #256]	; (800346c <Ending_Dac_value_correction+0x190>)
 800336a:	6213      	str	r3, [r2, #32]
				S4.pmax_error1=0;
 800336c:	4b3f      	ldr	r3, [pc, #252]	; (800346c <Ending_Dac_value_correction+0x190>)
 800336e:	2200      	movs	r2, #0
 8003370:	625a      	str	r2, [r3, #36]	; 0x24
				if(S4.pmax_error2>2)
 8003372:	4b3e      	ldr	r3, [pc, #248]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	2b02      	cmp	r3, #2
 8003378:	dd6b      	ble.n	8003452 <Ending_Dac_value_correction+0x176>
				{
				S4.Ending_Dac=S4.Ending_Dac+1;
 800337a:	4b3c      	ldr	r3, [pc, #240]	; (800346c <Ending_Dac_value_correction+0x190>)
 800337c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003380:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003384:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003388:	4b38      	ldr	r3, [pc, #224]	; (800346c <Ending_Dac_value_correction+0x190>)
 800338a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				S4.pmax_error2=0;
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003390:	2200      	movs	r2, #0
 8003392:	621a      	str	r2, [r3, #32]
				if(S4.Ending_Dac>=4095)
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003396:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800339a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003478 <Ending_Dac_value_correction+0x19c>
 800339e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	da00      	bge.n	80033aa <Ending_Dac_value_correction+0xce>
		    if(S5.P_Max>(S1._PIP_Val))
 80033a8:	e053      	b.n	8003452 <Ending_Dac_value_correction+0x176>
					 S4.Ending_Dac=4095;
 80033aa:	4b30      	ldr	r3, [pc, #192]	; (800346c <Ending_Dac_value_correction+0x190>)
 80033ac:	4a33      	ldr	r2, [pc, #204]	; (800347c <Ending_Dac_value_correction+0x1a0>)
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
		    if(S5.P_Max>(S1._PIP_Val))
 80033b0:	e04f      	b.n	8003452 <Ending_Dac_value_correction+0x176>
				}
			}
			else
			{
				S4.Ending_Dac=S4.Ending_Dac;
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <Ending_Dac_value_correction+0x190>)
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	4a2d      	ldr	r2, [pc, #180]	; (800346c <Ending_Dac_value_correction+0x190>)
 80033b8:	6293      	str	r3, [r2, #40]	; 0x28
		    if(S5.P_Max>(S1._PIP_Val))
 80033ba:	e04a      	b.n	8003452 <Ending_Dac_value_correction+0x176>
			}
    }

 else if(S1.RR<30 || S2.ramp_time<=80)
 80033bc:	4b28      	ldr	r3, [pc, #160]	; (8003460 <Ending_Dac_value_correction+0x184>)
 80033be:	7c9b      	ldrb	r3, [r3, #18]
 80033c0:	2b1d      	cmp	r3, #29
 80033c2:	d903      	bls.n	80033cc <Ending_Dac_value_correction+0xf0>
 80033c4:	4b27      	ldr	r3, [pc, #156]	; (8003464 <Ending_Dac_value_correction+0x188>)
 80033c6:	891b      	ldrh	r3, [r3, #8]
 80033c8:	2b50      	cmp	r3, #80	; 0x50
 80033ca:	d843      	bhi.n	8003454 <Ending_Dac_value_correction+0x178>
 {
	if(S5._Pip_Avg_val_int>S1._PIP_Val)
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <Ending_Dac_value_correction+0x18c>)
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	4a23      	ldr	r2, [pc, #140]	; (8003460 <Ending_Dac_value_correction+0x184>)
 80033d2:	7892      	ldrb	r2, [r2, #2]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	dd18      	ble.n	800340a <Ending_Dac_value_correction+0x12e>
	{
		S4.Ending_Dac=S4.Ending_Dac-5;
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <Ending_Dac_value_correction+0x190>)
 80033da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033de:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80033e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033e6:	4b21      	ldr	r3, [pc, #132]	; (800346c <Ending_Dac_value_correction+0x190>)
 80033e8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(S4.Ending_Dac<=500)
 80033ec:	4b1f      	ldr	r3, [pc, #124]	; (800346c <Ending_Dac_value_correction+0x190>)
 80033ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003470 <Ending_Dac_value_correction+0x194>
 80033f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fe:	d900      	bls.n	8003402 <Ending_Dac_value_correction+0x126>
	{
		S4.Ending_Dac=S4.Ending_Dac;

	}
 }
}
 8003400:	e028      	b.n	8003454 <Ending_Dac_value_correction+0x178>
			S4.Ending_Dac=500;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <Ending_Dac_value_correction+0x198>)
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003408:	e024      	b.n	8003454 <Ending_Dac_value_correction+0x178>
	else if(S5._Pip_Avg_val_int<S1._PIP_Val)
 800340a:	4b17      	ldr	r3, [pc, #92]	; (8003468 <Ending_Dac_value_correction+0x18c>)
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	4a14      	ldr	r2, [pc, #80]	; (8003460 <Ending_Dac_value_correction+0x184>)
 8003410:	7892      	ldrb	r2, [r2, #2]
 8003412:	4293      	cmp	r3, r2
 8003414:	da18      	bge.n	8003448 <Ending_Dac_value_correction+0x16c>
		S4.Ending_Dac=S4.Ending_Dac+5;
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003418:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800341c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003426:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(S4.Ending_Dac>=4095)
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <Ending_Dac_value_correction+0x190>)
 800342c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003430:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003478 <Ending_Dac_value_correction+0x19c>
 8003434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	da00      	bge.n	8003440 <Ending_Dac_value_correction+0x164>
}
 800343e:	e009      	b.n	8003454 <Ending_Dac_value_correction+0x178>
			S4.Ending_Dac=4095;
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <Ending_Dac_value_correction+0x190>)
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <Ending_Dac_value_correction+0x1a0>)
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003446:	e005      	b.n	8003454 <Ending_Dac_value_correction+0x178>
		S4.Ending_Dac=S4.Ending_Dac;
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <Ending_Dac_value_correction+0x190>)
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	4a07      	ldr	r2, [pc, #28]	; (800346c <Ending_Dac_value_correction+0x190>)
 800344e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003450:	e000      	b.n	8003454 <Ending_Dac_value_correction+0x178>
		    if(S5.P_Max>(S1._PIP_Val))
 8003452:	bf00      	nop
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20004644 	.word	0x20004644
 8003464:	20004838 	.word	0x20004838
 8003468:	200048fc 	.word	0x200048fc
 800346c:	200047ec 	.word	0x200047ec
 8003470:	43fa0000 	.word	0x43fa0000
 8003474:	43fa0000 	.word	0x43fa0000
 8003478:	457ff000 	.word	0x457ff000
 800347c:	457ff000 	.word	0x457ff000

08003480 <DAC_Value_Correction>:

void DAC_Value_Correction()
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0



		 if(S4.Acheived_ms < (S2.ramp_time_percentage -40))
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <DAC_Value_Correction+0x64>)
 8003486:	8b5b      	ldrh	r3, [r3, #26]
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <DAC_Value_Correction+0x68>)
 8003492:	edd3 7a03 	vldr	s15, [r3, #12]
 8003496:	eddf 6a15 	vldr	s13, [pc, #84]	; 80034ec <DAC_Value_Correction+0x6c>
 800349a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800349e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	d502      	bpl.n	80034ae <DAC_Value_Correction+0x2e>
	     {
			 Pip_Acheived_Early();
 80034a8:	f000 fa0e 	bl	80038c8 <Pip_Acheived_Early>
 80034ac:	e016      	b.n	80034dc <DAC_Value_Correction+0x5c>

	     }


	       else if(S4.Acheived_ms > (S2.ramp_time_percentage +40))
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <DAC_Value_Correction+0x64>)
 80034b0:	8b5b      	ldrh	r3, [r3, #26]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <DAC_Value_Correction+0x68>)
 80034bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80034c0:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80034ec <DAC_Value_Correction+0x6c>
 80034c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	dd02      	ble.n	80034d8 <DAC_Value_Correction+0x58>
	       {
	    	   Pip_Acheived_Slowly();
 80034d2:	f000 fb35 	bl	8003b40 <Pip_Acheived_Slowly>
 80034d6:	e001      	b.n	80034dc <DAC_Value_Correction+0x5c>
	       }

	       else
	       {
	    	   Pip_Acheived_Normally();
 80034d8:	f000 fbf2 	bl	8003cc0 <Pip_Acheived_Normally>

	       }

		     Pip_Not_Acheived();
 80034dc:	f000 fbfe 	bl	8003cdc <Pip_Not_Acheived>





}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200047ec 	.word	0x200047ec
 80034e8:	20004838 	.word	0x20004838
 80034ec:	42200000 	.word	0x42200000

080034f0 <pip_value_correction>:

void pip_value_correction()
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
	if (Pressure_sensor._Pressure_Val >= (S1._PIP_Val ))
 80034f4:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <pip_value_correction+0xe8>)
 80034f6:	791a      	ldrb	r2, [r3, #4]
 80034f8:	4b38      	ldr	r3, [pc, #224]	; (80035dc <pip_value_correction+0xec>)
 80034fa:	789b      	ldrb	r3, [r3, #2]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d324      	bcc.n	800354a <pip_value_correction+0x5a>
	{
		S3.cycle_done = 0;
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <pip_value_correction+0xf0>)
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8003506:	2200      	movs	r2, #0
 8003508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800350c:	4835      	ldr	r0, [pc, #212]	; (80035e4 <pip_value_correction+0xf4>)
 800350e:	f005 fa2d 	bl	800896c <HAL_GPIO_WritePin>
		if(S3.ok==1)
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <pip_value_correction+0xf0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d117      	bne.n	800354a <pip_value_correction+0x5a>
		{
			S4.Acheived_ten_ms = S4.ten_ms;
 800351a:	4b33      	ldr	r3, [pc, #204]	; (80035e8 <pip_value_correction+0xf8>)
 800351c:	8b1a      	ldrh	r2, [r3, #24]
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <pip_value_correction+0xf8>)
 8003520:	839a      	strh	r2, [r3, #28]
			S4.Acheived_ms=(S4.Acheived_ten_ms*S4.PID_task_delay);
 8003522:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <pip_value_correction+0xf8>)
 8003524:	8b9a      	ldrh	r2, [r3, #28]
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <pip_value_correction+0xf8>)
 8003528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352a:	b29b      	uxth	r3, r3
 800352c:	fb12 f303 	smulbb	r3, r2, r3
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <pip_value_correction+0xf8>)
 8003534:	835a      	strh	r2, [r3, #26]
			S3.ok=0;
 8003536:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <pip_value_correction+0xf0>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
			S3.Pip_Acheived_Flag=1;
 800353c:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <pip_value_correction+0xf0>)
 800353e:	2201      	movs	r2, #1
 8003540:	609a      	str	r2, [r3, #8]
			S4._DAC_VAL0 = S4.Last_DAC;
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <pip_value_correction+0xf8>)
 8003544:	88da      	ldrh	r2, [r3, #6]
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <pip_value_correction+0xf8>)
 8003548:	809a      	strh	r2, [r3, #4]
		}
	}
	if (S3.cycle_done == 1)
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <pip_value_correction+0xf0>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d140      	bne.n	80035d4 <pip_value_correction+0xe4>
	{
		if (S4.Last_DAC >= S4.Ending_Dac)
 8003552:	4b25      	ldr	r3, [pc, #148]	; (80035e8 <pip_value_correction+0xf8>)
 8003554:	88db      	ldrh	r3, [r3, #6]
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <pip_value_correction+0xf8>)
 8003560:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	db0d      	blt.n	800358a <pip_value_correction+0x9a>
		{
			S4.Last_DAC = S4.Ending_Dac;
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <pip_value_correction+0xf8>)
 8003570:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003578:	ee17 3a90 	vmov	r3, s15
 800357c:	b29a      	uxth	r2, r3
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <pip_value_correction+0xf8>)
 8003580:	80da      	strh	r2, [r3, #6]
			S3.cycle_done = 0;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <pip_value_correction+0xf0>)
 8003584:	2200      	movs	r2, #0
 8003586:	605a      	str	r2, [r3, #4]
			S4.Last_DAC = S4._DAC_VAL0;
			S4._DAC_VAL0=S4.Last_DAC + (S4.incrementing_Dac_value_10ms );
		}
	}

}
 8003588:	e024      	b.n	80035d4 <pip_value_correction+0xe4>
		else if (S4.Last_DAC < S4.Ending_Dac)
 800358a:	4b17      	ldr	r3, [pc, #92]	; (80035e8 <pip_value_correction+0xf8>)
 800358c:	88db      	ldrh	r3, [r3, #6]
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <pip_value_correction+0xf8>)
 8003598:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800359c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a4:	d400      	bmi.n	80035a8 <pip_value_correction+0xb8>
}
 80035a6:	e015      	b.n	80035d4 <pip_value_correction+0xe4>
			S4.Last_DAC = S4._DAC_VAL0;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <pip_value_correction+0xf8>)
 80035aa:	889a      	ldrh	r2, [r3, #4]
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <pip_value_correction+0xf8>)
 80035ae:	80da      	strh	r2, [r3, #6]
			S4._DAC_VAL0=S4.Last_DAC + (S4.incrementing_Dac_value_10ms );
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <pip_value_correction+0xf8>)
 80035b2:	88db      	ldrh	r3, [r3, #6]
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <pip_value_correction+0xf8>)
 80035be:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ca:	ee17 3a90 	vmov	r3, s15
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <pip_value_correction+0xf8>)
 80035d2:	809a      	strh	r2, [r3, #4]
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200047ac 	.word	0x200047ac
 80035dc:	20004644 	.word	0x20004644
 80035e0:	2000453c 	.word	0x2000453c
 80035e4:	40020400 	.word	0x40020400
 80035e8:	200047ec 	.word	0x200047ec
 80035ec:	00000000 	.word	0x00000000

080035f0 <PC_CMV_PARAMETERS>:




void PC_CMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

			S1._PIP_Val = RX_PARAM_CMD_PACKET->_PIP;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	791a      	ldrb	r2, [r3, #4]
 80035fc:	4b8c      	ldr	r3, [pc, #560]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 80035fe:	709a      	strb	r2, [r3, #2]
			S1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	795a      	ldrb	r2, [r3, #5]
 8003604:	4b8a      	ldr	r3, [pc, #552]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003606:	70da      	strb	r2, [r3, #3]
			S1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7a5b      	ldrb	r3, [r3, #9]
 800360c:	461a      	mov	r2, r3
 800360e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003612:	fb93 f3f2 	sdiv	r3, r3, r2
 8003616:	461a      	mov	r2, r3
 8003618:	4b85      	ldr	r3, [pc, #532]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 800361a:	605a      	str	r2, [r3, #4]
			S1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	7a1b      	ldrb	r3, [r3, #8]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4b82      	ldr	r3, [pc, #520]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003628:	609a      	str	r2, [r3, #8]
			S1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7a1b      	ldrb	r3, [r3, #8]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a7f      	ldr	r2, [pc, #508]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003634:	60d3      	str	r3, [r2, #12]
			S1.RT_Value =(0xF0 & RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME)>>4;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7adb      	ldrb	r3, [r3, #11]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	b2db      	uxtb	r3, r3
 800363e:	b29a      	uxth	r2, r3
 8003640:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003642:	821a      	strh	r2, [r3, #16]
			S1.RR=RX_PARAM_CMD_PACKET->_RR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7a5a      	ldrb	r2, [r3, #9]
 8003648:	4b79      	ldr	r3, [pc, #484]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 800364a:	749a      	strb	r2, [r3, #18]
			_FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7a9a      	ldrb	r2, [r3, #10]
 8003650:	4b78      	ldr	r3, [pc, #480]	; (8003834 <PC_CMV_PARAMETERS+0x244>)
 8003652:	701a      	strb	r2, [r3, #0]

			S2._I_TIMER_HOLD = (S1.I_Time * (S1.CycleTime / (S1.I_Time +S1.E_Time)));
 8003654:	4b76      	ldr	r3, [pc, #472]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4a75      	ldr	r2, [pc, #468]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 800365a:	6851      	ldr	r1, [r2, #4]
 800365c:	4a74      	ldr	r2, [pc, #464]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 800365e:	6890      	ldr	r0, [r2, #8]
 8003660:	4a73      	ldr	r2, [pc, #460]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003662:	68d2      	ldr	r2, [r2, #12]
 8003664:	4402      	add	r2, r0
 8003666:	fbb1 f2f2 	udiv	r2, r1, r2
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a72      	ldr	r2, [pc, #456]	; (8003838 <PC_CMV_PARAMETERS+0x248>)
 8003670:	6013      	str	r3, [r2, #0]
			S2._E_TIMER_HOLD = (S1.E_Time * (S1.CycleTime / (S1.I_Time + S1.E_Time)));
 8003672:	4b6f      	ldr	r3, [pc, #444]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4a6e      	ldr	r2, [pc, #440]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003678:	6851      	ldr	r1, [r2, #4]
 800367a:	4a6d      	ldr	r2, [pc, #436]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 800367c:	6890      	ldr	r0, [r2, #8]
 800367e:	4a6c      	ldr	r2, [pc, #432]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4402      	add	r2, r0
 8003684:	fbb1 f2f2 	udiv	r2, r1, r2
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	4a6a      	ldr	r2, [pc, #424]	; (8003838 <PC_CMV_PARAMETERS+0x248>)
 800368e:	6053      	str	r3, [r2, #4]
			S2.ramp_time=(S1.RT_Value*10);
 8003690:	4b67      	ldr	r3, [pc, #412]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003692:	8a1b      	ldrh	r3, [r3, #16]
 8003694:	461a      	mov	r2, r3
 8003696:	0092      	lsls	r2, r2, #2
 8003698:	4413      	add	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	4b66      	ldr	r3, [pc, #408]	; (8003838 <PC_CMV_PARAMETERS+0x248>)
 80036a0:	811a      	strh	r2, [r3, #8]
			S2.ramp_time_percentage = ((float)S2.ramp_time/100.00)*(S2._I_TIMER_HOLD) ;
 80036a2:	4b65      	ldr	r3, [pc, #404]	; (8003838 <PC_CMV_PARAMETERS+0x248>)
 80036a4:	891b      	ldrh	r3, [r3, #8]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ae:	ee17 0a90 	vmov	r0, s15
 80036b2:	f7fc fef1 	bl	8000498 <__aeabi_f2d>
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	4b60      	ldr	r3, [pc, #384]	; (800383c <PC_CMV_PARAMETERS+0x24c>)
 80036bc:	f7fd f86e 	bl	800079c <__aeabi_ddiv>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4614      	mov	r4, r2
 80036c6:	461d      	mov	r5, r3
 80036c8:	4b5b      	ldr	r3, [pc, #364]	; (8003838 <PC_CMV_PARAMETERS+0x248>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fec1 	bl	8000454 <__aeabi_ui2d>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4620      	mov	r0, r4
 80036d8:	4629      	mov	r1, r5
 80036da:	f7fc ff35 	bl	8000548 <__aeabi_dmul>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7fd fa11 	bl	8000b0c <__aeabi_d2f>
 80036ea:	4603      	mov	r3, r0
 80036ec:	4a52      	ldr	r2, [pc, #328]	; (8003838 <PC_CMV_PARAMETERS+0x248>)
 80036ee:	60d3      	str	r3, [r2, #12]
			S4.Ending_Dac=17.1129 * (S1._PIP_Val) + 587.7390+((1/70)*200);
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 80036f2:	789b      	ldrb	r3, [r3, #2]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fc febd 	bl	8000474 <__aeabi_i2d>
 80036fa:	a349      	add	r3, pc, #292	; (adr r3, 8003820 <PC_CMV_PARAMETERS+0x230>)
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f7fc ff22 	bl	8000548 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	a346      	add	r3, pc, #280	; (adr r3, 8003828 <PC_CMV_PARAMETERS+0x238>)
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f7fc fd63 	bl	80001dc <__adddf3>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	f7fc fd59 	bl	80001dc <__adddf3>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	f7fd f9eb 	bl	8000b0c <__aeabi_d2f>
 8003736:	4603      	mov	r3, r0
 8003738:	4a41      	ldr	r2, [pc, #260]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 800373a:	6293      	str	r3, [r2, #40]	; 0x28
			S4.incrementing_Dac_value_10ms=70;
 800373c:	4b40      	ldr	r3, [pc, #256]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 800373e:	4a41      	ldr	r2, [pc, #260]	; (8003844 <PC_CMV_PARAMETERS+0x254>)
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c
			S4.Acheived_ms=(S2.ramp_time_percentage*2);
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <PC_CMV_PARAMETERS+0x248>)
 8003744:	edd3 7a03 	vldr	s15, [r3, #12]
 8003748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800374c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003750:	ee17 3a90 	vmov	r3, s15
 8003754:	b29a      	uxth	r2, r3
 8003756:	4b3a      	ldr	r3, [pc, #232]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 8003758:	835a      	strh	r2, [r3, #26]

			S3.Pip_Acheived_Flag=0;
 800375a:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <PC_CMV_PARAMETERS+0x258>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
			S4.nack=1;
 8003760:	4b37      	ldr	r3, [pc, #220]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 8003762:	2201      	movs	r2, #1
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
			S4.PID_task_delay=10;
 8003766:	4b36      	ldr	r3, [pc, #216]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 8003768:	220a      	movs	r2, #10
 800376a:	635a      	str	r2, [r3, #52]	; 0x34
			S4.result1_error=0;
 800376c:	4b34      	ldr	r3, [pc, #208]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 800376e:	2200      	movs	r2, #0
 8003770:	63da      	str	r2, [r3, #60]	; 0x3c
			S4.last_result1=0;
 8003772:	4b33      	ldr	r3, [pc, #204]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
			S4.PID_task_delay_lock=0;
 800377a:	4b31      	ldr	r3, [pc, #196]	; (8003840 <PC_CMV_PARAMETERS+0x250>)
 800377c:	2200      	movs	r2, #0
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
			S5._Set_Peep=S1._PEEP_Val/2;
 8003780:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <PC_CMV_PARAMETERS+0x240>)
 8003782:	78db      	ldrb	r3, [r3, #3]
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003790:	4b2e      	ldr	r3, [pc, #184]	; (800384c <PC_CMV_PARAMETERS+0x25c>)
 8003792:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			vTaskSuspend(Vc_mode_Handler);
 8003796:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <PC_CMV_PARAMETERS+0x260>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f009 fc58 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <PC_CMV_PARAMETERS+0x264>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f009 fc53 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Handler);
 80037aa:	4b2b      	ldr	r3, [pc, #172]	; (8003858 <PC_CMV_PARAMETERS+0x268>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f009 fc4e 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <PC_CMV_PARAMETERS+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f009 fc49 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_simv_mode_Handler);
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <PC_CMV_PARAMETERS+0x270>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f009 fc44 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_simv_Pid_Handler);
 80037c8:	4b26      	ldr	r3, [pc, #152]	; (8003864 <PC_CMV_PARAMETERS+0x274>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f009 fc3f 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Psv_Handler);
 80037d2:	4b25      	ldr	r3, [pc, #148]	; (8003868 <PC_CMV_PARAMETERS+0x278>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f009 fc3a 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 80037dc:	4b23      	ldr	r3, [pc, #140]	; (800386c <PC_CMV_PARAMETERS+0x27c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f009 fc35 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <PC_CMV_PARAMETERS+0x280>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f009 fc30 	bl	800d050 <vTaskSuspend>
			vTaskResume(pc_mode_Handler);
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <PC_CMV_PARAMETERS+0x284>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f009 fcef 	bl	800d1d8 <vTaskResume>
			vTaskResume(Pc_cmv_Pid_Handler);
 80037fa:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <PC_CMV_PARAMETERS+0x288>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f009 fcea 	bl	800d1d8 <vTaskResume>

			_CurrentMode=PCCMV;
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <PC_CMV_PARAMETERS+0x28c>)
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <PC_CMV_PARAMETERS+0x290>)
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 8003810:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <PC_CMV_PARAMETERS+0x294>)
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]




}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bdb0      	pop	{r4, r5, r7, pc}
 800381e:	bf00      	nop
 8003820:	03afb7e9 	.word	0x03afb7e9
 8003824:	40311ce7 	.word	0x40311ce7
 8003828:	78d4fdf4 	.word	0x78d4fdf4
 800382c:	40825de9 	.word	0x40825de9
 8003830:	20004644 	.word	0x20004644
 8003834:	2000466d 	.word	0x2000466d
 8003838:	20004838 	.word	0x20004838
 800383c:	40590000 	.word	0x40590000
 8003840:	200047ec 	.word	0x200047ec
 8003844:	428c0000 	.word	0x428c0000
 8003848:	2000453c 	.word	0x2000453c
 800384c:	200048fc 	.word	0x200048fc
 8003850:	2000484c 	.word	0x2000484c
 8003854:	200045a8 	.word	0x200045a8
 8003858:	20004948 	.word	0x20004948
 800385c:	20004960 	.word	0x20004960
 8003860:	20004728 	.word	0x20004728
 8003864:	200048f4 	.word	0x200048f4
 8003868:	200046d8 	.word	0x200046d8
 800386c:	200046d0 	.word	0x200046d0
 8003870:	200047e4 	.word	0x200047e4
 8003874:	20004614 	.word	0x20004614
 8003878:	2000460c 	.word	0x2000460c
 800387c:	200046e8 	.word	0x200046e8
 8003880:	20004642 	.word	0x20004642
 8003884:	20004798 	.word	0x20004798

08003888 <PC_CMV_PID_Task>:



void PC_CMV_PID_Task(void *argument)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		S4.ten_ms++;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <PC_CMV_PID_Task+0x34>)
 8003892:	8b1b      	ldrh	r3, [r3, #24]
 8003894:	3301      	adds	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	4b08      	ldr	r3, [pc, #32]	; (80038bc <PC_CMV_PID_Task+0x34>)
 800389a:	831a      	strh	r2, [r3, #24]
			if(S1._Mode_Val == 1)
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <PC_CMV_PID_Task+0x38>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <PC_CMV_PID_Task+0x28>
			 {
				if(_CurrentComputationState==Compute_I_Wave)
 80038a4:	4b07      	ldr	r3, [pc, #28]	; (80038c4 <PC_CMV_PID_Task+0x3c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <PC_CMV_PID_Task+0x28>
				{
					pip_value_correction();
 80038ac:	f7ff fe20 	bl	80034f0 <pip_value_correction>
				}
			 }
		vTaskDelay(S4.PID_task_delay);
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <PC_CMV_PID_Task+0x34>)
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	4618      	mov	r0, r3
 80038b6:	f009 fb97 	bl	800cfe8 <vTaskDelay>
		S4.ten_ms++;
 80038ba:	e7e9      	b.n	8003890 <PC_CMV_PID_Task+0x8>
 80038bc:	200047ec 	.word	0x200047ec
 80038c0:	20004644 	.word	0x20004644
 80038c4:	20004798 	.word	0x20004798

080038c8 <Pip_Acheived_Early>:




void Pip_Acheived_Early()
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0

		     if(S3.Pip_Acheived_Flag==0)
 80038cc:	4b90      	ldr	r3, [pc, #576]	; (8003b10 <Pip_Acheived_Early+0x248>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8115 	beq.w	8003b00 <Pip_Acheived_Early+0x238>

			 }
			 else
			 {

			    S4.result1=(S4.Acheived_ms/S2.ramp_time_percentage)*100;
 80038d6:	4b8f      	ldr	r3, [pc, #572]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80038d8:	8b5b      	ldrh	r3, [r3, #26]
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038e2:	4b8d      	ldr	r3, [pc, #564]	; (8003b18 <Pip_Acheived_Early+0x250>)
 80038e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80038e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038ec:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8003b1c <Pip_Acheived_Early+0x254>
 80038f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038f4:	4b87      	ldr	r3, [pc, #540]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80038f6:	edc3 7a02 	vstr	s15, [r3, #8]
			    if(S4.result1<=70)
 80038fa:	4b86      	ldr	r3, [pc, #536]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80038fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003900:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003b20 <Pip_Acheived_Early+0x258>
 8003904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390c:	d81a      	bhi.n	8003944 <Pip_Acheived_Early+0x7c>
			    {
			    	S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms-5;
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003910:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003914:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003918:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800391c:	4b7d      	ldr	r3, [pc, #500]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 800391e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(S4.incrementing_Dac_value_10ms<=50)
 8003922:	4b7c      	ldr	r3, [pc, #496]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003924:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003928:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003b24 <Pip_Acheived_Early+0x25c>
 800392c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	d86c      	bhi.n	8003a10 <Pip_Acheived_Early+0x148>
			    	{
			    		S4.incrementing_Dac_value_10ms=50;
 8003936:	4b77      	ldr	r3, [pc, #476]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003938:	4a7b      	ldr	r2, [pc, #492]	; (8003b28 <Pip_Acheived_Early+0x260>)
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c
			    		S4.nack=0;
 800393c:	4b75      	ldr	r3, [pc, #468]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
 8003942:	e065      	b.n	8003a10 <Pip_Acheived_Early+0x148>
			    	}
			    }

			    else if(S4.result1<=80 && S4.result1>70)
 8003944:	4b73      	ldr	r3, [pc, #460]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003946:	edd3 7a02 	vldr	s15, [r3, #8]
 800394a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003b2c <Pip_Acheived_Early+0x264>
 800394e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003956:	d824      	bhi.n	80039a2 <Pip_Acheived_Early+0xda>
 8003958:	4b6e      	ldr	r3, [pc, #440]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 800395a:	edd3 7a02 	vldr	s15, [r3, #8]
 800395e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003b20 <Pip_Acheived_Early+0x258>
 8003962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	dd1a      	ble.n	80039a2 <Pip_Acheived_Early+0xda>
			    {
			    	S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms-(0.5);
 800396c:	4b69      	ldr	r3, [pc, #420]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 800396e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003972:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003976:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800397a:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 800397c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			    	if(S4.incrementing_Dac_value_10ms<=50)
 8003980:	4b64      	ldr	r3, [pc, #400]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003982:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003986:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003b24 <Pip_Acheived_Early+0x25c>
 800398a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	d83d      	bhi.n	8003a10 <Pip_Acheived_Early+0x148>
			    	{
			    		S4.incrementing_Dac_value_10ms=50;
 8003994:	4b5f      	ldr	r3, [pc, #380]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003996:	4a64      	ldr	r2, [pc, #400]	; (8003b28 <Pip_Acheived_Early+0x260>)
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
			    		S4.nack=0;
 800399a:	4b5e      	ldr	r3, [pc, #376]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
			    	if(S4.incrementing_Dac_value_10ms<=50)
 80039a0:	e036      	b.n	8003a10 <Pip_Acheived_Early+0x148>
			    	}
			    }
			    else if(S4.result1<=90 && S4.result1>80)
 80039a2:	4b5c      	ldr	r3, [pc, #368]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80039a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80039a8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8003b30 <Pip_Acheived_Early+0x268>
 80039ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b4:	d82c      	bhi.n	8003a10 <Pip_Acheived_Early+0x148>
 80039b6:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80039b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80039bc:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003b2c <Pip_Acheived_Early+0x264>
 80039c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	dd22      	ble.n	8003a10 <Pip_Acheived_Early+0x148>
			    {
			    	S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms-(0.1);
 80039ca:	4b52      	ldr	r3, [pc, #328]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fd62 	bl	8000498 <__aeabi_f2d>
 80039d4:	a34c      	add	r3, pc, #304	; (adr r3, 8003b08 <Pip_Acheived_Early+0x240>)
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	f7fc fbfd 	bl	80001d8 <__aeabi_dsub>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7fd f891 	bl	8000b0c <__aeabi_d2f>
 80039ea:	4603      	mov	r3, r0
 80039ec:	4a49      	ldr	r2, [pc, #292]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80039ee:	62d3      	str	r3, [r2, #44]	; 0x2c
			    	if(S4.incrementing_Dac_value_10ms<=50)
 80039f0:	4b48      	ldr	r3, [pc, #288]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 80039f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80039f6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003b24 <Pip_Acheived_Early+0x25c>
 80039fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a02:	d805      	bhi.n	8003a10 <Pip_Acheived_Early+0x148>
			    	{
			    		S4.incrementing_Dac_value_10ms=50;
 8003a04:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a06:	4a48      	ldr	r2, [pc, #288]	; (8003b28 <Pip_Acheived_Early+0x260>)
 8003a08:	62da      	str	r2, [r3, #44]	; 0x2c
			    		S4.nack=0;
 8003a0a:	4b42      	ldr	r3, [pc, #264]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
			    	}
			    }


			    if(S4.nack==0)
 8003a10:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d173      	bne.n	8003b00 <Pip_Acheived_Early+0x238>
			    {

			    	if(S5.P_Max<S1._PIP_Val)
 8003a18:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <Pip_Acheived_Early+0x26c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <Pip_Acheived_Early+0x270>)
 8003a1e:	7892      	ldrb	r2, [r2, #2]
 8003a20:	4293      	cmp	r3, r2
 8003a22:	da13      	bge.n	8003a4c <Pip_Acheived_Early+0x184>
			    	{
			    		 S4.result1_error++;
 8003a24:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a28:	3301      	adds	r3, #1
 8003a2a:	4a3a      	ldr	r2, [pc, #232]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a2c:	63d3      	str	r3, [r2, #60]	; 0x3c
			    		 if(S4.result1_error>=5)
 8003a2e:	4b39      	ldr	r3, [pc, #228]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	dd64      	ble.n	8003b00 <Pip_Acheived_Early+0x238>
			    		 {
			    			S4.PID_task_delay=S4.PID_task_delay;
 8003a36:	4b37      	ldr	r3, [pc, #220]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	4a36      	ldr	r2, [pc, #216]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a3c:	6353      	str	r3, [r2, #52]	; 0x34
			    			S4.result1_error=6;
 8003a3e:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a40:	2206      	movs	r2, #6
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c
			    		    S4.PID_task_delay_lock=1;
 8003a44:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
			    	}

			    }
			 }

}
 8003a4a:	e059      	b.n	8003b00 <Pip_Acheived_Early+0x238>
			    	else if(S4.result1>S4.last_result1)
 8003a4c:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a4e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a52:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a54:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	dc00      	bgt.n	8003a64 <Pip_Acheived_Early+0x19c>
}
 8003a62:	e04d      	b.n	8003b00 <Pip_Acheived_Early+0x238>
			    		if(S4.PID_task_delay_lock==0)
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d149      	bne.n	8003b00 <Pip_Acheived_Early+0x238>
			    		  if(S4.result1<60)
 8003a6c:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a72:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003b3c <Pip_Acheived_Early+0x274>
 8003a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	d505      	bpl.n	8003a8c <Pip_Acheived_Early+0x1c4>
			    			  S4.PID_task_delay=S4.PID_task_delay+10;
 8003a80:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	330a      	adds	r3, #10
 8003a86:	4a23      	ldr	r2, [pc, #140]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a88:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003a8a:	e039      	b.n	8003b00 <Pip_Acheived_Early+0x238>
			    		  else if(S4.result1<70 && S4.result1>=60)
 8003a8c:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003a8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a92:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003b20 <Pip_Acheived_Early+0x258>
 8003a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9e:	d50f      	bpl.n	8003ac0 <Pip_Acheived_Early+0x1f8>
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003aa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aa6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003b3c <Pip_Acheived_Early+0x274>
 8003aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	db05      	blt.n	8003ac0 <Pip_Acheived_Early+0x1f8>
			    			  S4.PID_task_delay=S4.PID_task_delay+6;
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab8:	3306      	adds	r3, #6
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003abc:	6353      	str	r3, [r2, #52]	; 0x34
 8003abe:	e01f      	b.n	8003b00 <Pip_Acheived_Early+0x238>
			    		  else if(S4.result1<=80 && S4.result1>=70)
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003ac2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ac6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003b2c <Pip_Acheived_Early+0x264>
 8003aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d80f      	bhi.n	8003af4 <Pip_Acheived_Early+0x22c>
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003ad6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ada:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003b20 <Pip_Acheived_Early+0x258>
 8003ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	db05      	blt.n	8003af4 <Pip_Acheived_Early+0x22c>
			    			  S4.PID_task_delay=S4.PID_task_delay+4;
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	3304      	adds	r3, #4
 8003aee:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003af0:	6353      	str	r3, [r2, #52]	; 0x34
 8003af2:	e005      	b.n	8003b00 <Pip_Acheived_Early+0x238>
			    			  S4.PID_task_delay=S4.PID_task_delay+1;
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	3301      	adds	r3, #1
 8003afa:	4a06      	ldr	r2, [pc, #24]	; (8003b14 <Pip_Acheived_Early+0x24c>)
 8003afc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003afe:	e7ff      	b.n	8003b00 <Pip_Acheived_Early+0x238>
 8003b00:	bf00      	nop
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	f3af 8000 	nop.w
 8003b08:	9999999a 	.word	0x9999999a
 8003b0c:	3fb99999 	.word	0x3fb99999
 8003b10:	2000453c 	.word	0x2000453c
 8003b14:	200047ec 	.word	0x200047ec
 8003b18:	20004838 	.word	0x20004838
 8003b1c:	42c80000 	.word	0x42c80000
 8003b20:	428c0000 	.word	0x428c0000
 8003b24:	42480000 	.word	0x42480000
 8003b28:	42480000 	.word	0x42480000
 8003b2c:	42a00000 	.word	0x42a00000
 8003b30:	42b40000 	.word	0x42b40000
 8003b34:	200048fc 	.word	0x200048fc
 8003b38:	20004644 	.word	0x20004644
 8003b3c:	42700000 	.word	0x42700000

08003b40 <Pip_Acheived_Slowly>:



void Pip_Acheived_Slowly()
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	               S4.result2=(S4.Acheived_ms/S2.ramp_time_percentage)*100;
 8003b44:	4b56      	ldr	r3, [pc, #344]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b46:	8b5b      	ldrh	r3, [r3, #26]
 8003b48:	ee07 3a90 	vmov	s15, r3
 8003b4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003b50:	4b54      	ldr	r3, [pc, #336]	; (8003ca4 <Pip_Acheived_Slowly+0x164>)
 8003b52:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b5a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003ca8 <Pip_Acheived_Slowly+0x168>
 8003b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b62:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b64:	edc3 7a04 	vstr	s15, [r3, #16]
		    	   S4.last_result2=S4.result2;
 8003b68:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4a4c      	ldr	r2, [pc, #304]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b6e:	6153      	str	r3, [r2, #20]

		    	   if(S4.result2 >= 130)
 8003b70:	4b4b      	ldr	r3, [pc, #300]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b76:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003cac <Pip_Acheived_Slowly+0x16c>
 8003b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	db1b      	blt.n	8003bbc <Pip_Acheived_Slowly+0x7c>
		    	   {
		    		    S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+5;
 8003b84:	4b46      	ldr	r3, [pc, #280]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b86:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003b8a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b92:	4b43      	ldr	r3, [pc, #268]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b94:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   	    if(S4.incrementing_Dac_value_10ms>=350)
 8003b98:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003b9a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003b9e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003cb0 <Pip_Acheived_Slowly+0x170>
 8003ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003baa:	da00      	bge.n	8003bae <Pip_Acheived_Slowly+0x6e>
		    	   			   S4.nack=0;
		    	   		}
		    	   	}


}
 8003bac:	e070      	b.n	8003c90 <Pip_Acheived_Slowly+0x150>
		    	   	    	 S4.incrementing_Dac_value_10ms=350;
 8003bae:	4b3c      	ldr	r3, [pc, #240]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003bb0:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <Pip_Acheived_Slowly+0x174>)
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   	    	 S4.nack=0;
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bba:	e069      	b.n	8003c90 <Pip_Acheived_Slowly+0x150>
		    	   else if(S4.result2 > 120 && S4.result2 <130)
 8003bbc:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003bbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bc2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003cb8 <Pip_Acheived_Slowly+0x178>
 8003bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bce:	dd24      	ble.n	8003c1a <Pip_Acheived_Slowly+0xda>
 8003bd0:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003bd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bd6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003cac <Pip_Acheived_Slowly+0x16c>
 8003bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	d51a      	bpl.n	8003c1a <Pip_Acheived_Slowly+0xda>
		    		    S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+(0.5);
 8003be4:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003be6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003bea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003bee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003bf4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		    	   		if(S4.incrementing_Dac_value_10ms>=350)
 8003bf8:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003bfa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003bfe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003cb0 <Pip_Acheived_Slowly+0x170>
 8003c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	db41      	blt.n	8003c90 <Pip_Acheived_Slowly+0x150>
		    	   			  S4.incrementing_Dac_value_10ms=350;
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c0e:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <Pip_Acheived_Slowly+0x174>)
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			  S4.nack=0;
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
		    	   		if(S4.incrementing_Dac_value_10ms>=350)
 8003c18:	e03a      	b.n	8003c90 <Pip_Acheived_Slowly+0x150>
		    	   	else if(S4.result2<=120 && S4.result2>=110)
 8003c1a:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c20:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003cb8 <Pip_Acheived_Slowly+0x178>
 8003c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	d900      	bls.n	8003c30 <Pip_Acheived_Slowly+0xf0>
}
 8003c2e:	e02f      	b.n	8003c90 <Pip_Acheived_Slowly+0x150>
		    	   	else if(S4.result2<=120 && S4.result2>=110)
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c32:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c36:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003cbc <Pip_Acheived_Slowly+0x17c>
 8003c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c42:	da00      	bge.n	8003c46 <Pip_Acheived_Slowly+0x106>
}
 8003c44:	e024      	b.n	8003c90 <Pip_Acheived_Slowly+0x150>
		    	   		S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+(0.1);
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fc24 	bl	8000498 <__aeabi_f2d>
 8003c50:	a311      	add	r3, pc, #68	; (adr r3, 8003c98 <Pip_Acheived_Slowly+0x158>)
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f7fc fac1 	bl	80001dc <__adddf3>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	f7fc ff53 	bl	8000b0c <__aeabi_d2f>
 8003c66:	4603      	mov	r3, r0
 8003c68:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
		    	   		if(S4.incrementing_Dac_value_10ms>=350)
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c6e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003c72:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003cb0 <Pip_Acheived_Slowly+0x170>
 8003c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7e:	da00      	bge.n	8003c82 <Pip_Acheived_Slowly+0x142>
}
 8003c80:	e006      	b.n	8003c90 <Pip_Acheived_Slowly+0x150>
		    	   			   S4.incrementing_Dac_value_10ms=350;
 8003c82:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <Pip_Acheived_Slowly+0x174>)
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c
		    	   			   S4.nack=0;
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <Pip_Acheived_Slowly+0x160>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c8e:	e7ff      	b.n	8003c90 <Pip_Acheived_Slowly+0x150>
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	f3af 8000 	nop.w
 8003c98:	9999999a 	.word	0x9999999a
 8003c9c:	3fb99999 	.word	0x3fb99999
 8003ca0:	200047ec 	.word	0x200047ec
 8003ca4:	20004838 	.word	0x20004838
 8003ca8:	42c80000 	.word	0x42c80000
 8003cac:	43020000 	.word	0x43020000
 8003cb0:	43af0000 	.word	0x43af0000
 8003cb4:	43af0000 	.word	0x43af0000
 8003cb8:	42f00000 	.word	0x42f00000
 8003cbc:	42dc0000 	.word	0x42dc0000

08003cc0 <Pip_Acheived_Normally>:
void Pip_Acheived_Normally()
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
 	   S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <Pip_Acheived_Normally+0x18>)
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	4a03      	ldr	r2, [pc, #12]	; (8003cd8 <Pip_Acheived_Normally+0x18>)
 8003cca:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	200047ec 	.word	0x200047ec

08003cdc <Pip_Not_Acheived>:


void Pip_Not_Acheived()
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
		   if(S3.Pip_Acheived_Flag==0)
 8003ce0:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <Pip_Not_Acheived+0x4c>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11a      	bne.n	8003d1e <Pip_Not_Acheived+0x42>
		   {
			   S4.incrementing_Dac_value_10ms=S4.incrementing_Dac_value_10ms+1;
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <Pip_Not_Acheived+0x50>)
 8003cea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <Pip_Not_Acheived+0x50>)
 8003cf8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			   if(S4.incrementing_Dac_value_10ms>=350)
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <Pip_Not_Acheived+0x50>)
 8003cfe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003d02:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003d30 <Pip_Not_Acheived+0x54>
 8003d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	da00      	bge.n	8003d12 <Pip_Not_Acheived+0x36>
			   {
				   S4.incrementing_Dac_value_10ms=350;
				   S4.nack=0;
			   }
		   }
}
 8003d10:	e005      	b.n	8003d1e <Pip_Not_Acheived+0x42>
				   S4.incrementing_Dac_value_10ms=350;
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <Pip_Not_Acheived+0x50>)
 8003d14:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <Pip_Not_Acheived+0x58>)
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
				   S4.nack=0;
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <Pip_Not_Acheived+0x50>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	2000453c 	.word	0x2000453c
 8003d2c:	200047ec 	.word	0x200047ec
 8003d30:	43af0000 	.word	0x43af0000
 8003d34:	43af0000 	.word	0x43af0000

08003d38 <Peep_Vale_Lock_delay_Pc_cmv>:




void Peep_Vale_Lock_delay_Pc_cmv()
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8003d3c:	4b68      	ldr	r3, [pc, #416]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d3e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d42:	4b67      	ldr	r3, [pc, #412]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d44:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d4e:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8003d52:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d54:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d5c:	ee17 2a90 	vmov	r2, s15
 8003d60:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24
		S5._Pip_Avg_count = 0;
 8003d64:	4b5e      	ldr	r3, [pc, #376]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8003d6c:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8003d74:	4b5a      	ldr	r3, [pc, #360]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d76:	edd3 6a05 	vldr	s13, [r3, #20]
 8003d7a:	4b59      	ldr	r3, [pc, #356]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d7c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d86:	edc3 7a07 	vstr	s15, [r3, #28]
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8003d8a:	4b55      	ldr	r3, [pc, #340]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d94:	ee17 2a90 	vmov	r2, s15
 8003d98:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003d9a:	621a      	str	r2, [r3, #32]

		if (S1.RR >= 30 || S2._E_TIMER_HOLD < 500)
 8003d9c:	4b51      	ldr	r3, [pc, #324]	; (8003ee4 <Peep_Vale_Lock_delay_Pc_cmv+0x1ac>)
 8003d9e:	7c9b      	ldrb	r3, [r3, #18]
 8003da0:	2b1d      	cmp	r3, #29
 8003da2:	d804      	bhi.n	8003dae <Peep_Vale_Lock_delay_Pc_cmv+0x76>
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <Peep_Vale_Lock_delay_Pc_cmv+0x1b0>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dac:	d203      	bcs.n	8003db6 <Peep_Vale_Lock_delay_Pc_cmv+0x7e>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 8003dae:	4b4c      	ldr	r3, [pc, #304]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	4a4b      	ldr	r2, [pc, #300]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003db4:	6213      	str	r3, [r2, #32]
		}

		if (S5._Peep_Avg_val_int > (S1._PEEP_Val + 1))
 8003db6:	4b4a      	ldr	r3, [pc, #296]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	4b4a      	ldr	r3, [pc, #296]	; (8003ee4 <Peep_Vale_Lock_delay_Pc_cmv+0x1ac>)
 8003dbc:	78db      	ldrb	r3, [r3, #3]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	dd32      	ble.n	8003e2a <Peep_Vale_Lock_delay_Pc_cmv+0xf2>
		{
			S5._Set_Peep = S5._Set_Peep - 0.5f;
 8003dc4:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003dc6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003dca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dd2:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003dd4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			S5.error_count++;
 8003dd8:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	3301      	adds	r3, #1
 8003dde:	4a40      	ldr	r2, [pc, #256]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003de0:	6293      	str	r3, [r2, #40]	; 0x28
			if (S5.error_count > 0)
 8003de2:	4b3f      	ldr	r3, [pc, #252]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	dd11      	ble.n	8003e0e <Peep_Vale_Lock_delay_Pc_cmv+0xd6>
			{
				S5.Lock_delay = S5.Lock_delay + 10;
 8003dea:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003dec:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003dee:	330a      	adds	r3, #10
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003df4:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay > 500)
 8003dfc:	4b38      	ldr	r3, [pc, #224]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003dfe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003e00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e04:	d903      	bls.n	8003e0e <Peep_Vale_Lock_delay_Pc_cmv+0xd6>
					S5.Lock_delay = 500;
 8003e06:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e0c:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep <= 3)
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e10:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003e14:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e20:	d851      	bhi.n	8003ec6 <Peep_Vale_Lock_delay_Pc_cmv+0x18e>
			{
				S5._Set_Peep = 3;
 8003e22:	4b2f      	ldr	r3, [pc, #188]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e24:	4a31      	ldr	r2, [pc, #196]	; (8003eec <Peep_Vale_Lock_delay_Pc_cmv+0x1b4>)
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
 8003e28:	e04d      	b.n	8003ec6 <Peep_Vale_Lock_delay_Pc_cmv+0x18e>
			}
		}
		else if (S5._Peep_Avg_val_int < (S1._PEEP_Val - 1))
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <Peep_Vale_Lock_delay_Pc_cmv+0x1ac>)
 8003e30:	78db      	ldrb	r3, [r3, #3]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	429a      	cmp	r2, r3
 8003e36:	da42      	bge.n	8003ebe <Peep_Vale_Lock_delay_Pc_cmv+0x186>
		{
			S5._Set_Peep = S5._Set_Peep + 0.5f;
 8003e38:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e3a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003e3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e46:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e48:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			S5.error_count2++;
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	3301      	adds	r3, #1
 8003e52:	4a23      	ldr	r2, [pc, #140]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e54:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (S5.error_count2 > 0)
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	dd14      	ble.n	8003e88 <Peep_Vale_Lock_delay_Pc_cmv+0x150>
			{
				S5.Lock_delay = S5.Lock_delay - 10;
 8003e5e:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e60:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003e62:	3b0a      	subs	r3, #10
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e68:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay < 1 || S5.Lock_delay > 500)
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e72:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d004      	beq.n	8003e82 <Peep_Vale_Lock_delay_Pc_cmv+0x14a>
 8003e78:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e7a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003e7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e80:	d902      	bls.n	8003e88 <Peep_Vale_Lock_delay_Pc_cmv+0x150>
					S5.Lock_delay = 1;
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep > S1._PEEP_Val + 2)
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003e8a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <Peep_Vale_Lock_delay_Pc_cmv+0x1ac>)
 8003e90:	78db      	ldrb	r3, [r3, #3]
 8003e92:	3302      	adds	r3, #2
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea4:	dd0f      	ble.n	8003ec6 <Peep_Vale_Lock_delay_Pc_cmv+0x18e>
			{
				S5._Set_Peep = S1._PEEP_Val / 2;
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <Peep_Vale_Lock_delay_Pc_cmv+0x1ac>)
 8003ea8:	78db      	ldrb	r3, [r3, #3]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003eb8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8003ebc:	e003      	b.n	8003ec6 <Peep_Vale_Lock_delay_Pc_cmv+0x18e>
			}
		}
		else
		{
			S5._Set_Peep = S5._Set_Peep;
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30
		}
		S5._Peep_Avg_count = 0;
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	619a      	str	r2, [r3, #24]
		S5._Peep_Avg = 0;
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <Peep_Vale_Lock_delay_Pc_cmv+0x1a8>)
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	615a      	str	r2, [r3, #20]
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	200048fc 	.word	0x200048fc
 8003ee4:	20004644 	.word	0x20004644
 8003ee8:	20004838 	.word	0x20004838
 8003eec:	40400000 	.word	0x40400000

08003ef0 <Pressure_Sensor_Mv>:

#include "Pressure_Sensors_Data.h"


uint16_t Pressure_Sensor_Mv(uint16_t P_value)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	80fb      	strh	r3, [r7, #6]
 	  return (((P_value)*5000)/4095);
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	4a06      	ldr	r2, [pc, #24]	; (8003f20 <Pressure_Sensor_Mv+0x30>)
 8003f06:	fb82 1203 	smull	r1, r2, r2, r3
 8003f0a:	441a      	add	r2, r3
 8003f0c:	12d2      	asrs	r2, r2, #11
 8003f0e:	17db      	asrs	r3, r3, #31
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	b29b      	uxth	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	80080081 	.word	0x80080081

08003f24 <Pressure_Sensor_offset>:

void Pressure_Sensor_offset(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  	for(int n=0;n<1000;n++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	607b      	str	r3, [r7, #4]
 8003f2e:	e00b      	b.n	8003f48 <Pressure_Sensor_offset+0x24>
  	{
  		  Pressure_sensor._Pressure_Sensor_Offset_Val=Pressure_Sensor_Mv(Pressure_Sensor_Pin);
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <Pressure_Sensor_offset+0x38>)
 8003f32:	889b      	ldrh	r3, [r3, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ffdb 	bl	8003ef0 <Pressure_Sensor_Mv>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <Pressure_Sensor_offset+0x3c>)
 8003f40:	801a      	strh	r2, [r3, #0]
  	for(int n=0;n<1000;n++)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3301      	adds	r3, #1
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f4e:	dbef      	blt.n	8003f30 <Pressure_Sensor_offset+0xc>

  	}
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200046c4 	.word	0x200046c4
 8003f60:	200047ac 	.word	0x200047ac

08003f64 <Pressure_Sensor_Value>:

void Pressure_Sensor_Value()
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
     const float gP_sensitivity=44.13;
 8003f6a:	4b18      	ldr	r3, [pc, #96]	; (8003fcc <Pressure_Sensor_Value+0x68>)
 8003f6c:	60fb      	str	r3, [r7, #12]

     Pressure_sensor._Runtime_Pressure_Val=Pressure_Sensor_Mv(Pressure_Sensor_Pin);
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <Pressure_Sensor_Value+0x6c>)
 8003f70:	889b      	ldrh	r3, [r3, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ffbc 	bl	8003ef0 <Pressure_Sensor_Mv>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003f7e:	805a      	strh	r2, [r3, #2]

     Pressure_sensor._Pressure_Mv_Val_=(Pressure_sensor._Runtime_Pressure_Val-Pressure_sensor._Pressure_Sensor_Offset_Val);
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003f82:	885b      	ldrh	r3, [r3, #2]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003f96:	edc3 7a02 	vstr	s15, [r3, #8]

     Pressure_sensor._P_cmh2o_Val=(Pressure_sensor._Pressure_Mv_Val_/gP_sensitivity);
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003f9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003fa0:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003faa:	edc3 7a03 	vstr	s15, [r3, #12]

     Pressure_sensor._Pressure_Val=Pressure_sensor._P_cmh2o_Val;
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003fb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fbc:	793b      	ldrb	r3, [r7, #4]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <Pressure_Sensor_Value+0x70>)
 8003fc2:	711a      	strb	r2, [r3, #4]


}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	4230851f 	.word	0x4230851f
 8003fd0:	200046c4 	.word	0x200046c4
 8003fd4:	200047ac 	.word	0x200047ac

08003fd8 <PSV_Mode_Task>:
int now_update=0;
uint16_t PIP_PSV_DAC_Val;


void PSV_Mode_Task (void *argument)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

	while(1)
	{


		if(now_update==1)
 8003fe0:	4b98      	ldr	r3, [pc, #608]	; (8004244 <PSV_Mode_Task+0x26c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d149      	bne.n	800407c <PSV_Mode_Task+0xa4>
		{

			if(Pressure_sensor._Pressure_Val<=(P1.PEEP_PSV_Val-5))
 8003fe8:	4b97      	ldr	r3, [pc, #604]	; (8004248 <PSV_Mode_Task+0x270>)
 8003fea:	789b      	ldrb	r3, [r3, #2]
 8003fec:	3b04      	subs	r3, #4
 8003fee:	4a97      	ldr	r2, [pc, #604]	; (800424c <PSV_Mode_Task+0x274>)
 8003ff0:	7912      	ldrb	r2, [r2, #4]
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	dd27      	ble.n	8004046 <PSV_Mode_Task+0x6e>
			{
				ExpValve_CLOSE();
 8003ff6:	4b96      	ldr	r3, [pc, #600]	; (8004250 <PSV_Mode_Task+0x278>)
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4a95      	ldr	r2, [pc, #596]	; (8004250 <PSV_Mode_Task+0x278>)
 8003ffc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004000:	6153      	str	r3, [r2, #20]
				P1._Apnea_counter_trigger_check_time=1500;
 8004002:	4b91      	ldr	r3, [pc, #580]	; (8004248 <PSV_Mode_Task+0x270>)
 8004004:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004008:	809a      	strh	r2, [r3, #4]
				P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 800400a:	4b8f      	ldr	r3, [pc, #572]	; (8004248 <PSV_Mode_Task+0x270>)
 800400c:	8b9b      	ldrh	r3, [r3, #28]
 800400e:	461a      	mov	r2, r3
 8004010:	0152      	lsls	r2, r2, #5
 8004012:	1ad2      	subs	r2, r2, r3
 8004014:	0092      	lsls	r2, r2, #2
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	b29a      	uxth	r2, r3
 800401c:	4b8a      	ldr	r3, [pc, #552]	; (8004248 <PSV_Mode_Task+0x270>)
 800401e:	83da      	strh	r2, [r3, #30]
				ExpValve_CLOSE();
 8004020:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <PSV_Mode_Task+0x278>)
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	4a8a      	ldr	r2, [pc, #552]	; (8004250 <PSV_Mode_Task+0x278>)
 8004026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800402a:	6153      	str	r3, [r2, #20]
				P1.PEEP_PSV_DAC_Val=call_PIP_PSV_DAC_Val(P1.PEEP_PSV_Val);
 800402c:	4b86      	ldr	r3, [pc, #536]	; (8004248 <PSV_Mode_Task+0x270>)
 800402e:	789b      	ldrb	r3, [r3, #2]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fa09 	bl	8004448 <call_PIP_PSV_DAC_Val>
 8004036:	4603      	mov	r3, r0
 8004038:	461a      	mov	r2, r3
 800403a:	4b83      	ldr	r3, [pc, #524]	; (8004248 <PSV_Mode_Task+0x270>)
 800403c:	831a      	strh	r2, [r3, #24]
				now_update=0;
 800403e:	4b81      	ldr	r3, [pc, #516]	; (8004244 <PSV_Mode_Task+0x26c>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e01a      	b.n	800407c <PSV_Mode_Task+0xa4>
			}
			else if(Pressure_sensor._Pressure_Val>(P1.PEEP_PSV_Val-5))
 8004046:	4b80      	ldr	r3, [pc, #512]	; (8004248 <PSV_Mode_Task+0x270>)
 8004048:	789b      	ldrb	r3, [r3, #2]
 800404a:	3b04      	subs	r3, #4
 800404c:	4a7f      	ldr	r2, [pc, #508]	; (800424c <PSV_Mode_Task+0x274>)
 800404e:	7912      	ldrb	r2, [r2, #4]
 8004050:	4293      	cmp	r3, r2
 8004052:	dc13      	bgt.n	800407c <PSV_Mode_Task+0xa4>
			{
				ExpValve_OPEN();
 8004054:	4b7e      	ldr	r3, [pc, #504]	; (8004250 <PSV_Mode_Task+0x278>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4a7d      	ldr	r2, [pc, #500]	; (8004250 <PSV_Mode_Task+0x278>)
 800405a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405e:	6153      	str	r3, [r2, #20]
				P1.PEEP_PSV_DAC_Val=0;
 8004060:	4b79      	ldr	r3, [pc, #484]	; (8004248 <PSV_Mode_Task+0x270>)
 8004062:	2200      	movs	r2, #0
 8004064:	831a      	strh	r2, [r3, #24]
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, P1.PEEP_PSV_DAC_Val);
 8004066:	4b78      	ldr	r3, [pc, #480]	; (8004248 <PSV_Mode_Task+0x270>)
 8004068:	8b1b      	ldrh	r3, [r3, #24]
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	4879      	ldr	r0, [pc, #484]	; (8004254 <PSV_Mode_Task+0x27c>)
 8004070:	f003 fe56 	bl	8007d20 <HAL_DAC_SetValue>
				P1._Apnea_counter_trigger_check_time=1500;
 8004074:	4b74      	ldr	r3, [pc, #464]	; (8004248 <PSV_Mode_Task+0x270>)
 8004076:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800407a:	809a      	strh	r2, [r3, #4]
			}
	   }



		if(P1._APNEA_COUNTER >0 && Trigger==0 && now_update==0)
 800407c:	4b72      	ldr	r3, [pc, #456]	; (8004248 <PSV_Mode_Task+0x270>)
 800407e:	8bdb      	ldrh	r3, [r3, #30]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a5 	beq.w	80041d0 <PSV_Mode_Task+0x1f8>
 8004086:	4b74      	ldr	r3, [pc, #464]	; (8004258 <PSV_Mode_Task+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f040 80a0 	bne.w	80041d0 <PSV_Mode_Task+0x1f8>
 8004090:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <PSV_Mode_Task+0x26c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 809b 	bne.w	80041d0 <PSV_Mode_Task+0x1f8>
		{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, P1.PEEP_PSV_DAC_Val);
 800409a:	4b6b      	ldr	r3, [pc, #428]	; (8004248 <PSV_Mode_Task+0x270>)
 800409c:	8b1b      	ldrh	r3, [r3, #24]
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	486c      	ldr	r0, [pc, #432]	; (8004254 <PSV_Mode_Task+0x27c>)
 80040a4:	f003 fe3c 	bl	8007d20 <HAL_DAC_SetValue>
			vol.Volume = 0;
 80040a8:	4b6c      	ldr	r3, [pc, #432]	; (800425c <PSV_Mode_Task+0x284>)
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
			if( P1._Apnea_counter_trigger_check_time==0)
 80040b0:	4b65      	ldr	r3, [pc, #404]	; (8004248 <PSV_Mode_Task+0x270>)
 80040b2:	889b      	ldrh	r3, [r3, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d174      	bne.n	80041a2 <PSV_Mode_Task+0x1ca>
			{
				if (P1._TRIG_TYPE == 1)
 80040b8:	4b63      	ldr	r3, [pc, #396]	; (8004248 <PSV_Mode_Task+0x270>)
 80040ba:	88db      	ldrh	r3, [r3, #6]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d154      	bne.n	800416a <PSV_Mode_Task+0x192>
			    {
			        if((Pressure_sensor._Pressure_Val>(P1.simv_trigger_offset+P1._TRIG_LMT))||(Pressure_sensor._Pressure_Val<(P1.simv_trigger_offset-P1._TRIG_LMT)))
 80040c0:	4b62      	ldr	r3, [pc, #392]	; (800424c <PSV_Mode_Task+0x274>)
 80040c2:	791b      	ldrb	r3, [r3, #4]
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040cc:	4b5e      	ldr	r3, [pc, #376]	; (8004248 <PSV_Mode_Task+0x270>)
 80040ce:	edd3 6a05 	vldr	s13, [r3, #20]
 80040d2:	4b5d      	ldr	r3, [pc, #372]	; (8004248 <PSV_Mode_Task+0x270>)
 80040d4:	891b      	ldrh	r3, [r3, #8]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ea:	dc15      	bgt.n	8004118 <PSV_Mode_Task+0x140>
 80040ec:	4b57      	ldr	r3, [pc, #348]	; (800424c <PSV_Mode_Task+0x274>)
 80040ee:	791b      	ldrb	r3, [r3, #4]
 80040f0:	ee07 3a90 	vmov	s15, r3
 80040f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f8:	4b53      	ldr	r3, [pc, #332]	; (8004248 <PSV_Mode_Task+0x270>)
 80040fa:	edd3 6a05 	vldr	s13, [r3, #20]
 80040fe:	4b52      	ldr	r3, [pc, #328]	; (8004248 <PSV_Mode_Task+0x270>)
 8004100:	891b      	ldrh	r3, [r3, #8]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800410e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	d52d      	bpl.n	8004174 <PSV_Mode_Task+0x19c>
			        {
			        	_I_TIMER = B2._I_TIMER_HOLD;
 8004118:	4b51      	ldr	r3, [pc, #324]	; (8004260 <PSV_Mode_Task+0x288>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a51      	ldr	r2, [pc, #324]	; (8004264 <PSV_Mode_Task+0x28c>)
 800411e:	6013      	str	r3, [r2, #0]
			        	if (_CurrentBackupMode == PCCMV_BACKUP)
 8004120:	4b51      	ldr	r3, [pc, #324]	; (8004268 <PSV_Mode_Task+0x290>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d125      	bne.n	8004174 <PSV_Mode_Task+0x19c>
			        	{
			        		P1.PEEP_PSV_DAC_Val=0;
 8004128:	4b47      	ldr	r3, [pc, #284]	; (8004248 <PSV_Mode_Task+0x270>)
 800412a:	2200      	movs	r2, #0
 800412c:	831a      	strh	r2, [r3, #24]
			        		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, P1.PEEP_PSV_DAC_Val);
 800412e:	4b46      	ldr	r3, [pc, #280]	; (8004248 <PSV_Mode_Task+0x270>)
 8004130:	8b1b      	ldrh	r3, [r3, #24]
 8004132:	2200      	movs	r2, #0
 8004134:	2100      	movs	r1, #0
 8004136:	4847      	ldr	r0, [pc, #284]	; (8004254 <PSV_Mode_Task+0x27c>)
 8004138:	f003 fdf2 	bl	8007d20 <HAL_DAC_SetValue>
			        		P1.PIP_PSV_DAC_Val=call_PIP_PSV_DAC_Val(P1.PIP_PSV_Val);
 800413c:	4b42      	ldr	r3, [pc, #264]	; (8004248 <PSV_Mode_Task+0x270>)
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f981 	bl	8004448 <call_PIP_PSV_DAC_Val>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <PSV_Mode_Task+0x270>)
 800414c:	835a      	strh	r2, [r3, #26]

			        		Trigger=1;
 800414e:	4b42      	ldr	r3, [pc, #264]	; (8004258 <PSV_Mode_Task+0x280>)
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]

			        		vTaskResume(Psv_Pid_Handler);
 8004154:	4b45      	ldr	r3, [pc, #276]	; (800426c <PSV_Mode_Task+0x294>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f009 f83d 	bl	800d1d8 <vTaskResume>
			        		vTaskSuspend(Psv_Handler);
 800415e:	4b44      	ldr	r3, [pc, #272]	; (8004270 <PSV_Mode_Task+0x298>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f008 ff74 	bl	800d050 <vTaskSuspend>
 8004168:	e004      	b.n	8004174 <PSV_Mode_Task+0x19c>
			        	}
			         }
			      }
			      else
			      {
			         if((Flow_Sensor_cal._Flow_Val>(P1._TRIG_LMT))||(Flow_Sensor_cal._Flow_Val<(P1._TRIG_LMT*-1)))
 800416a:	4b42      	ldr	r3, [pc, #264]	; (8004274 <PSV_Mode_Task+0x29c>)
 800416c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416e:	4a36      	ldr	r2, [pc, #216]	; (8004248 <PSV_Mode_Task+0x270>)
 8004170:	8912      	ldrh	r2, [r2, #8]
 8004172:	4293      	cmp	r3, r2

			         }
			        }


			        	 if (P1._TRIG_TYPE == 1)
 8004174:	4b34      	ldr	r3, [pc, #208]	; (8004248 <PSV_Mode_Task+0x270>)
 8004176:	88db      	ldrh	r3, [r3, #6]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d15e      	bne.n	800423a <PSV_Mode_Task+0x262>
			        	 {
			        	     if (Flow_Sensor_cal._Flow_Val >= (-1) && Flow_Sensor_cal._Flow_Val <= 3)
 800417c:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <PSV_Mode_Task+0x29c>)
 800417e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	db59      	blt.n	800423a <PSV_Mode_Task+0x262>
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <PSV_Mode_Task+0x29c>)
 8004188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418a:	2b03      	cmp	r3, #3
 800418c:	dc55      	bgt.n	800423a <PSV_Mode_Task+0x262>
			        	     {
			        	        P1.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 800418e:	4b2f      	ldr	r3, [pc, #188]	; (800424c <PSV_Mode_Task+0x274>)
 8004190:	791b      	ldrb	r3, [r3, #4]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <PSV_Mode_Task+0x270>)
 800419c:	edc3 7a05 	vstr	s15, [r3, #20]
			if( P1._Apnea_counter_trigger_check_time==0)
 80041a0:	e04b      	b.n	800423a <PSV_Mode_Task+0x262>
			        	     }
			        	  }
		       }
			   else
			   {
			        if (P1._TRIG_TYPE == 1)
 80041a2:	4b29      	ldr	r3, [pc, #164]	; (8004248 <PSV_Mode_Task+0x270>)
 80041a4:	88db      	ldrh	r3, [r3, #6]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d147      	bne.n	800423a <PSV_Mode_Task+0x262>
			        {
			         	if (Flow_Sensor_cal._Flow_Val >= (-1) && Flow_Sensor_cal._Flow_Val <= 3)
 80041aa:	4b32      	ldr	r3, [pc, #200]	; (8004274 <PSV_Mode_Task+0x29c>)
 80041ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b2:	db42      	blt.n	800423a <PSV_Mode_Task+0x262>
 80041b4:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <PSV_Mode_Task+0x29c>)
 80041b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	dc3e      	bgt.n	800423a <PSV_Mode_Task+0x262>
			         	{
			         		 P1.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 80041bc:	4b23      	ldr	r3, [pc, #140]	; (800424c <PSV_Mode_Task+0x274>)
 80041be:	791b      	ldrb	r3, [r3, #4]
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c8:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <PSV_Mode_Task+0x270>)
 80041ca:	edc3 7a05 	vstr	s15, [r3, #20]
			if( P1._Apnea_counter_trigger_check_time==0)
 80041ce:	e034      	b.n	800423a <PSV_Mode_Task+0x262>
			         }

			    }
		}

		else if(P1._APNEA_COUNTER == 0)
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <PSV_Mode_Task+0x270>)
 80041d2:	8bdb      	ldrh	r3, [r3, #30]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d131      	bne.n	800423c <PSV_Mode_Task+0x264>
		{
			Trigger=0;
 80041d8:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <PSV_Mode_Task+0x280>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
			P1.PEEP_PSV_DAC_Val=0;
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <PSV_Mode_Task+0x270>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	831a      	strh	r2, [r3, #24]
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, P1.PEEP_PSV_DAC_Val);
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <PSV_Mode_Task+0x270>)
 80041e6:	8b1b      	ldrh	r3, [r3, #24]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2100      	movs	r1, #0
 80041ec:	4819      	ldr	r0, [pc, #100]	; (8004254 <PSV_Mode_Task+0x27c>)
 80041ee:	f003 fd97 	bl	8007d20 <HAL_DAC_SetValue>
			if(_CurrentBackupMode == PCCMV_BACKUP )
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <PSV_Mode_Task+0x290>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d120      	bne.n	800423c <PSV_Mode_Task+0x264>
			{
				_CurrentWaveFormState = Generate_E_Wave;
 80041fa:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <PSV_Mode_Task+0x2a0>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
				_CurrentComputationState = Compute_I_Wave ;
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <PSV_Mode_Task+0x2a4>)
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
				vTaskResume(One_Time_Handler);
 8004206:	4b1e      	ldr	r3, [pc, #120]	; (8004280 <PSV_Mode_Task+0x2a8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f008 ffe4 	bl	800d1d8 <vTaskResume>
			    vTaskResume(Back_Up_PC_CMV_Mode_Handler);
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <PSV_Mode_Task+0x2ac>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f008 ffdf 	bl	800d1d8 <vTaskResume>
			    vTaskResume(PID_Back_Up_PC_CMV_Mode_Handler);
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <PSV_Mode_Task+0x2b0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f008 ffda 	bl	800d1d8 <vTaskResume>
			    vTaskSuspend(Psv_Handler);
 8004224:	4b12      	ldr	r3, [pc, #72]	; (8004270 <PSV_Mode_Task+0x298>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f008 ff11 	bl	800d050 <vTaskSuspend>
			    vTaskSuspend(Psv_Pid_Handler);
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <PSV_Mode_Task+0x294>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f008 ff0c 	bl	800d050 <vTaskSuspend>
 8004238:	e000      	b.n	800423c <PSV_Mode_Task+0x264>
			if( P1._Apnea_counter_trigger_check_time==0)
 800423a:	bf00      	nop
			}
		}
		vTaskDelay(1);
 800423c:	2001      	movs	r0, #1
 800423e:	f008 fed3 	bl	800cfe8 <vTaskDelay>
		if(now_update==1)
 8004242:	e6cd      	b.n	8003fe0 <PSV_Mode_Task+0x8>
 8004244:	20000030 	.word	0x20000030
 8004248:	200045ac 	.word	0x200045ac
 800424c:	200047ac 	.word	0x200047ac
 8004250:	40020400 	.word	0x40020400
 8004254:	20004714 	.word	0x20004714
 8004258:	2000002c 	.word	0x2000002c
 800425c:	2000482c 	.word	0x2000482c
 8004260:	2000479c 	.word	0x2000479c
 8004264:	200048f8 	.word	0x200048f8
 8004268:	20004850 	.word	0x20004850
 800426c:	20004610 	.word	0x20004610
 8004270:	200046d8 	.word	0x200046d8
 8004274:	20004730 	.word	0x20004730
 8004278:	20004642 	.word	0x20004642
 800427c:	20004798 	.word	0x20004798
 8004280:	200047e8 	.word	0x200047e8
 8004284:	200046d0 	.word	0x200046d0
 8004288:	200047e4 	.word	0x200047e4

0800428c <PSV_PARAMETERS>:
}



void PSV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 800428c:	b5b0      	push	{r4, r5, r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	     P1.PIP_PSV_Val = RX_PARAM_CMD_PACKET->_PIP;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	791b      	ldrb	r3, [r3, #4]
 8004298:	b29a      	uxth	r2, r3
 800429a:	4b5b      	ldr	r3, [pc, #364]	; (8004408 <PSV_PARAMETERS+0x17c>)
 800429c:	801a      	strh	r2, [r3, #0]
	     P1.PEEP_PSV_Val = RX_PARAM_CMD_PACKET->_PEEP;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	795a      	ldrb	r2, [r3, #5]
 80042a2:	4b59      	ldr	r3, [pc, #356]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042a4:	709a      	strb	r2, [r3, #2]
	     P1._Apnea_counter_trigger_check_time=3000;
 80042a6:	4b58      	ldr	r3, [pc, #352]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042a8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80042ac:	809a      	strh	r2, [r3, #4]
		 P1._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT)>>4;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7b9b      	ldrb	r3, [r3, #14]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	4b53      	ldr	r3, [pc, #332]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042ba:	80da      	strh	r2, [r3, #6]
		 P1._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	7b9b      	ldrb	r3, [r3, #14]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	4b4f      	ldr	r3, [pc, #316]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042ca:	811a      	strh	r2, [r3, #8]
		 P1._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7adb      	ldrb	r3, [r3, #11]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	4b4b      	ldr	r3, [pc, #300]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042da:	815a      	strh	r2, [r3, #10]
		 P1._TOLERANCE_EWAVE = B2._E_TIMER_HOLD - P1._CALC_TRIG_VAL ;
 80042dc:	4b4b      	ldr	r3, [pc, #300]	; (800440c <PSV_PARAMETERS+0x180>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	4b49      	ldr	r3, [pc, #292]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042e4:	899b      	ldrh	r3, [r3, #12]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042ec:	81da      	strh	r2, [r3, #14]
		 P1._TRIG_WINDOW = P1._TOLERANCE_EWAVE * (((float)P1._TRIG_TIME*10.00)/100.00) ;
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042f0:	89db      	ldrh	r3, [r3, #14]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc f8be 	bl	8000474 <__aeabi_i2d>
 80042f8:	4604      	mov	r4, r0
 80042fa:	460d      	mov	r5, r1
 80042fc:	4b42      	ldr	r3, [pc, #264]	; (8004408 <PSV_PARAMETERS+0x17c>)
 80042fe:	895b      	ldrh	r3, [r3, #10]
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004308:	ee17 0a90 	vmov	r0, s15
 800430c:	f7fc f8c4 	bl	8000498 <__aeabi_f2d>
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <PSV_PARAMETERS+0x184>)
 8004316:	f7fc f917 	bl	8000548 <__aeabi_dmul>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4610      	mov	r0, r2
 8004320:	4619      	mov	r1, r3
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <PSV_PARAMETERS+0x188>)
 8004328:	f7fc fa38 	bl	800079c <__aeabi_ddiv>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4620      	mov	r0, r4
 8004332:	4629      	mov	r1, r5
 8004334:	f7fc f908 	bl	8000548 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	f7fc fbc4 	bl	8000acc <__aeabi_d2uiz>
 8004344:	4603      	mov	r3, r0
 8004346:	b29a      	uxth	r2, r3
 8004348:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <PSV_PARAMETERS+0x17c>)
 800434a:	821a      	strh	r2, [r3, #16]
		 P1._APNEA_TIME = RX_PARAM_CMD_PACKET->_APNEA;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7b5b      	ldrb	r3, [r3, #13]
 8004350:	b29a      	uxth	r2, r3
 8004352:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <PSV_PARAMETERS+0x17c>)
 8004354:	839a      	strh	r2, [r3, #28]
		 P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
 8004356:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <PSV_PARAMETERS+0x17c>)
 8004358:	8b9b      	ldrh	r3, [r3, #28]
 800435a:	461a      	mov	r2, r3
 800435c:	0152      	lsls	r2, r2, #5
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	0092      	lsls	r2, r2, #2
 8004362:	4413      	add	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	b29a      	uxth	r2, r3
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <PSV_PARAMETERS+0x17c>)
 800436a:	83da      	strh	r2, [r3, #30]
		 P1.PEEP_PSV_DAC_Val=call_PIP_PSV_DAC_Val(P1.PEEP_PSV_Val);
 800436c:	4b26      	ldr	r3, [pc, #152]	; (8004408 <PSV_PARAMETERS+0x17c>)
 800436e:	789b      	ldrb	r3, [r3, #2]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f869 	bl	8004448 <call_PIP_PSV_DAC_Val>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <PSV_PARAMETERS+0x17c>)
 800437c:	831a      	strh	r2, [r3, #24]
		// P1.PIP_PSV_DAC_Val=call_PIP_PSV_DAC_Val(P1.PIP_PSV_Val);

		 ExpValve_CLOSE();
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <PSV_PARAMETERS+0x18c>)
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	4a25      	ldr	r2, [pc, #148]	; (8004418 <PSV_PARAMETERS+0x18c>)
 8004384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004388:	6153      	str	r3, [r2, #20]

		 vTaskSuspend(pc_mode_Handler);
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <PSV_PARAMETERS+0x190>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f008 fe5e 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Pc_cmv_Pid_Handler);
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <PSV_PARAMETERS+0x194>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f008 fe59 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Pc_simv_Mode_Handler);
 800439e:	4b21      	ldr	r3, [pc, #132]	; (8004424 <PSV_PARAMETERS+0x198>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f008 fe54 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 80043a8:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <PSV_PARAMETERS+0x19c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f008 fe4f 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Vc_mode_Handler);
 80043b2:	4b1e      	ldr	r3, [pc, #120]	; (800442c <PSV_PARAMETERS+0x1a0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f008 fe4a 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Vc_cmv_Pid_Handler);
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <PSV_PARAMETERS+0x1a4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f008 fe45 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Psv_Handler);
 80043c6:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <PSV_PARAMETERS+0x1a8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f008 fe40 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Vc_simv_mode_Handler);
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <PSV_PARAMETERS+0x1ac>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f008 fe3b 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(Vc_cmv_simv_Pid_Handler);
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <PSV_PARAMETERS+0x1b0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f008 fe36 	bl	800d050 <vTaskSuspend>
		 vTaskSuspend(One_Time_Handler);
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <PSV_PARAMETERS+0x1b4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f008 fe31 	bl	800d050 <vTaskSuspend>
		 vTaskResume(Psv_Handler);
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <PSV_PARAMETERS+0x1a8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f008 fef0 	bl	800d1d8 <vTaskResume>
		 _CurrentMode = PSV;
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <PSV_PARAMETERS+0x1b8>)
 80043fa:	2206      	movs	r2, #6
 80043fc:	701a      	strb	r2, [r3, #0]

}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bdb0      	pop	{r4, r5, r7, pc}
 8004406:	bf00      	nop
 8004408:	200045ac 	.word	0x200045ac
 800440c:	2000479c 	.word	0x2000479c
 8004410:	40240000 	.word	0x40240000
 8004414:	40590000 	.word	0x40590000
 8004418:	40020400 	.word	0x40020400
 800441c:	20004614 	.word	0x20004614
 8004420:	2000460c 	.word	0x2000460c
 8004424:	20004948 	.word	0x20004948
 8004428:	20004960 	.word	0x20004960
 800442c:	2000484c 	.word	0x2000484c
 8004430:	200045a8 	.word	0x200045a8
 8004434:	200046d8 	.word	0x200046d8
 8004438:	20004728 	.word	0x20004728
 800443c:	200048f4 	.word	0x200048f4
 8004440:	200047e8 	.word	0x200047e8
 8004444:	200046e8 	.word	0x200046e8

08004448 <call_PIP_PSV_DAC_Val>:



uint16_t call_PIP_PSV_DAC_Val(int PIP_PSV_Val)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	if(PIP_PSV_Val==1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d103      	bne.n	800445e <call_PIP_PSV_DAC_Val+0x16>
		PIP_PSV_DAC_Val=200;
 8004456:	4b9a      	ldr	r3, [pc, #616]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004458:	22c8      	movs	r2, #200	; 0xc8
 800445a:	801a      	strh	r2, [r3, #0]
 800445c:	e1d9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d104      	bne.n	800446e <call_PIP_PSV_DAC_Val+0x26>
		PIP_PSV_DAC_Val=280;
 8004464:	4b96      	ldr	r3, [pc, #600]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004466:	f44f 728c 	mov.w	r2, #280	; 0x118
 800446a:	801a      	strh	r2, [r3, #0]
 800446c:	e1d1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==3)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d104      	bne.n	800447e <call_PIP_PSV_DAC_Val+0x36>
		PIP_PSV_DAC_Val=350;
 8004474:	4b92      	ldr	r3, [pc, #584]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004476:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	e1c9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==4)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d104      	bne.n	800448e <call_PIP_PSV_DAC_Val+0x46>
		PIP_PSV_DAC_Val=400;
 8004484:	4b8e      	ldr	r3, [pc, #568]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004486:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	e1c1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==5)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d104      	bne.n	800449e <call_PIP_PSV_DAC_Val+0x56>
		PIP_PSV_DAC_Val=450;
 8004494:	4b8a      	ldr	r3, [pc, #552]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004496:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800449a:	801a      	strh	r2, [r3, #0]
 800449c:	e1b9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==6)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b06      	cmp	r3, #6
 80044a2:	d104      	bne.n	80044ae <call_PIP_PSV_DAC_Val+0x66>
		PIP_PSV_DAC_Val=500;
 80044a4:	4b86      	ldr	r3, [pc, #536]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80044a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044aa:	801a      	strh	r2, [r3, #0]
 80044ac:	e1b1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==7)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b07      	cmp	r3, #7
 80044b2:	d104      	bne.n	80044be <call_PIP_PSV_DAC_Val+0x76>
		PIP_PSV_DAC_Val=550;
 80044b4:	4b82      	ldr	r3, [pc, #520]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80044b6:	f240 2226 	movw	r2, #550	; 0x226
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e1a9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==8)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d104      	bne.n	80044ce <call_PIP_PSV_DAC_Val+0x86>
		PIP_PSV_DAC_Val=600;
 80044c4:	4b7e      	ldr	r3, [pc, #504]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80044c6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	e1a1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==9)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d104      	bne.n	80044de <call_PIP_PSV_DAC_Val+0x96>
		PIP_PSV_DAC_Val=630;
 80044d4:	4b7a      	ldr	r3, [pc, #488]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80044d6:	f240 2276 	movw	r2, #630	; 0x276
 80044da:	801a      	strh	r2, [r3, #0]
 80044dc:	e199      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==10)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b0a      	cmp	r3, #10
 80044e2:	d104      	bne.n	80044ee <call_PIP_PSV_DAC_Val+0xa6>
		PIP_PSV_DAC_Val=660;
 80044e4:	4b76      	ldr	r3, [pc, #472]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80044e6:	f44f 7225 	mov.w	r2, #660	; 0x294
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	e191      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==11)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b0b      	cmp	r3, #11
 80044f2:	d104      	bne.n	80044fe <call_PIP_PSV_DAC_Val+0xb6>
		PIP_PSV_DAC_Val=690;
 80044f4:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80044f6:	f240 22b2 	movw	r2, #690	; 0x2b2
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	e189      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==12)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b0c      	cmp	r3, #12
 8004502:	d104      	bne.n	800450e <call_PIP_PSV_DAC_Val+0xc6>
		PIP_PSV_DAC_Val=720;
 8004504:	4b6e      	ldr	r3, [pc, #440]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004506:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e181      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==13)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b0d      	cmp	r3, #13
 8004512:	d104      	bne.n	800451e <call_PIP_PSV_DAC_Val+0xd6>
		PIP_PSV_DAC_Val=750;
 8004514:	4b6a      	ldr	r3, [pc, #424]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004516:	f240 22ee 	movw	r2, #750	; 0x2ee
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e179      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==14)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b0e      	cmp	r3, #14
 8004522:	d104      	bne.n	800452e <call_PIP_PSV_DAC_Val+0xe6>
		PIP_PSV_DAC_Val=780;
 8004524:	4b66      	ldr	r3, [pc, #408]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004526:	f44f 7243 	mov.w	r2, #780	; 0x30c
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	e171      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==15)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b0f      	cmp	r3, #15
 8004532:	d104      	bne.n	800453e <call_PIP_PSV_DAC_Val+0xf6>
		PIP_PSV_DAC_Val=810;
 8004534:	4b62      	ldr	r3, [pc, #392]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004536:	f240 322a 	movw	r2, #810	; 0x32a
 800453a:	801a      	strh	r2, [r3, #0]
 800453c:	e169      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==16)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b10      	cmp	r3, #16
 8004542:	d104      	bne.n	800454e <call_PIP_PSV_DAC_Val+0x106>
		PIP_PSV_DAC_Val=840;
 8004544:	4b5e      	ldr	r3, [pc, #376]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004546:	f44f 7252 	mov.w	r2, #840	; 0x348
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e161      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==17)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b11      	cmp	r3, #17
 8004552:	d104      	bne.n	800455e <call_PIP_PSV_DAC_Val+0x116>
		PIP_PSV_DAC_Val=870;
 8004554:	4b5a      	ldr	r3, [pc, #360]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004556:	f240 3266 	movw	r2, #870	; 0x366
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e159      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==18)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b12      	cmp	r3, #18
 8004562:	d104      	bne.n	800456e <call_PIP_PSV_DAC_Val+0x126>
		PIP_PSV_DAC_Val=900;
 8004564:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004566:	f44f 7261 	mov.w	r2, #900	; 0x384
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	e151      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==19)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b13      	cmp	r3, #19
 8004572:	d104      	bne.n	800457e <call_PIP_PSV_DAC_Val+0x136>
		PIP_PSV_DAC_Val=930;
 8004574:	4b52      	ldr	r3, [pc, #328]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004576:	f240 32a2 	movw	r2, #930	; 0x3a2
 800457a:	801a      	strh	r2, [r3, #0]
 800457c:	e149      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==20)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b14      	cmp	r3, #20
 8004582:	d104      	bne.n	800458e <call_PIP_PSV_DAC_Val+0x146>
		PIP_PSV_DAC_Val=950;
 8004584:	4b4e      	ldr	r3, [pc, #312]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004586:	f240 32b6 	movw	r2, #950	; 0x3b6
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e141      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==21)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b15      	cmp	r3, #21
 8004592:	d104      	bne.n	800459e <call_PIP_PSV_DAC_Val+0x156>
		PIP_PSV_DAC_Val=970;
 8004594:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004596:	f240 32ca 	movw	r2, #970	; 0x3ca
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	e139      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==22)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b16      	cmp	r3, #22
 80045a2:	d104      	bne.n	80045ae <call_PIP_PSV_DAC_Val+0x166>
		PIP_PSV_DAC_Val=990;
 80045a4:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80045a6:	f240 32de 	movw	r2, #990	; 0x3de
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	e131      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==23)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b17      	cmp	r3, #23
 80045b2:	d104      	bne.n	80045be <call_PIP_PSV_DAC_Val+0x176>
		PIP_PSV_DAC_Val=1010;
 80045b4:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80045b6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	e129      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==24)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b18      	cmp	r3, #24
 80045c2:	d104      	bne.n	80045ce <call_PIP_PSV_DAC_Val+0x186>
		PIP_PSV_DAC_Val=1030;
 80045c4:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80045c6:	f240 4206 	movw	r2, #1030	; 0x406
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	e121      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==25)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b19      	cmp	r3, #25
 80045d2:	d104      	bne.n	80045de <call_PIP_PSV_DAC_Val+0x196>
		PIP_PSV_DAC_Val=1050;
 80045d4:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80045d6:	f240 421a 	movw	r2, #1050	; 0x41a
 80045da:	801a      	strh	r2, [r3, #0]
 80045dc:	e119      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==26)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b1a      	cmp	r3, #26
 80045e2:	d104      	bne.n	80045ee <call_PIP_PSV_DAC_Val+0x1a6>
		PIP_PSV_DAC_Val=1080;
 80045e4:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80045e6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e111      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==27)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b1b      	cmp	r3, #27
 80045f2:	d104      	bne.n	80045fe <call_PIP_PSV_DAC_Val+0x1b6>
		PIP_PSV_DAC_Val=1100;
 80045f4:	4b32      	ldr	r3, [pc, #200]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80045f6:	f240 424c 	movw	r2, #1100	; 0x44c
 80045fa:	801a      	strh	r2, [r3, #0]
 80045fc:	e109      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==28)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b1c      	cmp	r3, #28
 8004602:	d104      	bne.n	800460e <call_PIP_PSV_DAC_Val+0x1c6>
		PIP_PSV_DAC_Val=1120;
 8004604:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004606:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	e101      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==29)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b1d      	cmp	r3, #29
 8004612:	d104      	bne.n	800461e <call_PIP_PSV_DAC_Val+0x1d6>
		PIP_PSV_DAC_Val=1140;
 8004614:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004616:	f240 4274 	movw	r2, #1140	; 0x474
 800461a:	801a      	strh	r2, [r3, #0]
 800461c:	e0f9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==30)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b1e      	cmp	r3, #30
 8004622:	d104      	bne.n	800462e <call_PIP_PSV_DAC_Val+0x1e6>
		PIP_PSV_DAC_Val=1160;
 8004624:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004626:	f44f 6291 	mov.w	r2, #1160	; 0x488
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e0f1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==31)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b1f      	cmp	r3, #31
 8004632:	d104      	bne.n	800463e <call_PIP_PSV_DAC_Val+0x1f6>
		PIP_PSV_DAC_Val=1180;
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004636:	f240 429c 	movw	r2, #1180	; 0x49c
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	e0e9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==32)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b20      	cmp	r3, #32
 8004642:	d104      	bne.n	800464e <call_PIP_PSV_DAC_Val+0x206>
		PIP_PSV_DAC_Val=1200;
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004646:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	e0e1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==33)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b21      	cmp	r3, #33	; 0x21
 8004652:	d104      	bne.n	800465e <call_PIP_PSV_DAC_Val+0x216>
		PIP_PSV_DAC_Val=1220;
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004656:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800465a:	801a      	strh	r2, [r3, #0]
 800465c:	e0d9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==34)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b22      	cmp	r3, #34	; 0x22
 8004662:	d104      	bne.n	800466e <call_PIP_PSV_DAC_Val+0x226>
		PIP_PSV_DAC_Val=1240;
 8004664:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004666:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e0d1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	else if(PIP_PSV_Val==35)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b23      	cmp	r3, #35	; 0x23
 8004672:	d104      	bne.n	800467e <call_PIP_PSV_DAC_Val+0x236>
		PIP_PSV_DAC_Val=1260;
 8004674:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004676:	f240 42ec 	movw	r2, #1260	; 0x4ec
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	e0c9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>

	    else if(PIP_PSV_Val==36)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b24      	cmp	r3, #36	; 0x24
 8004682:	d104      	bne.n	800468e <call_PIP_PSV_DAC_Val+0x246>
			PIP_PSV_DAC_Val=1280;
 8004684:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004686:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800468a:	801a      	strh	r2, [r3, #0]
 800468c:	e0c1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==37)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b25      	cmp	r3, #37	; 0x25
 8004692:	d104      	bne.n	800469e <call_PIP_PSV_DAC_Val+0x256>
			PIP_PSV_DAC_Val=1290;
 8004694:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 8004696:	f240 520a 	movw	r2, #1290	; 0x50a
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	e0b9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==38)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b26      	cmp	r3, #38	; 0x26
 80046a2:	d104      	bne.n	80046ae <call_PIP_PSV_DAC_Val+0x266>
			PIP_PSV_DAC_Val=1310;
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80046a6:	f240 521e 	movw	r2, #1310	; 0x51e
 80046aa:	801a      	strh	r2, [r3, #0]
 80046ac:	e0b1      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==39)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b27      	cmp	r3, #39	; 0x27
 80046b2:	d107      	bne.n	80046c4 <call_PIP_PSV_DAC_Val+0x27c>
			PIP_PSV_DAC_Val=1325;
 80046b4:	4b02      	ldr	r3, [pc, #8]	; (80046c0 <call_PIP_PSV_DAC_Val+0x278>)
 80046b6:	f240 522d 	movw	r2, #1325	; 0x52d
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e0a9      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
 80046be:	bf00      	nop
 80046c0:	20004984 	.word	0x20004984
		else if(PIP_PSV_Val==40)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b28      	cmp	r3, #40	; 0x28
 80046c8:	d104      	bne.n	80046d4 <call_PIP_PSV_DAC_Val+0x28c>
			PIP_PSV_DAC_Val=1340;
 80046ca:	4b56      	ldr	r3, [pc, #344]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80046cc:	f240 523c 	movw	r2, #1340	; 0x53c
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	e09e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==41)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b29      	cmp	r3, #41	; 0x29
 80046d8:	d104      	bne.n	80046e4 <call_PIP_PSV_DAC_Val+0x29c>
			PIP_PSV_DAC_Val=1360;
 80046da:	4b52      	ldr	r3, [pc, #328]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80046dc:	f44f 62aa 	mov.w	r2, #1360	; 0x550
 80046e0:	801a      	strh	r2, [r3, #0]
 80046e2:	e096      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==42)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b2a      	cmp	r3, #42	; 0x2a
 80046e8:	d104      	bne.n	80046f4 <call_PIP_PSV_DAC_Val+0x2ac>
			PIP_PSV_DAC_Val=1380;
 80046ea:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80046ec:	f240 5264 	movw	r2, #1380	; 0x564
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e08e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==43)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b2b      	cmp	r3, #43	; 0x2b
 80046f8:	d104      	bne.n	8004704 <call_PIP_PSV_DAC_Val+0x2bc>
			PIP_PSV_DAC_Val=1400;
 80046fa:	4b4a      	ldr	r3, [pc, #296]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80046fc:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8004700:	801a      	strh	r2, [r3, #0]
 8004702:	e086      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==44)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b2c      	cmp	r3, #44	; 0x2c
 8004708:	d104      	bne.n	8004714 <call_PIP_PSV_DAC_Val+0x2cc>
			PIP_PSV_DAC_Val=1420;
 800470a:	4b46      	ldr	r3, [pc, #280]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800470c:	f240 528c 	movw	r2, #1420	; 0x58c
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	e07e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==45)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b2d      	cmp	r3, #45	; 0x2d
 8004718:	d104      	bne.n	8004724 <call_PIP_PSV_DAC_Val+0x2dc>
			PIP_PSV_DAC_Val=1440;
 800471a:	4b42      	ldr	r3, [pc, #264]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800471c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e076      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==46)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b2e      	cmp	r3, #46	; 0x2e
 8004728:	d104      	bne.n	8004734 <call_PIP_PSV_DAC_Val+0x2ec>
			PIP_PSV_DAC_Val=1460;
 800472a:	4b3e      	ldr	r3, [pc, #248]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800472c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	e06e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
	    else if(PIP_PSV_Val==47)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b2f      	cmp	r3, #47	; 0x2f
 8004738:	d104      	bne.n	8004744 <call_PIP_PSV_DAC_Val+0x2fc>
			PIP_PSV_DAC_Val=1470;
 800473a:	4b3a      	ldr	r3, [pc, #232]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800473c:	f240 52be 	movw	r2, #1470	; 0x5be
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	e066      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==48)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b30      	cmp	r3, #48	; 0x30
 8004748:	d104      	bne.n	8004754 <call_PIP_PSV_DAC_Val+0x30c>
			PIP_PSV_DAC_Val=1480;
 800474a:	4b36      	ldr	r3, [pc, #216]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800474c:	f44f 62b9 	mov.w	r2, #1480	; 0x5c8
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	e05e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==49)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b31      	cmp	r3, #49	; 0x31
 8004758:	d104      	bne.n	8004764 <call_PIP_PSV_DAC_Val+0x31c>
			PIP_PSV_DAC_Val=1500;
 800475a:	4b32      	ldr	r3, [pc, #200]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800475c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	e056      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==50)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b32      	cmp	r3, #50	; 0x32
 8004768:	d104      	bne.n	8004774 <call_PIP_PSV_DAC_Val+0x32c>
			PIP_PSV_DAC_Val=1520;
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800476c:	f44f 62be 	mov.w	r2, #1520	; 0x5f0
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e04e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==51)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b33      	cmp	r3, #51	; 0x33
 8004778:	d104      	bne.n	8004784 <call_PIP_PSV_DAC_Val+0x33c>
			PIP_PSV_DAC_Val=1540;
 800477a:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800477c:	f240 6204 	movw	r2, #1540	; 0x604
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e046      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==52)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b34      	cmp	r3, #52	; 0x34
 8004788:	d104      	bne.n	8004794 <call_PIP_PSV_DAC_Val+0x34c>
			PIP_PSV_DAC_Val=1560;
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800478c:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e03e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==53)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b35      	cmp	r3, #53	; 0x35
 8004798:	d104      	bne.n	80047a4 <call_PIP_PSV_DAC_Val+0x35c>
			PIP_PSV_DAC_Val=1570;
 800479a:	4b22      	ldr	r3, [pc, #136]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800479c:	f240 6222 	movw	r2, #1570	; 0x622
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e036      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==54)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b36      	cmp	r3, #54	; 0x36
 80047a8:	d104      	bne.n	80047b4 <call_PIP_PSV_DAC_Val+0x36c>
			PIP_PSV_DAC_Val=1580;
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80047ac:	f240 622c 	movw	r2, #1580	; 0x62c
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	e02e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==55)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b37      	cmp	r3, #55	; 0x37
 80047b8:	d104      	bne.n	80047c4 <call_PIP_PSV_DAC_Val+0x37c>
			PIP_PSV_DAC_Val=1600;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80047bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	e026      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==56)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b38      	cmp	r3, #56	; 0x38
 80047c8:	d104      	bne.n	80047d4 <call_PIP_PSV_DAC_Val+0x38c>
			PIP_PSV_DAC_Val=1610;
 80047ca:	4b16      	ldr	r3, [pc, #88]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80047cc:	f240 624a 	movw	r2, #1610	; 0x64a
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	e01e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==57)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b39      	cmp	r3, #57	; 0x39
 80047d8:	d104      	bne.n	80047e4 <call_PIP_PSV_DAC_Val+0x39c>
			PIP_PSV_DAC_Val=1630;
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80047dc:	f240 625e 	movw	r2, #1630	; 0x65e
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	e016      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==58)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b3a      	cmp	r3, #58	; 0x3a
 80047e8:	d104      	bne.n	80047f4 <call_PIP_PSV_DAC_Val+0x3ac>
			PIP_PSV_DAC_Val=1650;
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80047ec:	f240 6272 	movw	r2, #1650	; 0x672
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	e00e      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==59)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b3b      	cmp	r3, #59	; 0x3b
 80047f8:	d104      	bne.n	8004804 <call_PIP_PSV_DAC_Val+0x3bc>
			PIP_PSV_DAC_Val=1670;
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 80047fc:	f240 6286 	movw	r2, #1670	; 0x686
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	e006      	b.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
		else if(PIP_PSV_Val==60)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b3c      	cmp	r3, #60	; 0x3c
 8004808:	d103      	bne.n	8004812 <call_PIP_PSV_DAC_Val+0x3ca>
			PIP_PSV_DAC_Val=1680;
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 800480c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8004810:	801a      	strh	r2, [r3, #0]


	return PIP_PSV_DAC_Val;
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <call_PIP_PSV_DAC_Val+0x3dc>)
 8004814:	881b      	ldrh	r3, [r3, #0]

}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20004984 	.word	0x20004984

08004828 <PSV_PID_Task>:



void PSV_PID_Task (void *argument)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		if(_I_TIMER>0)
 8004830:	4b16      	ldr	r3, [pc, #88]	; (800488c <PSV_PID_Task+0x64>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <PSV_PID_Task+0x20>
		{

			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, P1.PIP_PSV_DAC_Val);
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <PSV_PID_Task+0x68>)
 800483a:	8b5b      	ldrh	r3, [r3, #26]
 800483c:	2200      	movs	r2, #0
 800483e:	2100      	movs	r1, #0
 8004840:	4814      	ldr	r0, [pc, #80]	; (8004894 <PSV_PID_Task+0x6c>)
 8004842:	f003 fa6d 	bl	8007d20 <HAL_DAC_SetValue>
 8004846:	e01d      	b.n	8004884 <PSV_PID_Task+0x5c>
		}
		else if(_I_TIMER==0)
 8004848:	4b10      	ldr	r3, [pc, #64]	; (800488c <PSV_PID_Task+0x64>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d119      	bne.n	8004884 <PSV_PID_Task+0x5c>
		{
			P1.PIP_PSV_DAC_Val=0;
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <PSV_PID_Task+0x68>)
 8004852:	2200      	movs	r2, #0
 8004854:	835a      	strh	r2, [r3, #26]
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, P1.PIP_PSV_DAC_Val);
 8004856:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <PSV_PID_Task+0x68>)
 8004858:	8b5b      	ldrh	r3, [r3, #26]
 800485a:	2200      	movs	r2, #0
 800485c:	2100      	movs	r1, #0
 800485e:	480d      	ldr	r0, [pc, #52]	; (8004894 <PSV_PID_Task+0x6c>)
 8004860:	f003 fa5e 	bl	8007d20 <HAL_DAC_SetValue>

			//P1._APNEA_COUNTER = (1000*P1._APNEA_TIME) ;
			//P1.PEEP_PSV_DAC_Val=call_PIP_PSV_DAC_Val(P1.PEEP_PSV_Val);
			//P1._Apnea_counter_trigger_check_time=3000;
			Trigger=0;
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <PSV_PID_Task+0x70>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
			now_update=1;
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <PSV_PID_Task+0x74>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
			vTaskResume(Psv_Handler);
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <PSV_PID_Task+0x78>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f008 fcaf 	bl	800d1d8 <vTaskResume>
			vTaskSuspend(Psv_Pid_Handler);
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <PSV_PID_Task+0x7c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f008 fbe6 	bl	800d050 <vTaskSuspend>
		}


		vTaskDelay(1);
 8004884:	2001      	movs	r0, #1
 8004886:	f008 fbaf 	bl	800cfe8 <vTaskDelay>
		if(_I_TIMER>0)
 800488a:	e7d1      	b.n	8004830 <PSV_PID_Task+0x8>
 800488c:	200048f8 	.word	0x200048f8
 8004890:	200045ac 	.word	0x200045ac
 8004894:	20004714 	.word	0x20004714
 8004898:	2000002c 	.word	0x2000002c
 800489c:	20000030 	.word	0x20000030
 80048a0:	200046d8 	.word	0x200046d8
 80048a4:	20004610 	.word	0x20004610

080048a8 <Uart_Transmit_Task>:

#include "Uart.h"


void Uart_Transmit_Task (void *argument)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	while (1)
	{

		UART_Transmit();
 80048b0:	f000 f822 	bl	80048f8 <UART_Transmit>
		vTaskDelay(20);
 80048b4:	2014      	movs	r0, #20
 80048b6:	f008 fb97 	bl	800cfe8 <vTaskDelay>
		UART_Transmit();
 80048ba:	e7f9      	b.n	80048b0 <Uart_Transmit_Task+0x8>

080048bc <chksum8>:
    }
}

uint8_t chksum8(const unsigned char *buff, size_t len)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
    unsigned int sum;
    for ( sum = 0 ; len != 0 ; len-- )
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e00a      	b.n	80048e2 <chksum8+0x26>
        sum += *(buff++);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
    for ( sum = 0 ; len != 0 ; len-- )
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	3b01      	subs	r3, #1
 80048e0:	603b      	str	r3, [r7, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f1      	bne.n	80048cc <chksum8+0x10>
    return (uint8_t)sum;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	b2db      	uxtb	r3, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <UART_Transmit>:

void UART_Transmit()
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0

	            _CYCLIC_TRANSMIT_PKT._header          = 0x5052 ;
 80048fc:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <UART_Transmit+0x78>)
 80048fe:	2200      	movs	r2, #0
 8004900:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800490c:	705a      	strb	r2, [r3, #1]
		  		_CYCLIC_TRANSMIT_PKT._length          = sizeof(_CYCLIC_TRANSMIT_PKT)-4 ;
 800490e:	4b18      	ldr	r3, [pc, #96]	; (8004970 <UART_Transmit+0x78>)
 8004910:	2208      	movs	r2, #8
 8004912:	709a      	strb	r2, [r3, #2]
		  		_CYCLIC_TRANSMIT_PKT._Pressure_Val    = Pressure_sensor._Pressure_Val ;
 8004914:	4b17      	ldr	r3, [pc, #92]	; (8004974 <UART_Transmit+0x7c>)
 8004916:	791a      	ldrb	r2, [r3, #4]
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <UART_Transmit+0x78>)
 800491a:	70da      	strb	r2, [r3, #3]
		  		_CYCLIC_TRANSMIT_PKT._Flow_Val        = Flow_Sensor_cal._Flow_Val ;
 800491c:	4b16      	ldr	r3, [pc, #88]	; (8004978 <UART_Transmit+0x80>)
 800491e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004920:	b21a      	sxth	r2, r3
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <UART_Transmit+0x78>)
 8004924:	809a      	strh	r2, [r3, #4]
		  		_CYCLIC_TRANSMIT_PKT._Volume_Val      = vol.Volume ;
 8004926:	4b15      	ldr	r3, [pc, #84]	; (800497c <UART_Transmit+0x84>)
 8004928:	edd3 7a01 	vldr	s15, [r3, #4]
 800492c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004930:	ee17 3a90 	vmov	r3, s15
 8004934:	b21a      	sxth	r2, r3
 8004936:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <UART_Transmit+0x78>)
 8004938:	80da      	strh	r2, [r3, #6]
		  		_CYCLIC_TRANSMIT_PKT._Control_Byte    = _Control_Byte ;
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <UART_Transmit+0x88>)
 800493c:	781a      	ldrb	r2, [r3, #0]
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <UART_Transmit+0x78>)
 8004940:	721a      	strb	r2, [r3, #8]
		  		_CYCLIC_TRANSMIT_PKT._SPO2            = 0 ;
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <UART_Transmit+0x78>)
 8004944:	2200      	movs	r2, #0
 8004946:	725a      	strb	r2, [r3, #9]
		  		_CYCLIC_TRANSMIT_PKT._Heart_BPM       = 0 ;
 8004948:	4b09      	ldr	r3, [pc, #36]	; (8004970 <UART_Transmit+0x78>)
 800494a:	2200      	movs	r2, #0
 800494c:	729a      	strb	r2, [r3, #10]
		  		_CYCLIC_TRANSMIT_PKT._CRC8            = chksum8(&_CYCLIC_TRANSMIT_PKT._Pressure_Val,_CYCLIC_TRANSMIT_PKT._length); ;
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <UART_Transmit+0x78>)
 8004950:	789b      	ldrb	r3, [r3, #2]
 8004952:	4619      	mov	r1, r3
 8004954:	480b      	ldr	r0, [pc, #44]	; (8004984 <UART_Transmit+0x8c>)
 8004956:	f7ff ffb1 	bl	80048bc <chksum8>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <UART_Transmit+0x78>)
 8004960:	72da      	strb	r2, [r3, #11]
#if UART==6
		  	HAL_UART_Transmit_IT(&huart6,(uint8_t*)&_CYCLIC_TRANSMIT_PKT,sizeof(_CYCLIC_TRANSMIT_PKT));
 8004962:	220c      	movs	r2, #12
 8004964:	4902      	ldr	r1, [pc, #8]	; (8004970 <UART_Transmit+0x78>)
 8004966:	4808      	ldr	r0, [pc, #32]	; (8004988 <UART_Transmit+0x90>)
 8004968:	f006 fc84 	bl	800b274 <HAL_UART_Transmit_IT>
#endif
#if UART==5
		  	HAL_UART_Transmit_IT(&huart5,(uint8_t*)&_CYCLIC_TRANSMIT_PKT,sizeof(_CYCLIC_TRANSMIT_PKT));
#endif
}
 800496c:	bf00      	nop
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20004530 	.word	0x20004530
 8004974:	200047ac 	.word	0x200047ac
 8004978:	20004730 	.word	0x20004730
 800497c:	2000482c 	.word	0x2000482c
 8004980:	20004944 	.word	0x20004944
 8004984:	20004533 	.word	0x20004533
 8004988:	200048ac 	.word	0x200048ac

0800498c <COMMAND_HANDLER_GRAPH>:




void COMMAND_HANDLER_GRAPH(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

	       S1._Mode_Val = 0x0F & (RX_PARAM_CMD_PACKET->_mode) ;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	78db      	ldrb	r3, [r3, #3]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <COMMAND_HANDLER_GRAPH+0xec>)
 80049a0:	701a      	strb	r2, [r3, #0]
	       S1._Pause = (0x10 & (RX_PARAM_CMD_PACKET->_mode))>>4;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	78db      	ldrb	r3, [r3, #3]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <COMMAND_HANDLER_GRAPH+0xec>)
 80049b2:	705a      	strb	r2, [r3, #1]


	       if(S1._Pause==1)
 80049b4:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <COMMAND_HANDLER_GRAPH+0xec>)
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d125      	bne.n	8004a08 <COMMAND_HANDLER_GRAPH+0x7c>
	       {

	    	   vTaskSuspend(pc_mode_Handler);
 80049bc:	4b2f      	ldr	r3, [pc, #188]	; (8004a7c <COMMAND_HANDLER_GRAPH+0xf0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f008 fb45 	bl	800d050 <vTaskSuspend>
	    	   vTaskSuspend(Pc_cmv_Pid_Handler);
 80049c6:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <COMMAND_HANDLER_GRAPH+0xf4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f008 fb40 	bl	800d050 <vTaskSuspend>
	    	   vTaskSuspend(Vc_mode_Handler);
 80049d0:	4b2c      	ldr	r3, [pc, #176]	; (8004a84 <COMMAND_HANDLER_GRAPH+0xf8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f008 fb3b 	bl	800d050 <vTaskSuspend>
	    	   vTaskSuspend(Vc_cmv_Pid_Handler);
 80049da:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <COMMAND_HANDLER_GRAPH+0xfc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f008 fb36 	bl	800d050 <vTaskSuspend>
	    	   vTaskSuspend(Pc_simv_Mode_Handler);
 80049e4:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <COMMAND_HANDLER_GRAPH+0x100>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f008 fb31 	bl	800d050 <vTaskSuspend>
			   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049f4:	4826      	ldr	r0, [pc, #152]	; (8004a90 <COMMAND_HANDLER_GRAPH+0x104>)
 80049f6:	f003 ffb9 	bl	800896c <HAL_GPIO_WritePin>
			   HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80049fa:	2300      	movs	r3, #0
 80049fc:	2200      	movs	r2, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	4824      	ldr	r0, [pc, #144]	; (8004a94 <COMMAND_HANDLER_GRAPH+0x108>)
 8004a02:	f003 f98d 	bl	8007d20 <HAL_DAC_SetValue>
						break;
				}
	       }


}
 8004a06:	e032      	b.n	8004a6e <COMMAND_HANDLER_GRAPH+0xe2>
				switch(S1._Mode_Val)
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <COMMAND_HANDLER_GRAPH+0xec>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d82c      	bhi.n	8004a6c <COMMAND_HANDLER_GRAPH+0xe0>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <COMMAND_HANDLER_GRAPH+0x8c>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a4d 	.word	0x08004a4d
 8004a24:	08004a55 	.word	0x08004a55
 8004a28:	08004a6d 	.word	0x08004a6d
 8004a2c:	08004a5d 	.word	0x08004a5d
 8004a30:	08004a6d 	.word	0x08004a6d
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a65 	.word	0x08004a65
						PC_CMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004a3c:	4816      	ldr	r0, [pc, #88]	; (8004a98 <COMMAND_HANDLER_GRAPH+0x10c>)
 8004a3e:	f7fe fdd7 	bl	80035f0 <PC_CMV_PARAMETERS>
						break;
 8004a42:	e014      	b.n	8004a6e <COMMAND_HANDLER_GRAPH+0xe2>
						VC_CMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004a44:	4814      	ldr	r0, [pc, #80]	; (8004a98 <COMMAND_HANDLER_GRAPH+0x10c>)
 8004a46:	f000 ff65 	bl	8005914 <VC_CMV_PARAMETERS>
						break;
 8004a4a:	e010      	b.n	8004a6e <COMMAND_HANDLER_GRAPH+0xe2>
						PC_SIMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004a4c:	4812      	ldr	r0, [pc, #72]	; (8004a98 <COMMAND_HANDLER_GRAPH+0x10c>)
 8004a4e:	f7fd ffbf 	bl	80029d0 <PC_SIMV_PARAMETERS>
						break;
 8004a52:	e00c      	b.n	8004a6e <COMMAND_HANDLER_GRAPH+0xe2>
						VC_SIMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004a54:	4810      	ldr	r0, [pc, #64]	; (8004a98 <COMMAND_HANDLER_GRAPH+0x10c>)
 8004a56:	f000 fac7 	bl	8004fe8 <VC_SIMV_PARAMETERS>
						break;
 8004a5a:	e008      	b.n	8004a6e <COMMAND_HANDLER_GRAPH+0xe2>
						PSV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004a5c:	480e      	ldr	r0, [pc, #56]	; (8004a98 <COMMAND_HANDLER_GRAPH+0x10c>)
 8004a5e:	f7ff fc15 	bl	800428c <PSV_PARAMETERS>
						break;
 8004a62:	e004      	b.n	8004a6e <COMMAND_HANDLER_GRAPH+0xe2>
						BACKUP_PC_CMV_PARAMETERS((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004a64:	480c      	ldr	r0, [pc, #48]	; (8004a98 <COMMAND_HANDLER_GRAPH+0x10c>)
 8004a66:	f7fc fcc7 	bl	80013f8 <BACKUP_PC_CMV_PARAMETERS>
						break;
 8004a6a:	e000      	b.n	8004a6e <COMMAND_HANDLER_GRAPH+0xe2>
						break;
 8004a6c:	bf00      	nop
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20004644 	.word	0x20004644
 8004a7c:	20004614 	.word	0x20004614
 8004a80:	2000460c 	.word	0x2000460c
 8004a84:	2000484c 	.word	0x2000484c
 8004a88:	200045a8 	.word	0x200045a8
 8004a8c:	20004948 	.word	0x20004948
 8004a90:	40020400 	.word	0x40020400
 8004a94:	20004714 	.word	0x20004714
 8004a98:	200047d0 	.word	0x200047d0

08004a9c <COMMAND_HANDLER>:

void COMMAND_HANDLER(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

	uint8_t _RX_CRC8 ;
	_RX_CRC8 = chksum8(&UART_RX_BUF[3],((((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_length)));
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <COMMAND_HANDLER+0x40>)
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	480d      	ldr	r0, [pc, #52]	; (8004ae0 <COMMAND_HANDLER+0x44>)
 8004aac:	f7ff ff06 	bl	80048bc <chksum8>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
	if(_RX_CRC8 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_CRC8)
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <COMMAND_HANDLER+0x40>)
 8004ab6:	7c1b      	ldrb	r3, [r3, #16]
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d109      	bne.n	8004ad2 <COMMAND_HANDLER+0x36>
	{
		if ((0x5053 == ((SET_PARAM_CMD_PACKET*) (UART_RX_BUF))->_header))
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <COMMAND_HANDLER+0x40>)
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f245 0253 	movw	r2, #20563	; 0x5053
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d102      	bne.n	8004ad2 <COMMAND_HANDLER+0x36>
		{
			 COMMAND_HANDLER_GRAPH((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004acc:	4803      	ldr	r0, [pc, #12]	; (8004adc <COMMAND_HANDLER+0x40>)
 8004ace:	f7ff ff5d 	bl	800498c <COMMAND_HANDLER_GRAPH>
		}

	}
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	200047d0 	.word	0x200047d0
 8004ae0:	200047d3 	.word	0x200047d3

08004ae4 <Receiver_Task>:


void Receiver_Task (void *argument)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	while (1)
	{

		if (xQueueReceive(Uart_Receive, &UART_RX_BUF, portMAX_DELAY) == pdTRUE)
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <Receiver_Task+0x28>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	4906      	ldr	r1, [pc, #24]	; (8004b10 <Receiver_Task+0x2c>)
 8004af6:	4618      	mov	r0, r3
 8004af8:	f007 fe04 	bl	800c704 <xQueueReceive>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d1f4      	bne.n	8004aec <Receiver_Task+0x8>
		{
			COMMAND_HANDLER((SET_PARAM_CMD_PACKET*) (UART_RX_BUF));
 8004b02:	4803      	ldr	r0, [pc, #12]	; (8004b10 <Receiver_Task+0x2c>)
 8004b04:	f7ff ffca 	bl	8004a9c <COMMAND_HANDLER>
		if (xQueueReceive(Uart_Receive, &UART_RX_BUF, portMAX_DELAY) == pdTRUE)
 8004b08:	e7f0      	b.n	8004aec <Receiver_Task+0x8>
 8004b0a:	bf00      	nop
 8004b0c:	20004868 	.word	0x20004868
 8004b10:	200047d0 	.word	0x200047d0

08004b14 <HAL_UART_RxCpltCallback>:
		}

   }
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
#if UART==6
	HAL_UART_Receive_IT(&huart6,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
 8004b1c:	2211      	movs	r2, #17
 8004b1e:	490e      	ldr	r1, [pc, #56]	; (8004b58 <HAL_UART_RxCpltCallback+0x44>)
 8004b20:	480e      	ldr	r0, [pc, #56]	; (8004b5c <HAL_UART_RxCpltCallback+0x48>)
 8004b22:	f006 fbec 	bl	800b2fe <HAL_UART_Receive_IT>
#endif
#if UART==5
	HAL_UART_Receive_IT(&huart5,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
#endif
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
	xQueueSendToFrontFromISR(Uart_Receive, &UART_RX_BUF, &xHigherPriorityTaskWoken);
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <HAL_UART_RxCpltCallback+0x4c>)
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	f107 020c 	add.w	r2, r7, #12
 8004b32:	2301      	movs	r3, #1
 8004b34:	4908      	ldr	r1, [pc, #32]	; (8004b58 <HAL_UART_RxCpltCallback+0x44>)
 8004b36:	f007 fd49 	bl	800c5cc <xQueueGenericSendFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <HAL_UART_RxCpltCallback+0x3c>
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_UART_RxCpltCallback+0x50>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200047d0 	.word	0x200047d0
 8004b5c:	200048ac 	.word	0x200048ac
 8004b60:	20004868 	.word	0x20004868
 8004b64:	e000ed04 	.word	0xe000ed04

08004b68 <VC_SIMV_Task>:
#include "Vc_SIMV.h"



void VC_SIMV_Task(void *argument)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]


	while (1)
	{
		        switch (_CurrentComputationState)
 8004b70:	4b6b      	ldr	r3, [pc, #428]	; (8004d20 <VC_SIMV_Task+0x1b8>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	f000 80cc 	beq.w	8004d12 <VC_SIMV_Task+0x1aa>
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	f300 80cb 	bgt.w	8004d16 <VC_SIMV_Task+0x1ae>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <VC_SIMV_Task+0x22>
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d011      	beq.n	8004bac <VC_SIMV_Task+0x44>

						break;
						case NoComputeState:
						break;
						default:
						break;
 8004b88:	e0c5      	b.n	8004d16 <VC_SIMV_Task+0x1ae>
							ExpValve_CLOSE();
 8004b8a:	4b66      	ldr	r3, [pc, #408]	; (8004d24 <VC_SIMV_Task+0x1bc>)
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	4a65      	ldr	r2, [pc, #404]	; (8004d24 <VC_SIMV_Task+0x1bc>)
 8004b90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b94:	6153      	str	r3, [r2, #20]
							Blower_Signal( R4._DAC_VAL0);
 8004b96:	4b64      	ldr	r3, [pc, #400]	; (8004d28 <VC_SIMV_Task+0x1c0>)
 8004b98:	891a      	ldrh	r2, [r3, #8]
 8004b9a:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <VC_SIMV_Task+0x1c4>)
 8004b9c:	609a      	str	r2, [r3, #8]
							S5.peep_process_done=0;
 8004b9e:	4b64      	ldr	r3, [pc, #400]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	; 0x44
							S5.lock=1;
 8004ba4:	4b62      	ldr	r3, [pc, #392]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c
						break;
 8004baa:	e0b7      	b.n	8004d1c <VC_SIMV_Task+0x1b4>
							R4._DAC_VAL0=0;
 8004bac:	4b5e      	ldr	r3, [pc, #376]	; (8004d28 <VC_SIMV_Task+0x1c0>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	811a      	strh	r2, [r3, #8]
							Blower_Signal( R4._DAC_VAL0);
 8004bb2:	4b5d      	ldr	r3, [pc, #372]	; (8004d28 <VC_SIMV_Task+0x1c0>)
 8004bb4:	891a      	ldrh	r2, [r3, #8]
 8004bb6:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <VC_SIMV_Task+0x1c4>)
 8004bb8:	609a      	str	r2, [r3, #8]
									if(S5.peep_process_done==1)
 8004bba:	4b5d      	ldr	r3, [pc, #372]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d116      	bne.n	8004bf0 <VC_SIMV_Task+0x88>
											if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 8004bc2:	4b5c      	ldr	r3, [pc, #368]	; (8004d34 <VC_SIMV_Task+0x1cc>)
 8004bc4:	791b      	ldrb	r3, [r3, #4]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bce:	4b58      	ldr	r3, [pc, #352]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004bd0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bdc:	d504      	bpl.n	8004be8 <VC_SIMV_Task+0x80>
												Blower_Signal( R4._DAC_VAL0);
 8004bde:	4b52      	ldr	r3, [pc, #328]	; (8004d28 <VC_SIMV_Task+0x1c0>)
 8004be0:	891a      	ldrh	r2, [r3, #8]
 8004be2:	4b52      	ldr	r3, [pc, #328]	; (8004d2c <VC_SIMV_Task+0x1c4>)
 8004be4:	609a      	str	r2, [r3, #8]
 8004be6:	e003      	b.n	8004bf0 <VC_SIMV_Task+0x88>
												Blower_Signal( R4._DAC_VAL0);
 8004be8:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <VC_SIMV_Task+0x1c0>)
 8004bea:	891a      	ldrh	r2, [r3, #8]
 8004bec:	4b4f      	ldr	r3, [pc, #316]	; (8004d2c <VC_SIMV_Task+0x1c4>)
 8004bee:	609a      	str	r2, [r3, #8]
									if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 8004bf0:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <VC_SIMV_Task+0x1cc>)
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bfc:	4b4c      	ldr	r3, [pc, #304]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004bfe:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0a:	d815      	bhi.n	8004c38 <VC_SIMV_Task+0xd0>
										if(S5.lock==1)
 8004c0c:	4b48      	ldr	r3, [pc, #288]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <VC_SIMV_Task+0xbc>
											S5.lock=0;
 8004c14:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c
											vTaskDelay(S5.Lock_delay);
 8004c1a:	4b45      	ldr	r3, [pc, #276]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004c1c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f008 f9e2 	bl	800cfe8 <vTaskDelay>
										S5.peep_process_done=1;
 8004c24:	4b42      	ldr	r3, [pc, #264]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
										ExpValve_CLOSE();
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <VC_SIMV_Task+0x1bc>)
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	4a3d      	ldr	r2, [pc, #244]	; (8004d24 <VC_SIMV_Task+0x1bc>)
 8004c30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c34:	6153      	str	r3, [r2, #20]
 8004c36:	e009      	b.n	8004c4c <VC_SIMV_Task+0xe4>
									else if(S5.peep_process_done==0)
 8004c38:	4b3d      	ldr	r3, [pc, #244]	; (8004d30 <VC_SIMV_Task+0x1c8>)
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d105      	bne.n	8004c4c <VC_SIMV_Task+0xe4>
										ExpValve_OPEN();
 8004c40:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <VC_SIMV_Task+0x1bc>)
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	4a37      	ldr	r2, [pc, #220]	; (8004d24 <VC_SIMV_Task+0x1bc>)
 8004c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c4a:	6153      	str	r3, [r2, #20]
									if (_E_TIMER <= (R6._TRIG_WINDOW) && _E_TIMER != 0)
 8004c4c:	4b3a      	ldr	r3, [pc, #232]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004c4e:	895b      	ldrh	r3, [r3, #10]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <VC_SIMV_Task+0x1d4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d347      	bcc.n	8004cea <VC_SIMV_Task+0x182>
 8004c5a:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <VC_SIMV_Task+0x1d4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d043      	beq.n	8004cea <VC_SIMV_Task+0x182>
										if (R6._TRIG_TYPE == 1)
 8004c62:	4b35      	ldr	r3, [pc, #212]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004c64:	881b      	ldrh	r3, [r3, #0]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d12f      	bne.n	8004cca <VC_SIMV_Task+0x162>
											if ((Pressure_sensor._Pressure_Val> (R6.simv_trigger_offset + R6._TRIG_LMT))|| (Pressure_sensor._Pressure_Val< (R6.simv_trigger_offset - R6._TRIG_LMT)))
 8004c6a:	4b32      	ldr	r3, [pc, #200]	; (8004d34 <VC_SIMV_Task+0x1cc>)
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c76:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004c78:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c7c:	4b2e      	ldr	r3, [pc, #184]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004c7e:	885b      	ldrh	r3, [r3, #2]
 8004c80:	ee07 3a90 	vmov	s15, r3
 8004c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	dc16      	bgt.n	8004cc4 <VC_SIMV_Task+0x15c>
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <VC_SIMV_Task+0x1cc>)
 8004c98:	791b      	ldrb	r3, [r3, #4]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ca2:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004ca4:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ca8:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004caa:	885b      	ldrh	r3, [r3, #2]
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	d400      	bmi.n	8004cc4 <VC_SIMV_Task+0x15c>
										if (R6._TRIG_TYPE == 1)
 8004cc2:	e024      	b.n	8004d0e <VC_SIMV_Task+0x1a6>
												Switch_TASK_I_CYCLE();
 8004cc4:	f7fd fcde 	bl	8002684 <Switch_TASK_I_CYCLE>
										if (R6._TRIG_TYPE == 1)
 8004cc8:	e021      	b.n	8004d0e <VC_SIMV_Task+0x1a6>
											if ((Flow_Sensor_cal._Flow_Val > (R6._TRIG_LMT))|| (Flow_Sensor_cal._Flow_Val < (R6._TRIG_LMT * -1)))
 8004cca:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <VC_SIMV_Task+0x1d8>)
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	4a1a      	ldr	r2, [pc, #104]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004cd0:	8852      	ldrh	r2, [r2, #2]
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	dc06      	bgt.n	8004ce4 <VC_SIMV_Task+0x17c>
 8004cd6:	4b1a      	ldr	r3, [pc, #104]	; (8004d40 <VC_SIMV_Task+0x1d8>)
 8004cd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cda:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004cdc:	885b      	ldrh	r3, [r3, #2]
 8004cde:	425b      	negs	r3, r3
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	da14      	bge.n	8004d0e <VC_SIMV_Task+0x1a6>
												Switch_TASK_I_CYCLE();
 8004ce4:	f7fd fcce 	bl	8002684 <Switch_TASK_I_CYCLE>
										if (R6._TRIG_TYPE == 1)
 8004ce8:	e011      	b.n	8004d0e <VC_SIMV_Task+0x1a6>
										if (R6._TRIG_TYPE == 1)
 8004cea:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d113      	bne.n	8004d1a <VC_SIMV_Task+0x1b2>
											if (Flow_Sensor_cal._Flow_Val == 0)
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <VC_SIMV_Task+0x1d8>)
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10f      	bne.n	8004d1a <VC_SIMV_Task+0x1b2>
												R6.simv_trigger_offset = Pressure_sensor._Pressure_Val;
 8004cfa:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <VC_SIMV_Task+0x1cc>)
 8004cfc:	791b      	ldrb	r3, [r3, #4]
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <VC_SIMV_Task+0x1d0>)
 8004d08:	edc3 7a03 	vstr	s15, [r3, #12]
						break;
 8004d0c:	e005      	b.n	8004d1a <VC_SIMV_Task+0x1b2>
										if (R6._TRIG_TYPE == 1)
 8004d0e:	bf00      	nop
						break;
 8004d10:	e003      	b.n	8004d1a <VC_SIMV_Task+0x1b2>
						break;
 8004d12:	bf00      	nop
 8004d14:	e72c      	b.n	8004b70 <VC_SIMV_Task+0x8>
						break;
 8004d16:	bf00      	nop
 8004d18:	e72a      	b.n	8004b70 <VC_SIMV_Task+0x8>
						break;
 8004d1a:	bf00      	nop
		        switch (_CurrentComputationState)
 8004d1c:	e728      	b.n	8004b70 <VC_SIMV_Task+0x8>
 8004d1e:	bf00      	nop
 8004d20:	20004798 	.word	0x20004798
 8004d24:	40020400 	.word	0x40020400
 8004d28:	20004670 	.word	0x20004670
 8004d2c:	40007400 	.word	0x40007400
 8004d30:	200048fc 	.word	0x200048fc
 8004d34:	200047ac 	.word	0x200047ac
 8004d38:	2000465c 	.word	0x2000465c
 8004d3c:	20004848 	.word	0x20004848
 8004d40:	20004730 	.word	0x20004730

08004d44 <VC_SIMV_PID_Task>:




void VC_SIMV_PID_Task(void *argument)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]


	while (1)
	{
		if(S1._Mode_Val == 4 )
 8004d4c:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <VC_SIMV_PID_Task+0x5c>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d11e      	bne.n	8004d92 <VC_SIMV_PID_Task+0x4e>
		{
			if(_CurrentComputationState==Compute_I_Wave)
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <VC_SIMV_PID_Task+0x60>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <VC_SIMV_PID_Task+0x1e>
			{
				 volume_task_SIMV();
 8004d5c:	f000 faa8 	bl	80052b0 <volume_task_SIMV>
 8004d60:	e017      	b.n	8004d92 <VC_SIMV_PID_Task+0x4e>

			}
			else if(_CurrentComputationState==Compute_E_Wave)
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <VC_SIMV_PID_Task+0x60>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d113      	bne.n	8004d92 <VC_SIMV_PID_Task+0x4e>
			{
				if(Ach_vol==1)
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <VC_SIMV_PID_Task+0x64>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10c      	bne.n	8004d8c <VC_SIMV_PID_Task+0x48>
				{
					Acheived_Volume=vol.Volume;
 8004d72:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <VC_SIMV_PID_Task+0x68>)
 8004d74:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d7c:	ee17 3a90 	vmov	r3, s15
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <VC_SIMV_PID_Task+0x6c>)
 8004d84:	801a      	strh	r2, [r3, #0]
					Ach_vol=0;
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <VC_SIMV_PID_Task+0x64>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
				}
				R4._DAC_VAL0=0;
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <VC_SIMV_PID_Task+0x70>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	811a      	strh	r2, [r3, #8]
			}
		}
		vTaskDelay(R4.PID_task_delay);
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <VC_SIMV_PID_Task+0x70>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f008 f926 	bl	800cfe8 <vTaskDelay>
		if(S1._Mode_Val == 4 )
 8004d9c:	e7d6      	b.n	8004d4c <VC_SIMV_PID_Task+0x8>
 8004d9e:	bf00      	nop
 8004da0:	20004644 	.word	0x20004644
 8004da4:	20004798 	.word	0x20004798
 8004da8:	20004980 	.word	0x20004980
 8004dac:	2000482c 	.word	0x2000482c
 8004db0:	20004640 	.word	0x20004640
 8004db4:	20004670 	.word	0x20004670

08004db8 <VC_SIMV_Pulse_I_Parameter>:




void VC_SIMV_Pulse_I_Parameter()
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dc2:	4865      	ldr	r0, [pc, #404]	; (8004f58 <VC_SIMV_Pulse_I_Parameter+0x1a0>)
 8004dc4:	f003 fdd2 	bl	800896c <HAL_GPIO_WritePin>
	_I_TIMER_ACHEIVED = 0;
 8004dc8:	4b64      	ldr	r3, [pc, #400]	; (8004f5c <VC_SIMV_Pulse_I_Parameter+0x1a4>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	801a      	strh	r2, [r3, #0]

	               if (R4.F_max > (R1._Flow_Rate +10))
 8004dce:	4b64      	ldr	r3, [pc, #400]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b64      	ldr	r3, [pc, #400]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004dd4:	8a1b      	ldrh	r3, [r3, #16]
 8004dd6:	330a      	adds	r3, #10
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	dd46      	ble.n	8004e6a <VC_SIMV_Pulse_I_Parameter+0xb2>
					{
						if (R4.F_max > (R1._Flow_Rate + 20))
 8004ddc:	4b60      	ldr	r3, [pc, #384]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4b60      	ldr	r3, [pc, #384]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004de2:	8a1b      	ldrh	r3, [r3, #16]
 8004de4:	3314      	adds	r3, #20
 8004de6:	429a      	cmp	r2, r3
 8004de8:	dd06      	ble.n	8004df8 <VC_SIMV_Pulse_I_Parameter+0x40>
						{
							R4.temp_dac = R4.temp_dac_new - 20;
 8004dea:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004dec:	88db      	ldrh	r3, [r3, #6]
 8004dee:	3b14      	subs	r3, #20
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004df4:	809a      	strh	r2, [r3, #4]
 8004df6:	e02a      	b.n	8004e4e <VC_SIMV_Pulse_I_Parameter+0x96>
						}
						else if ((R4.F_max <= (R1._Flow_Rate + 20))&& (R4.F_max >= (R1._Flow_Rate + 10)))
 8004df8:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004dfe:	8a1b      	ldrh	r3, [r3, #16]
 8004e00:	3314      	adds	r3, #20
 8004e02:	429a      	cmp	r2, r3
 8004e04:	dc0e      	bgt.n	8004e24 <VC_SIMV_Pulse_I_Parameter+0x6c>
 8004e06:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004e08:	8a1b      	ldrh	r3, [r3, #16]
 8004e0a:	f103 0209 	add.w	r2, r3, #9
 8004e0e:	4b54      	ldr	r3, [pc, #336]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	da06      	bge.n	8004e24 <VC_SIMV_Pulse_I_Parameter+0x6c>
						{
							R4.temp_dac = R4.temp_dac_new - 5;
 8004e16:	4b52      	ldr	r3, [pc, #328]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e18:	88db      	ldrh	r3, [r3, #6]
 8004e1a:	3b05      	subs	r3, #5
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	4b50      	ldr	r3, [pc, #320]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e20:	809a      	strh	r2, [r3, #4]
 8004e22:	e014      	b.n	8004e4e <VC_SIMV_Pulse_I_Parameter+0x96>
						}
						else if ((R4.F_max < (R1._Flow_Rate + 10)) && (R4.F_max >= (R1._Flow_Rate + 5)))
 8004e24:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004e26:	8a1b      	ldrh	r3, [r3, #16]
 8004e28:	f103 0209 	add.w	r2, r3, #9
 8004e2c:	4b4c      	ldr	r3, [pc, #304]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	db0c      	blt.n	8004e4e <VC_SIMV_Pulse_I_Parameter+0x96>
 8004e34:	4b4b      	ldr	r3, [pc, #300]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004e36:	8a1b      	ldrh	r3, [r3, #16]
 8004e38:	1d1a      	adds	r2, r3, #4
 8004e3a:	4b49      	ldr	r3, [pc, #292]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	da05      	bge.n	8004e4e <VC_SIMV_Pulse_I_Parameter+0x96>
						{
							R4.temp_dac = R4.temp_dac_new - 1;
 8004e42:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e44:	88db      	ldrh	r3, [r3, #6]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e4c:	809a      	strh	r2, [r3, #4]
						}

						R4.temp_dac_new = R4.temp_dac;
 8004e4e:	4b44      	ldr	r3, [pc, #272]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e50:	889a      	ldrh	r2, [r3, #4]
 8004e52:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e54:	80da      	strh	r2, [r3, #6]
						if (R4.temp_dac_new < 500)
 8004e56:	4b42      	ldr	r3, [pc, #264]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e58:	88db      	ldrh	r3, [r3, #6]
 8004e5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e5e:	d22b      	bcs.n	8004eb8 <VC_SIMV_Pulse_I_Parameter+0x100>
						{
							R4.temp_dac_new = 500;
 8004e60:	4b3f      	ldr	r3, [pc, #252]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e66:	80da      	strh	r2, [r3, #6]
 8004e68:	e026      	b.n	8004eb8 <VC_SIMV_Pulse_I_Parameter+0x100>
						}
					}
					else if (R4.F_max < (R1._Flow_Rate- 5))
 8004e6a:	4b3d      	ldr	r3, [pc, #244]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b3d      	ldr	r3, [pc, #244]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004e70:	8a1b      	ldrh	r3, [r3, #16]
 8004e72:	3b05      	subs	r3, #5
 8004e74:	429a      	cmp	r2, r3
 8004e76:	da17      	bge.n	8004ea8 <VC_SIMV_Pulse_I_Parameter+0xf0>
					{
						if (R3.max_flow_acheived == 0)
 8004e78:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <VC_SIMV_Pulse_I_Parameter+0x1b0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d11b      	bne.n	8004eb8 <VC_SIMV_Pulse_I_Parameter+0x100>
						{
							R4.temp_dac = R4.temp_dac_new + 30;
 8004e80:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e82:	88db      	ldrh	r3, [r3, #6]
 8004e84:	331e      	adds	r3, #30
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	4b35      	ldr	r3, [pc, #212]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e8a:	809a      	strh	r2, [r3, #4]
							R4.temp_dac_new = R4.temp_dac;
 8004e8c:	4b34      	ldr	r3, [pc, #208]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e8e:	889a      	ldrh	r2, [r3, #4]
 8004e90:	4b33      	ldr	r3, [pc, #204]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e92:	80da      	strh	r2, [r3, #6]

								if (R4.temp_dac_new > 4095)
 8004e94:	4b32      	ldr	r3, [pc, #200]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9c:	d30c      	bcc.n	8004eb8 <VC_SIMV_Pulse_I_Parameter+0x100>
								{
									R4.temp_dac_new = 1300;
 8004e9e:	4b30      	ldr	r3, [pc, #192]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004ea0:	f240 5214 	movw	r2, #1300	; 0x514
 8004ea4:	80da      	strh	r2, [r3, #6]
 8004ea6:	e007      	b.n	8004eb8 <VC_SIMV_Pulse_I_Parameter+0x100>
						}

					}
					else
					{
						R4.temp_dac = R4.temp_dac_new;
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004eaa:	88da      	ldrh	r2, [r3, #6]
 8004eac:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004eae:	809a      	strh	r2, [r3, #4]
						R4.temp_dac_new = R4.temp_dac;
 8004eb0:	4b2b      	ldr	r3, [pc, #172]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004eb2:	889a      	ldrh	r2, [r3, #4]
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004eb6:	80da      	strh	r2, [r3, #6]
					}


	               R3.max_flow_acheived = 0;
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <VC_SIMV_Pulse_I_Parameter+0x1b0>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
	               R3.constant_dac_done = 1;
 8004ebe:	4b2a      	ldr	r3, [pc, #168]	; (8004f68 <VC_SIMV_Pulse_I_Parameter+0x1b0>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	605a      	str	r2, [r3, #4]
	               R3.Reached_flow_val = 0;
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <VC_SIMV_Pulse_I_Parameter+0x1b0>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	609a      	str	r2, [r3, #8]
	               R4.F_max = 0;
 8004eca:	4b25      	ldr	r3, [pc, #148]	; (8004f60 <VC_SIMV_Pulse_I_Parameter+0x1a8>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
	               R3.sensordata_done = 1;
 8004ed0:	4b25      	ldr	r3, [pc, #148]	; (8004f68 <VC_SIMV_Pulse_I_Parameter+0x1b0>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	60da      	str	r2, [r3, #12]
	               R3.Volume_acheived = 1;
 8004ed6:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <VC_SIMV_Pulse_I_Parameter+0x1b0>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	611a      	str	r2, [r3, #16]
	               vol.Volume = 0;
 8004edc:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <VC_SIMV_Pulse_I_Parameter+0x1b4>)
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	605a      	str	r2, [r3, #4]
	               R3.volume_reached = 0;
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <VC_SIMV_Pulse_I_Parameter+0x1b0>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	615a      	str	r2, [r3, #20]


	               Peep_Vale_Lock_delay_Vc_simv();
 8004eea:	f000 fa61 	bl	80053b0 <Peep_Vale_Lock_delay_Vc_simv>

	               Ach_vol=1;
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <VC_SIMV_Pulse_I_Parameter+0x1b8>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
	               if(Acheived_Volume>(R1._VT_Val+20))
 8004ef4:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <VC_SIMV_Pulse_I_Parameter+0x1bc>)
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <VC_SIMV_Pulse_I_Parameter+0x1ac>)
 8004efc:	8a9b      	ldrh	r3, [r3, #20]
 8004efe:	3314      	adds	r3, #20
 8004f00:	429a      	cmp	r2, r3
 8004f02:	dd11      	ble.n	8004f28 <VC_SIMV_Pulse_I_Parameter+0x170>
	               {
						check_count++;
 8004f04:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <VC_SIMV_Pulse_I_Parameter+0x1c0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <VC_SIMV_Pulse_I_Parameter+0x1c0>)
 8004f0c:	6013      	str	r3, [r2, #0]
						if (check_count >= 3)
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <VC_SIMV_Pulse_I_Parameter+0x1c0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	dd08      	ble.n	8004f28 <VC_SIMV_Pulse_I_Parameter+0x170>
						{
							check_dev = check_dev + 5;
 8004f16:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <VC_SIMV_Pulse_I_Parameter+0x1c4>)
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	3305      	adds	r3, #5
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <VC_SIMV_Pulse_I_Parameter+0x1c4>)
 8004f20:	801a      	strh	r2, [r3, #0]
							check_count = 0;
 8004f22:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <VC_SIMV_Pulse_I_Parameter+0x1c0>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
						}
	               	}

	 _I_TIMER = R2._I_TIMER_HOLD;
 8004f28:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <VC_SIMV_Pulse_I_Parameter+0x1c8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <VC_SIMV_Pulse_I_Parameter+0x1cc>)
 8004f2e:	6013      	str	r3, [r2, #0]
	_Control_Byte &= (uint8_t) (~(0x80));
 8004f30:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <VC_SIMV_Pulse_I_Parameter+0x1d0>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <VC_SIMV_Pulse_I_Parameter+0x1d0>)
 8004f3c:	701a      	strb	r2, [r3, #0]
	_CurrentWaveFormState = Generate_E_Wave;
 8004f3e:	4b13      	ldr	r3, [pc, #76]	; (8004f8c <VC_SIMV_Pulse_I_Parameter+0x1d4>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_I_Wave ;
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <VC_SIMV_Pulse_I_Parameter+0x1d8>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
	vTaskDelay(R2._I_TIMER_HOLD);
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <VC_SIMV_Pulse_I_Parameter+0x1c8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f008 f84a 	bl	800cfe8 <vTaskDelay>

}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40020400 	.word	0x40020400
 8004f5c:	20004658 	.word	0x20004658
 8004f60:	20004670 	.word	0x20004670
 8004f64:	200046ec 	.word	0x200046ec
 8004f68:	20004578 	.word	0x20004578
 8004f6c:	2000482c 	.word	0x2000482c
 8004f70:	20004980 	.word	0x20004980
 8004f74:	20004640 	.word	0x20004640
 8004f78:	20004970 	.word	0x20004970
 8004f7c:	200046d4 	.word	0x200046d4
 8004f80:	20004854 	.word	0x20004854
 8004f84:	200048f8 	.word	0x200048f8
 8004f88:	20004944 	.word	0x20004944
 8004f8c:	20004642 	.word	0x20004642
 8004f90:	20004798 	.word	0x20004798

08004f94 <VC_SIMV_Pulse_E_Parameter>:


void VC_SIMV_Pulse_E_Parameter()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	_E_TIMER_ACHEIVED = 0;
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <VC_SIMV_Pulse_E_Parameter+0x3c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	801a      	strh	r2, [r3, #0]
	_E_TIMER = R2._E_TIMER_HOLD;
 8004f9e:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <VC_SIMV_Pulse_E_Parameter+0x40>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <VC_SIMV_Pulse_E_Parameter+0x44>)
 8004fa4:	6013      	str	r3, [r2, #0]
	_CurrentWaveFormState = Generate_I_Wave;
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	; (8004fdc <VC_SIMV_Pulse_E_Parameter+0x48>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <VC_SIMV_Pulse_E_Parameter+0x4c>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
	_Control_Byte |= (uint8_t) 0x80;
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <VC_SIMV_Pulse_E_Parameter+0x50>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <VC_SIMV_Pulse_E_Parameter+0x50>)
 8004fbe:	701a      	strb	r2, [r3, #0]
	vTaskDelay(R2._E_TIMER_HOLD);
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <VC_SIMV_Pulse_E_Parameter+0x40>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f008 f80f 	bl	800cfe8 <vTaskDelay>
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20004964 	.word	0x20004964
 8004fd4:	20004854 	.word	0x20004854
 8004fd8:	20004848 	.word	0x20004848
 8004fdc:	20004642 	.word	0x20004642
 8004fe0:	20004798 	.word	0x20004798
 8004fe4:	20004944 	.word	0x20004944

08004fe8 <VC_SIMV_PARAMETERS>:

void VC_SIMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8004fe8:	b5b0      	push	{r4, r5, r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]


			R1._VT_Val = RX_PARAM_CMD_PACKET->_VTI;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	88db      	ldrh	r3, [r3, #6]
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	4b96      	ldr	r3, [pc, #600]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8004ff8:	829a      	strh	r2, [r3, #20]
			R1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	795a      	ldrb	r2, [r3, #5]
 8004ffe:	4b94      	ldr	r3, [pc, #592]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005000:	705a      	strb	r2, [r3, #1]
			R1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	7a5b      	ldrb	r3, [r3, #9]
 8005006:	461a      	mov	r2, r3
 8005008:	f64e 2360 	movw	r3, #60000	; 0xea60
 800500c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005010:	461a      	mov	r2, r3
 8005012:	4b8f      	ldr	r3, [pc, #572]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005014:	605a      	str	r2, [r3, #4]
			R1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7a1b      	ldrb	r3, [r3, #8]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	4b8b      	ldr	r3, [pc, #556]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005022:	609a      	str	r2, [r3, #8]
			R1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	7a1b      	ldrb	r3, [r3, #8]
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	4a88      	ldr	r2, [pc, #544]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 800502e:	60d3      	str	r3, [r2, #12]
			R1._Flow_Rate=RX_PARAM_CMD_PACKET->_FlowRate;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7b1b      	ldrb	r3, [r3, #12]
 8005034:	b29a      	uxth	r2, r3
 8005036:	4b86      	ldr	r3, [pc, #536]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005038:	821a      	strh	r2, [r3, #16]
			R1.RR=RX_PARAM_CMD_PACKET->_RR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	7a5a      	ldrb	r2, [r3, #9]
 800503e:	4b84      	ldr	r3, [pc, #528]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005040:	749a      	strb	r2, [r3, #18]
			_FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	7a9a      	ldrb	r2, [r3, #10]
 8005046:	4b83      	ldr	r3, [pc, #524]	; (8005254 <VC_SIMV_PARAMETERS+0x26c>)
 8005048:	701a      	strb	r2, [r3, #0]


			R6._TRIG_TYPE = (0xF0 & RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT) >> 4;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7b9b      	ldrb	r3, [r3, #14]
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	b2db      	uxtb	r3, r3
 8005052:	b29a      	uxth	r2, r3
 8005054:	4b80      	ldr	r3, [pc, #512]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 8005056:	801a      	strh	r2, [r3, #0]
			R6._TRIG_LMT = 0x0F & (RX_PARAM_CMD_PACKET->_TRIG_TYPE_TRIG_LMT);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7b9b      	ldrb	r3, [r3, #14]
 800505c:	b29b      	uxth	r3, r3
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	b29a      	uxth	r2, r3
 8005064:	4b7c      	ldr	r3, [pc, #496]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 8005066:	805a      	strh	r2, [r3, #2]
			R6._TRIG_TIME = 0x0F & (RX_PARAM_CMD_PACKET->_RiseTime_TRIG_TIME);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	7adb      	ldrb	r3, [r3, #11]
 800506c:	b29b      	uxth	r3, r3
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	b29a      	uxth	r2, r3
 8005074:	4b78      	ldr	r3, [pc, #480]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 8005076:	809a      	strh	r2, [r3, #4]


			R2._I_TIMER_HOLD = (R1.I_Time * (R1.CycleTime / (R1.I_Time +R1.E_Time)));
 8005078:	4b75      	ldr	r3, [pc, #468]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a74      	ldr	r2, [pc, #464]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 800507e:	6851      	ldr	r1, [r2, #4]
 8005080:	4a73      	ldr	r2, [pc, #460]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005082:	6890      	ldr	r0, [r2, #8]
 8005084:	4a72      	ldr	r2, [pc, #456]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005086:	68d2      	ldr	r2, [r2, #12]
 8005088:	4402      	add	r2, r0
 800508a:	fbb1 f2f2 	udiv	r2, r1, r2
 800508e:	fb02 f303 	mul.w	r3, r2, r3
 8005092:	4a72      	ldr	r2, [pc, #456]	; (800525c <VC_SIMV_PARAMETERS+0x274>)
 8005094:	6013      	str	r3, [r2, #0]
			R2._E_TIMER_HOLD = (R1.E_Time * (R1.CycleTime / (R1.I_Time + R1.E_Time)));
 8005096:	4b6e      	ldr	r3, [pc, #440]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4a6d      	ldr	r2, [pc, #436]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 800509c:	6851      	ldr	r1, [r2, #4]
 800509e:	4a6c      	ldr	r2, [pc, #432]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 80050a0:	6890      	ldr	r0, [r2, #8]
 80050a2:	4a6b      	ldr	r2, [pc, #428]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 80050a4:	68d2      	ldr	r2, [r2, #12]
 80050a6:	4402      	add	r2, r0
 80050a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	4a6a      	ldr	r2, [pc, #424]	; (800525c <VC_SIMV_PARAMETERS+0x274>)
 80050b2:	6053      	str	r3, [r2, #4]
			R4.PID_task_delay=10;
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <VC_SIMV_PARAMETERS+0x278>)
 80050b6:	220a      	movs	r2, #10
 80050b8:	60da      	str	r2, [r3, #12]


			R6._CALC_TRIG_VAL = ((float) E_TIME_TOLERANCE / 100.00)* (R2._E_TIMER_HOLD);
 80050ba:	4b68      	ldr	r3, [pc, #416]	; (800525c <VC_SIMV_PARAMETERS+0x274>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fb f9c8 	bl	8000454 <__aeabi_ui2d>
 80050c4:	a360      	add	r3, pc, #384	; (adr r3, 8005248 <VC_SIMV_PARAMETERS+0x260>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb fa3d 	bl	8000548 <__aeabi_dmul>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4610      	mov	r0, r2
 80050d4:	4619      	mov	r1, r3
 80050d6:	f7fb fcf9 	bl	8000acc <__aeabi_d2uiz>
 80050da:	4603      	mov	r3, r0
 80050dc:	b29a      	uxth	r2, r3
 80050de:	4b5e      	ldr	r3, [pc, #376]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 80050e0:	80da      	strh	r2, [r3, #6]
			R6._TOLERANCE_EWAVE = R2._E_TIMER_HOLD - R6._CALC_TRIG_VAL;
 80050e2:	4b5e      	ldr	r3, [pc, #376]	; (800525c <VC_SIMV_PARAMETERS+0x274>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	4b5b      	ldr	r3, [pc, #364]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 80050ea:	88db      	ldrh	r3, [r3, #6]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	4b59      	ldr	r3, [pc, #356]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 80050f2:	811a      	strh	r2, [r3, #8]
			R6._TRIG_WINDOW = R6._TOLERANCE_EWAVE* (((float) R6._TRIG_TIME * 10.00) / 100.00);
 80050f4:	4b58      	ldr	r3, [pc, #352]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 80050f6:	891b      	ldrh	r3, [r3, #8]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fb f9bb 	bl	8000474 <__aeabi_i2d>
 80050fe:	4604      	mov	r4, r0
 8005100:	460d      	mov	r5, r1
 8005102:	4b55      	ldr	r3, [pc, #340]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 8005104:	889b      	ldrh	r3, [r3, #4]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	ee17 0a90 	vmov	r0, s15
 8005112:	f7fb f9c1 	bl	8000498 <__aeabi_f2d>
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	4b52      	ldr	r3, [pc, #328]	; (8005264 <VC_SIMV_PARAMETERS+0x27c>)
 800511c:	f7fb fa14 	bl	8000548 <__aeabi_dmul>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	4b4e      	ldr	r3, [pc, #312]	; (8005268 <VC_SIMV_PARAMETERS+0x280>)
 800512e:	f7fb fb35 	bl	800079c <__aeabi_ddiv>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	4620      	mov	r0, r4
 8005138:	4629      	mov	r1, r5
 800513a:	f7fb fa05 	bl	8000548 <__aeabi_dmul>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f7fb fcc1 	bl	8000acc <__aeabi_d2uiz>
 800514a:	4603      	mov	r3, r0
 800514c:	b29a      	uxth	r2, r3
 800514e:	4b42      	ldr	r3, [pc, #264]	; (8005258 <VC_SIMV_PARAMETERS+0x270>)
 8005150:	815a      	strh	r2, [r3, #10]

			S5.Lock_delay=200;
 8005152:	4b46      	ldr	r3, [pc, #280]	; (800526c <VC_SIMV_PARAMETERS+0x284>)
 8005154:	22c8      	movs	r2, #200	; 0xc8
 8005156:	869a      	strh	r2, [r3, #52]	; 0x34
			S5._Set_Peep=R1._PEEP_Val/2;
 8005158:	4b3d      	ldr	r3, [pc, #244]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 800515a:	785b      	ldrb	r3, [r3, #1]
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005168:	4b40      	ldr	r3, [pc, #256]	; (800526c <VC_SIMV_PARAMETERS+0x284>)
 800516a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			check_dev=0;
 800516e:	4b40      	ldr	r3, [pc, #256]	; (8005270 <VC_SIMV_PARAMETERS+0x288>)
 8005170:	2200      	movs	r2, #0
 8005172:	801a      	strh	r2, [r3, #0]


			if(R1._Flow_Rate>=60)
 8005174:	4b36      	ldr	r3, [pc, #216]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005176:	8a1b      	ldrh	r3, [r3, #16]
 8005178:	2b3b      	cmp	r3, #59	; 0x3b
 800517a:	d904      	bls.n	8005186 <VC_SIMV_PARAMETERS+0x19e>
				R4.temp_dac_new = 900;
 800517c:	4b38      	ldr	r3, [pc, #224]	; (8005260 <VC_SIMV_PARAMETERS+0x278>)
 800517e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005182:	80da      	strh	r2, [r3, #6]
 8005184:	e018      	b.n	80051b8 <VC_SIMV_PARAMETERS+0x1d0>
			else if(R1._Flow_Rate<60 && R1._Flow_Rate>=40 )
 8005186:	4b32      	ldr	r3, [pc, #200]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005188:	8a1b      	ldrh	r3, [r3, #16]
 800518a:	2b3b      	cmp	r3, #59	; 0x3b
 800518c:	d808      	bhi.n	80051a0 <VC_SIMV_PARAMETERS+0x1b8>
 800518e:	4b30      	ldr	r3, [pc, #192]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 8005190:	8a1b      	ldrh	r3, [r3, #16]
 8005192:	2b27      	cmp	r3, #39	; 0x27
 8005194:	d904      	bls.n	80051a0 <VC_SIMV_PARAMETERS+0x1b8>
				R4.temp_dac_new = 800;
 8005196:	4b32      	ldr	r3, [pc, #200]	; (8005260 <VC_SIMV_PARAMETERS+0x278>)
 8005198:	f44f 7248 	mov.w	r2, #800	; 0x320
 800519c:	80da      	strh	r2, [r3, #6]
 800519e:	e00b      	b.n	80051b8 <VC_SIMV_PARAMETERS+0x1d0>
			else if(R1._Flow_Rate<40 && R1._Flow_Rate>10 )
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 80051a2:	8a1b      	ldrh	r3, [r3, #16]
 80051a4:	2b27      	cmp	r3, #39	; 0x27
 80051a6:	d807      	bhi.n	80051b8 <VC_SIMV_PARAMETERS+0x1d0>
 80051a8:	4b29      	ldr	r3, [pc, #164]	; (8005250 <VC_SIMV_PARAMETERS+0x268>)
 80051aa:	8a1b      	ldrh	r3, [r3, #16]
 80051ac:	2b0a      	cmp	r3, #10
 80051ae:	d903      	bls.n	80051b8 <VC_SIMV_PARAMETERS+0x1d0>
				R4.temp_dac_new = 700;
 80051b0:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <VC_SIMV_PARAMETERS+0x278>)
 80051b2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80051b6:	80da      	strh	r2, [r3, #6]

			FiO2_old=_FIO2_Val;
 80051b8:	4b26      	ldr	r3, [pc, #152]	; (8005254 <VC_SIMV_PARAMETERS+0x26c>)
 80051ba:	781a      	ldrb	r2, [r3, #0]
 80051bc:	4b2d      	ldr	r3, [pc, #180]	; (8005274 <VC_SIMV_PARAMETERS+0x28c>)
 80051be:	701a      	strb	r2, [r3, #0]




			vTaskSuspend(pc_mode_Handler);
 80051c0:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <VC_SIMV_PARAMETERS+0x290>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f007 ff43 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 80051ca:	4b2c      	ldr	r3, [pc, #176]	; (800527c <VC_SIMV_PARAMETERS+0x294>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f007 ff3e 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Handler);
 80051d4:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <VC_SIMV_PARAMETERS+0x298>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f007 ff39 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <VC_SIMV_PARAMETERS+0x29c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f007 ff34 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_mode_Handler);
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <VC_SIMV_PARAMETERS+0x2a0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f007 ff2f 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_Pid_Handler);
 80051f2:	4b26      	ldr	r3, [pc, #152]	; (800528c <VC_SIMV_PARAMETERS+0x2a4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f007 ff2a 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Psv_Handler);
 80051fc:	4b24      	ldr	r3, [pc, #144]	; (8005290 <VC_SIMV_PARAMETERS+0x2a8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f007 ff25 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8005206:	4b23      	ldr	r3, [pc, #140]	; (8005294 <VC_SIMV_PARAMETERS+0x2ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f007 ff20 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8005210:	4b21      	ldr	r3, [pc, #132]	; (8005298 <VC_SIMV_PARAMETERS+0x2b0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f007 ff1b 	bl	800d050 <vTaskSuspend>
			vTaskResume(Vc_simv_mode_Handler);
 800521a:	4b20      	ldr	r3, [pc, #128]	; (800529c <VC_SIMV_PARAMETERS+0x2b4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f007 ffda 	bl	800d1d8 <vTaskResume>
			vTaskResume(Vc_cmv_simv_Pid_Handler);
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <VC_SIMV_PARAMETERS+0x2b8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f007 ffd5 	bl	800d1d8 <vTaskResume>
			_CurrentMode=SIMVVC;
 800522e:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <VC_SIMV_PARAMETERS+0x2bc>)
 8005230:	2204      	movs	r2, #4
 8005232:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 8005234:	4b1c      	ldr	r3, [pc, #112]	; (80052a8 <VC_SIMV_PARAMETERS+0x2c0>)
 8005236:	2201      	movs	r2, #1
 8005238:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 800523a:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <VC_SIMV_PARAMETERS+0x2c4>)
 800523c:	2201      	movs	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]




}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bdb0      	pop	{r4, r5, r7, pc}
 8005248:	33333333 	.word	0x33333333
 800524c:	3fd33333 	.word	0x3fd33333
 8005250:	200046ec 	.word	0x200046ec
 8005254:	2000466d 	.word	0x2000466d
 8005258:	2000465c 	.word	0x2000465c
 800525c:	20004854 	.word	0x20004854
 8005260:	20004670 	.word	0x20004670
 8005264:	40240000 	.word	0x40240000
 8005268:	40590000 	.word	0x40590000
 800526c:	200048fc 	.word	0x200048fc
 8005270:	200046d4 	.word	0x200046d4
 8005274:	200048f0 	.word	0x200048f0
 8005278:	20004614 	.word	0x20004614
 800527c:	2000460c 	.word	0x2000460c
 8005280:	20004948 	.word	0x20004948
 8005284:	20004960 	.word	0x20004960
 8005288:	2000484c 	.word	0x2000484c
 800528c:	200045a8 	.word	0x200045a8
 8005290:	200046d8 	.word	0x200046d8
 8005294:	200046d0 	.word	0x200046d0
 8005298:	200047e4 	.word	0x200047e4
 800529c:	20004728 	.word	0x20004728
 80052a0:	200048f4 	.word	0x200048f4
 80052a4:	200046e8 	.word	0x200046e8
 80052a8:	20004642 	.word	0x20004642
 80052ac:	20004798 	.word	0x20004798

080052b0 <volume_task_SIMV>:




void volume_task_SIMV()
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0

	        	if(_CurrentComputationState==Compute_I_Wave)
 80052b4:	4b36      	ldr	r3, [pc, #216]	; (8005390 <volume_task_SIMV+0xe0>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d166      	bne.n	800538a <volume_task_SIMV+0xda>
				{

					if(vol.Volume<(R1._VT_Val-check_dev))
 80052bc:	4b35      	ldr	r3, [pc, #212]	; (8005394 <volume_task_SIMV+0xe4>)
 80052be:	ed93 7a01 	vldr	s14, [r3, #4]
 80052c2:	4b35      	ldr	r3, [pc, #212]	; (8005398 <volume_task_SIMV+0xe8>)
 80052c4:	8a9b      	ldrh	r3, [r3, #20]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b34      	ldr	r3, [pc, #208]	; (800539c <volume_task_SIMV+0xec>)
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052de:	d544      	bpl.n	800536a <volume_task_SIMV+0xba>
					{


					 if(R3.volume_reached==0)
 80052e0:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <volume_task_SIMV+0xf0>)
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d150      	bne.n	800538a <volume_task_SIMV+0xda>
					 {
						if(R3.constant_dac_done==0)
 80052e8:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <volume_task_SIMV+0xf0>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d113      	bne.n	8005318 <volume_task_SIMV+0x68>
				        {
								R4._DAC_VAL0=R4.temp_dac+3;
 80052f0:	4b2c      	ldr	r3, [pc, #176]	; (80053a4 <volume_task_SIMV+0xf4>)
 80052f2:	889b      	ldrh	r3, [r3, #4]
 80052f4:	3303      	adds	r3, #3
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	4b2a      	ldr	r3, [pc, #168]	; (80053a4 <volume_task_SIMV+0xf4>)
 80052fa:	811a      	strh	r2, [r3, #8]
								R4.temp_dac=R4._DAC_VAL0;
 80052fc:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <volume_task_SIMV+0xf4>)
 80052fe:	891a      	ldrh	r2, [r3, #8]
 8005300:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <volume_task_SIMV+0xf4>)
 8005302:	809a      	strh	r2, [r3, #4]
							    if(R4._DAC_VAL0>4094)
 8005304:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <volume_task_SIMV+0xf4>)
 8005306:	891b      	ldrh	r3, [r3, #8]
 8005308:	f640 72fe 	movw	r2, #4094	; 0xffe
 800530c:	4293      	cmp	r3, r2
 800530e:	d903      	bls.n	8005318 <volume_task_SIMV+0x68>
							    {
							    	R4._DAC_VAL0=4094;
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <volume_task_SIMV+0xf4>)
 8005312:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005316:	811a      	strh	r2, [r3, #8]
							    }
				        }

						  if(Flow_Sensor_cal._Flow_Val>=R1._Flow_Rate)
 8005318:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <volume_task_SIMV+0xf8>)
 800531a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531c:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <volume_task_SIMV+0xe8>)
 800531e:	8a12      	ldrh	r2, [r2, #16]
 8005320:	4293      	cmp	r3, r2
 8005322:	db13      	blt.n	800534c <volume_task_SIMV+0x9c>
						  {

							      R3.max_flow_acheived=1;
 8005324:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <volume_task_SIMV+0xf0>)
 8005326:	2201      	movs	r2, #1
 8005328:	601a      	str	r2, [r3, #0]
								  R3.Reached_flow_val=Flow_Sensor_cal._Flow_Val;
 800532a:	4b1f      	ldr	r3, [pc, #124]	; (80053a8 <volume_task_SIMV+0xf8>)
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <volume_task_SIMV+0xf0>)
 8005330:	6093      	str	r3, [r2, #8]
								  R3.constant_dac_done=0;
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <volume_task_SIMV+0xf0>)
 8005334:	2200      	movs	r2, #0
 8005336:	605a      	str	r2, [r3, #4]
								  if(Flow_Sensor_cal._Flow_Val>R4.F_max)
 8005338:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <volume_task_SIMV+0xf8>)
 800533a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800533c:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <volume_task_SIMV+0xf4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	dd03      	ble.n	800534c <volume_task_SIMV+0x9c>
								  {
									  R4.F_max=Flow_Sensor_cal._Flow_Val;
 8005344:	4b18      	ldr	r3, [pc, #96]	; (80053a8 <volume_task_SIMV+0xf8>)
 8005346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005348:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <volume_task_SIMV+0xf4>)
 800534a:	6013      	str	r3, [r2, #0]




						  }
						  if(Flow_Sensor_cal._Flow_Val<R1._Flow_Rate)
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <volume_task_SIMV+0xf8>)
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	4a11      	ldr	r2, [pc, #68]	; (8005398 <volume_task_SIMV+0xe8>)
 8005352:	8a12      	ldrh	r2, [r2, #16]
 8005354:	4293      	cmp	r3, r2
 8005356:	da18      	bge.n	800538a <volume_task_SIMV+0xda>
						  {

							    if(R3.constant_dac_done==1)
 8005358:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <volume_task_SIMV+0xf0>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d114      	bne.n	800538a <volume_task_SIMV+0xda>
							    {
							    	R4._DAC_VAL0=R4.temp_dac;
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <volume_task_SIMV+0xf4>)
 8005362:	889a      	ldrh	r2, [r3, #4]
 8005364:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <volume_task_SIMV+0xf4>)
 8005366:	811a      	strh	r2, [r3, #8]

					}

				}

}
 8005368:	e00f      	b.n	800538a <volume_task_SIMV+0xda>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800536a:	2200      	movs	r2, #0
 800536c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005370:	480e      	ldr	r0, [pc, #56]	; (80053ac <volume_task_SIMV+0xfc>)
 8005372:	f003 fafb 	bl	800896c <HAL_GPIO_WritePin>
						R3.volume_reached=1;
 8005376:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <volume_task_SIMV+0xf0>)
 8005378:	2201      	movs	r2, #1
 800537a:	615a      	str	r2, [r3, #20]
						R4._DAC_VAL0=0;
 800537c:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <volume_task_SIMV+0xf4>)
 800537e:	2200      	movs	r2, #0
 8005380:	811a      	strh	r2, [r3, #8]
						R4.temp_dac=R4.temp_dac_new;
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <volume_task_SIMV+0xf4>)
 8005384:	88da      	ldrh	r2, [r3, #6]
 8005386:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <volume_task_SIMV+0xf4>)
 8005388:	809a      	strh	r2, [r3, #4]
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20004798 	.word	0x20004798
 8005394:	2000482c 	.word	0x2000482c
 8005398:	200046ec 	.word	0x200046ec
 800539c:	200046d4 	.word	0x200046d4
 80053a0:	20004578 	.word	0x20004578
 80053a4:	20004670 	.word	0x20004670
 80053a8:	20004730 	.word	0x20004730
 80053ac:	40020400 	.word	0x40020400

080053b0 <Peep_Vale_Lock_delay_Vc_simv>:




void Peep_Vale_Lock_delay_Vc_simv()
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 80053b4:	4b68      	ldr	r3, [pc, #416]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80053ba:	4b67      	ldr	r3, [pc, #412]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053bc:	ed93 7a03 	vldr	s14, [r3, #12]
 80053c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c4:	4b64      	ldr	r3, [pc, #400]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053c6:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 80053ca:	4b63      	ldr	r3, [pc, #396]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80053d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053d4:	ee17 2a90 	vmov	r2, s15
 80053d8:	4b5f      	ldr	r3, [pc, #380]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
		S5._Pip_Avg_count = 0;
 80053dc:	4b5e      	ldr	r3, [pc, #376]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 80053e4:	4b5c      	ldr	r3, [pc, #368]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 80053ec:	4b5a      	ldr	r3, [pc, #360]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80053f2:	4b59      	ldr	r3, [pc, #356]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053f4:	ed93 7a06 	vldr	s14, [r3, #24]
 80053f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053fc:	4b56      	ldr	r3, [pc, #344]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80053fe:	edc3 7a07 	vstr	s15, [r3, #28]
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8005402:	4b55      	ldr	r3, [pc, #340]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005404:	edd3 7a07 	vldr	s15, [r3, #28]
 8005408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800540c:	ee17 2a90 	vmov	r2, s15
 8005410:	4b51      	ldr	r3, [pc, #324]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005412:	621a      	str	r2, [r3, #32]

		if (R1.RR >= 30 || R2._E_TIMER_HOLD < 500)
 8005414:	4b51      	ldr	r3, [pc, #324]	; (800555c <Peep_Vale_Lock_delay_Vc_simv+0x1ac>)
 8005416:	7c9b      	ldrb	r3, [r3, #18]
 8005418:	2b1d      	cmp	r3, #29
 800541a:	d804      	bhi.n	8005426 <Peep_Vale_Lock_delay_Vc_simv+0x76>
 800541c:	4b50      	ldr	r3, [pc, #320]	; (8005560 <Peep_Vale_Lock_delay_Vc_simv+0x1b0>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005424:	d203      	bcs.n	800542e <Peep_Vale_Lock_delay_Vc_simv+0x7e>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 8005426:	4b4c      	ldr	r3, [pc, #304]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	4a4b      	ldr	r2, [pc, #300]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 800542c:	6213      	str	r3, [r2, #32]
		}

		if (S5._Peep_Avg_val_int > (R1._PEEP_Val + 1))
 800542e:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	4b4a      	ldr	r3, [pc, #296]	; (800555c <Peep_Vale_Lock_delay_Vc_simv+0x1ac>)
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	3301      	adds	r3, #1
 8005438:	429a      	cmp	r2, r3
 800543a:	dd32      	ble.n	80054a2 <Peep_Vale_Lock_delay_Vc_simv+0xf2>
		{
			S5._Set_Peep = S5._Set_Peep - 0.5f;
 800543c:	4b46      	ldr	r3, [pc, #280]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 800543e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005442:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 800544c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			S5.error_count++;
 8005450:	4b41      	ldr	r3, [pc, #260]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	3301      	adds	r3, #1
 8005456:	4a40      	ldr	r2, [pc, #256]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005458:	6293      	str	r3, [r2, #40]	; 0x28
			if (S5.error_count > 0)
 800545a:	4b3f      	ldr	r3, [pc, #252]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	dd11      	ble.n	8005486 <Peep_Vale_Lock_delay_Vc_simv+0xd6>
			{
				S5.Lock_delay = S5.Lock_delay + 10;
 8005462:	4b3d      	ldr	r3, [pc, #244]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005464:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005466:	330a      	adds	r3, #10
 8005468:	b29a      	uxth	r2, r3
 800546a:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 800546c:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 800546e:	4b3a      	ldr	r3, [pc, #232]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005470:	2200      	movs	r2, #0
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay > 500)
 8005474:	4b38      	ldr	r3, [pc, #224]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005476:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005478:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800547c:	d903      	bls.n	8005486 <Peep_Vale_Lock_delay_Vc_simv+0xd6>
					S5.Lock_delay = 500;
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005480:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005484:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep <= 3)
 8005486:	4b34      	ldr	r3, [pc, #208]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005488:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800548c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005498:	d851      	bhi.n	800553e <Peep_Vale_Lock_delay_Vc_simv+0x18e>
			{
				S5._Set_Peep = 3;
 800549a:	4b2f      	ldr	r3, [pc, #188]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 800549c:	4a31      	ldr	r2, [pc, #196]	; (8005564 <Peep_Vale_Lock_delay_Vc_simv+0x1b4>)
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
 80054a0:	e04d      	b.n	800553e <Peep_Vale_Lock_delay_Vc_simv+0x18e>
			}
		}
		else if (S5._Peep_Avg_val_int < (R1._PEEP_Val - 1))
 80054a2:	4b2d      	ldr	r3, [pc, #180]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054a4:	6a1a      	ldr	r2, [r3, #32]
 80054a6:	4b2d      	ldr	r3, [pc, #180]	; (800555c <Peep_Vale_Lock_delay_Vc_simv+0x1ac>)
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	429a      	cmp	r2, r3
 80054ae:	da42      	bge.n	8005536 <Peep_Vale_Lock_delay_Vc_simv+0x186>
		{
			S5._Set_Peep = S5._Set_Peep + 0.5f;
 80054b0:	4b29      	ldr	r3, [pc, #164]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80054b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054be:	4b26      	ldr	r3, [pc, #152]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054c0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			S5.error_count2++;
 80054c4:	4b24      	ldr	r3, [pc, #144]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	3301      	adds	r3, #1
 80054ca:	4a23      	ldr	r2, [pc, #140]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054cc:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (S5.error_count2 > 0)
 80054ce:	4b22      	ldr	r3, [pc, #136]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dd14      	ble.n	8005500 <Peep_Vale_Lock_delay_Vc_simv+0x150>
			{
				S5.Lock_delay = S5.Lock_delay - 10;
 80054d6:	4b20      	ldr	r3, [pc, #128]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054d8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80054da:	3b0a      	subs	r3, #10
 80054dc:	b29a      	uxth	r2, r3
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054e0:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 80054e2:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay < 1 || S5.Lock_delay > 500)
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054ea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <Peep_Vale_Lock_delay_Vc_simv+0x14a>
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054f2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80054f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054f8:	d902      	bls.n	8005500 <Peep_Vale_Lock_delay_Vc_simv+0x150>
					S5.Lock_delay = 1;
 80054fa:	4b17      	ldr	r3, [pc, #92]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep > R1._PEEP_Val + 2)
 8005500:	4b15      	ldr	r3, [pc, #84]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005502:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005506:	4b15      	ldr	r3, [pc, #84]	; (800555c <Peep_Vale_Lock_delay_Vc_simv+0x1ac>)
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	3302      	adds	r3, #2
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	dd0f      	ble.n	800553e <Peep_Vale_Lock_delay_Vc_simv+0x18e>
			{
				S5._Set_Peep = R1._PEEP_Val / 2;
 800551e:	4b0f      	ldr	r3, [pc, #60]	; (800555c <Peep_Vale_Lock_delay_Vc_simv+0x1ac>)
 8005520:	785b      	ldrb	r3, [r3, #1]
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800552e:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005530:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8005534:	e003      	b.n	800553e <Peep_Vale_Lock_delay_Vc_simv+0x18e>
			}
		}
		else
		{
			S5._Set_Peep = S5._Set_Peep;
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4a07      	ldr	r2, [pc, #28]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 800553c:	6313      	str	r3, [r2, #48]	; 0x30
		}
		S5._Peep_Avg_count = 0;
 800553e:	4b06      	ldr	r3, [pc, #24]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	619a      	str	r2, [r3, #24]
		S5._Peep_Avg = 0;
 8005546:	4b04      	ldr	r3, [pc, #16]	; (8005558 <Peep_Vale_Lock_delay_Vc_simv+0x1a8>)
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	615a      	str	r2, [r3, #20]
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	200048fc 	.word	0x200048fc
 800555c:	200046ec 	.word	0x200046ec
 8005560:	20004854 	.word	0x20004854
 8005564:	40400000 	.word	0x40400000

08005568 <Vc_Cmv_Task>:




void Vc_Cmv_Task(void *argument)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]


	while (1)
	{
		        switch (_CurrentComputationState)
 8005570:	4b39      	ldr	r3, [pc, #228]	; (8005658 <Vc_Cmv_Task+0xf0>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d068      	beq.n	800564a <Vc_Cmv_Task+0xe2>
 8005578:	2b02      	cmp	r3, #2
 800557a:	dc68      	bgt.n	800564e <Vc_Cmv_Task+0xe6>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <Vc_Cmv_Task+0x1e>
 8005580:	2b01      	cmp	r3, #1
 8005582:	d011      	beq.n	80055a8 <Vc_Cmv_Task+0x40>
									}
						break;
						case NoComputeState:
						break;
						default:
						break;
 8005584:	e063      	b.n	800564e <Vc_Cmv_Task+0xe6>
							ExpValve_CLOSE();
 8005586:	4b35      	ldr	r3, [pc, #212]	; (800565c <Vc_Cmv_Task+0xf4>)
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	4a34      	ldr	r2, [pc, #208]	; (800565c <Vc_Cmv_Task+0xf4>)
 800558c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005590:	6153      	str	r3, [r2, #20]
							Blower_Signal( V4._DAC_VAL0);
 8005592:	4b33      	ldr	r3, [pc, #204]	; (8005660 <Vc_Cmv_Task+0xf8>)
 8005594:	891a      	ldrh	r2, [r3, #8]
 8005596:	4b33      	ldr	r3, [pc, #204]	; (8005664 <Vc_Cmv_Task+0xfc>)
 8005598:	609a      	str	r2, [r3, #8]
							S5.peep_process_done=0;
 800559a:	4b33      	ldr	r3, [pc, #204]	; (8005668 <Vc_Cmv_Task+0x100>)
 800559c:	2200      	movs	r2, #0
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
							S5.lock=1;
 80055a0:	4b31      	ldr	r3, [pc, #196]	; (8005668 <Vc_Cmv_Task+0x100>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	63da      	str	r2, [r3, #60]	; 0x3c
						break;
 80055a6:	e055      	b.n	8005654 <Vc_Cmv_Task+0xec>
							V4._DAC_VAL0=0;
 80055a8:	4b2d      	ldr	r3, [pc, #180]	; (8005660 <Vc_Cmv_Task+0xf8>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	811a      	strh	r2, [r3, #8]
							Blower_Signal( V4._DAC_VAL0);
 80055ae:	4b2c      	ldr	r3, [pc, #176]	; (8005660 <Vc_Cmv_Task+0xf8>)
 80055b0:	891a      	ldrh	r2, [r3, #8]
 80055b2:	4b2c      	ldr	r3, [pc, #176]	; (8005664 <Vc_Cmv_Task+0xfc>)
 80055b4:	609a      	str	r2, [r3, #8]
									if(S5.peep_process_done==1)
 80055b6:	4b2c      	ldr	r3, [pc, #176]	; (8005668 <Vc_Cmv_Task+0x100>)
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d116      	bne.n	80055ec <Vc_Cmv_Task+0x84>
											if(Pressure_sensor._Pressure_Val<(S5._Set_Peep))
 80055be:	4b2b      	ldr	r3, [pc, #172]	; (800566c <Vc_Cmv_Task+0x104>)
 80055c0:	791b      	ldrb	r3, [r3, #4]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055ca:	4b27      	ldr	r3, [pc, #156]	; (8005668 <Vc_Cmv_Task+0x100>)
 80055cc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d8:	d504      	bpl.n	80055e4 <Vc_Cmv_Task+0x7c>
												Blower_Signal( V4._DAC_VAL0);
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <Vc_Cmv_Task+0xf8>)
 80055dc:	891a      	ldrh	r2, [r3, #8]
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <Vc_Cmv_Task+0xfc>)
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	e003      	b.n	80055ec <Vc_Cmv_Task+0x84>
												Blower_Signal( V4._DAC_VAL0);
 80055e4:	4b1e      	ldr	r3, [pc, #120]	; (8005660 <Vc_Cmv_Task+0xf8>)
 80055e6:	891a      	ldrh	r2, [r3, #8]
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <Vc_Cmv_Task+0xfc>)
 80055ea:	609a      	str	r2, [r3, #8]
									if(Pressure_sensor._Pressure_Val<=(S5._Set_Peep))
 80055ec:	4b1f      	ldr	r3, [pc, #124]	; (800566c <Vc_Cmv_Task+0x104>)
 80055ee:	791b      	ldrb	r3, [r3, #4]
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055f8:	4b1b      	ldr	r3, [pc, #108]	; (8005668 <Vc_Cmv_Task+0x100>)
 80055fa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80055fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005606:	d815      	bhi.n	8005634 <Vc_Cmv_Task+0xcc>
										if(S5.lock==1)
 8005608:	4b17      	ldr	r3, [pc, #92]	; (8005668 <Vc_Cmv_Task+0x100>)
 800560a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d107      	bne.n	8005620 <Vc_Cmv_Task+0xb8>
											S5.lock=0;
 8005610:	4b15      	ldr	r3, [pc, #84]	; (8005668 <Vc_Cmv_Task+0x100>)
 8005612:	2200      	movs	r2, #0
 8005614:	63da      	str	r2, [r3, #60]	; 0x3c
											vTaskDelay(S5.Lock_delay);
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <Vc_Cmv_Task+0x100>)
 8005618:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800561a:	4618      	mov	r0, r3
 800561c:	f007 fce4 	bl	800cfe8 <vTaskDelay>
										S5.peep_process_done=1;
 8005620:	4b11      	ldr	r3, [pc, #68]	; (8005668 <Vc_Cmv_Task+0x100>)
 8005622:	2201      	movs	r2, #1
 8005624:	645a      	str	r2, [r3, #68]	; 0x44
										ExpValve_CLOSE();
 8005626:	4b0d      	ldr	r3, [pc, #52]	; (800565c <Vc_Cmv_Task+0xf4>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	4a0c      	ldr	r2, [pc, #48]	; (800565c <Vc_Cmv_Task+0xf4>)
 800562c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005630:	6153      	str	r3, [r2, #20]
						break;
 8005632:	e00e      	b.n	8005652 <Vc_Cmv_Task+0xea>
									else if(S5.peep_process_done==0)
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <Vc_Cmv_Task+0x100>)
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <Vc_Cmv_Task+0xea>
										ExpValve_OPEN();
 800563c:	4b07      	ldr	r3, [pc, #28]	; (800565c <Vc_Cmv_Task+0xf4>)
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	4a06      	ldr	r2, [pc, #24]	; (800565c <Vc_Cmv_Task+0xf4>)
 8005642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005646:	6153      	str	r3, [r2, #20]
						break;
 8005648:	e003      	b.n	8005652 <Vc_Cmv_Task+0xea>
						break;
 800564a:	bf00      	nop
 800564c:	e790      	b.n	8005570 <Vc_Cmv_Task+0x8>
						break;
 800564e:	bf00      	nop
 8005650:	e78e      	b.n	8005570 <Vc_Cmv_Task+0x8>
						break;
 8005652:	bf00      	nop
		        switch (_CurrentComputationState)
 8005654:	e78c      	b.n	8005570 <Vc_Cmv_Task+0x8>
 8005656:	bf00      	nop
 8005658:	20004798 	.word	0x20004798
 800565c:	40020400 	.word	0x40020400
 8005660:	20004704 	.word	0x20004704
 8005664:	40007400 	.word	0x40007400
 8005668:	200048fc 	.word	0x200048fc
 800566c:	200047ac 	.word	0x200047ac

08005670 <Vc_cmv_PID_Task>:
	}
}


void Vc_cmv_PID_Task(void *argument)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]


	while (1)
	{
		if(S1._Mode_Val == 2 )
 8005678:	4b14      	ldr	r3, [pc, #80]	; (80056cc <Vc_cmv_PID_Task+0x5c>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d11e      	bne.n	80056be <Vc_cmv_PID_Task+0x4e>
		{
			if(_CurrentComputationState==Compute_I_Wave)
 8005680:	4b13      	ldr	r3, [pc, #76]	; (80056d0 <Vc_cmv_PID_Task+0x60>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <Vc_cmv_PID_Task+0x1e>
			{
				 volume_task();
 8005688:	f000 fa3c 	bl	8005b04 <volume_task>
 800568c:	e017      	b.n	80056be <Vc_cmv_PID_Task+0x4e>

			}
			else if(_CurrentComputationState==Compute_E_Wave)
 800568e:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <Vc_cmv_PID_Task+0x60>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d113      	bne.n	80056be <Vc_cmv_PID_Task+0x4e>
			{
				if(Ach_vol==1)
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <Vc_cmv_PID_Task+0x64>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10c      	bne.n	80056b8 <Vc_cmv_PID_Task+0x48>
				{
					Acheived_Volume=vol.Volume;
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <Vc_cmv_PID_Task+0x68>)
 80056a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80056a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a8:	ee17 3a90 	vmov	r3, s15
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <Vc_cmv_PID_Task+0x6c>)
 80056b0:	801a      	strh	r2, [r3, #0]
					Ach_vol=0;
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <Vc_cmv_PID_Task+0x64>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
				}
				V4._DAC_VAL0=0;
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <Vc_cmv_PID_Task+0x70>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	811a      	strh	r2, [r3, #8]
			}
		}
		vTaskDelay(V4.PID_task_delay);
 80056be:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <Vc_cmv_PID_Task+0x70>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f007 fc90 	bl	800cfe8 <vTaskDelay>
		if(S1._Mode_Val == 2 )
 80056c8:	e7d6      	b.n	8005678 <Vc_cmv_PID_Task+0x8>
 80056ca:	bf00      	nop
 80056cc:	20004644 	.word	0x20004644
 80056d0:	20004798 	.word	0x20004798
 80056d4:	20004980 	.word	0x20004980
 80056d8:	2000482c 	.word	0x2000482c
 80056dc:	20004640 	.word	0x20004640
 80056e0:	20004704 	.word	0x20004704

080056e4 <VC_CMV_Pulse_I_Parameter>:
}



void VC_CMV_Pulse_I_Parameter()
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80056e8:	2201      	movs	r2, #1
 80056ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056ee:	4865      	ldr	r0, [pc, #404]	; (8005884 <VC_CMV_Pulse_I_Parameter+0x1a0>)
 80056f0:	f003 f93c 	bl	800896c <HAL_GPIO_WritePin>
	_I_TIMER_ACHEIVED = 0;
 80056f4:	4b64      	ldr	r3, [pc, #400]	; (8005888 <VC_CMV_Pulse_I_Parameter+0x1a4>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	801a      	strh	r2, [r3, #0]

	               if (V4.F_max > (V1._Flow_Rate +10))
 80056fa:	4b64      	ldr	r3, [pc, #400]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b64      	ldr	r3, [pc, #400]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 8005700:	8a1b      	ldrh	r3, [r3, #16]
 8005702:	330a      	adds	r3, #10
 8005704:	429a      	cmp	r2, r3
 8005706:	dd46      	ble.n	8005796 <VC_CMV_Pulse_I_Parameter+0xb2>
					{
						if (V4.F_max > (V1._Flow_Rate + 20))
 8005708:	4b60      	ldr	r3, [pc, #384]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b60      	ldr	r3, [pc, #384]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 800570e:	8a1b      	ldrh	r3, [r3, #16]
 8005710:	3314      	adds	r3, #20
 8005712:	429a      	cmp	r2, r3
 8005714:	dd06      	ble.n	8005724 <VC_CMV_Pulse_I_Parameter+0x40>
						{
							V4.temp_dac = V4.temp_dac_new - 20;
 8005716:	4b5d      	ldr	r3, [pc, #372]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005718:	88db      	ldrh	r3, [r3, #6]
 800571a:	3b14      	subs	r3, #20
 800571c:	b29a      	uxth	r2, r3
 800571e:	4b5b      	ldr	r3, [pc, #364]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005720:	809a      	strh	r2, [r3, #4]
 8005722:	e02a      	b.n	800577a <VC_CMV_Pulse_I_Parameter+0x96>
						}
						else if ((V4.F_max <= (V1._Flow_Rate + 20))&& (V4.F_max >= (V1._Flow_Rate + 10)))
 8005724:	4b59      	ldr	r3, [pc, #356]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4b59      	ldr	r3, [pc, #356]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 800572a:	8a1b      	ldrh	r3, [r3, #16]
 800572c:	3314      	adds	r3, #20
 800572e:	429a      	cmp	r2, r3
 8005730:	dc0e      	bgt.n	8005750 <VC_CMV_Pulse_I_Parameter+0x6c>
 8005732:	4b57      	ldr	r3, [pc, #348]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 8005734:	8a1b      	ldrh	r3, [r3, #16]
 8005736:	f103 0209 	add.w	r2, r3, #9
 800573a:	4b54      	ldr	r3, [pc, #336]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	da06      	bge.n	8005750 <VC_CMV_Pulse_I_Parameter+0x6c>
						{
							V4.temp_dac = V4.temp_dac_new - 5;
 8005742:	4b52      	ldr	r3, [pc, #328]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005744:	88db      	ldrh	r3, [r3, #6]
 8005746:	3b05      	subs	r3, #5
 8005748:	b29a      	uxth	r2, r3
 800574a:	4b50      	ldr	r3, [pc, #320]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 800574c:	809a      	strh	r2, [r3, #4]
 800574e:	e014      	b.n	800577a <VC_CMV_Pulse_I_Parameter+0x96>
						}
						else if ((V4.F_max < (V1._Flow_Rate + 10)) && (V4.F_max >= (V1._Flow_Rate + 5)))
 8005750:	4b4f      	ldr	r3, [pc, #316]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 8005752:	8a1b      	ldrh	r3, [r3, #16]
 8005754:	f103 0209 	add.w	r2, r3, #9
 8005758:	4b4c      	ldr	r3, [pc, #304]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	db0c      	blt.n	800577a <VC_CMV_Pulse_I_Parameter+0x96>
 8005760:	4b4b      	ldr	r3, [pc, #300]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 8005762:	8a1b      	ldrh	r3, [r3, #16]
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	4b49      	ldr	r3, [pc, #292]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	da05      	bge.n	800577a <VC_CMV_Pulse_I_Parameter+0x96>
						{
							V4.temp_dac = V4.temp_dac_new - 1;
 800576e:	4b47      	ldr	r3, [pc, #284]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005770:	88db      	ldrh	r3, [r3, #6]
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	4b45      	ldr	r3, [pc, #276]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005778:	809a      	strh	r2, [r3, #4]
						}

						V4.temp_dac_new = V4.temp_dac;
 800577a:	4b44      	ldr	r3, [pc, #272]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 800577c:	889a      	ldrh	r2, [r3, #4]
 800577e:	4b43      	ldr	r3, [pc, #268]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005780:	80da      	strh	r2, [r3, #6]
						if (V4.temp_dac_new < 500)
 8005782:	4b42      	ldr	r3, [pc, #264]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005784:	88db      	ldrh	r3, [r3, #6]
 8005786:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800578a:	d22b      	bcs.n	80057e4 <VC_CMV_Pulse_I_Parameter+0x100>
						{
							V4.temp_dac_new = 500;
 800578c:	4b3f      	ldr	r3, [pc, #252]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 800578e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005792:	80da      	strh	r2, [r3, #6]
 8005794:	e026      	b.n	80057e4 <VC_CMV_Pulse_I_Parameter+0x100>
						}
					}
					else if (V4.F_max < (V1._Flow_Rate- 5))
 8005796:	4b3d      	ldr	r3, [pc, #244]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b3d      	ldr	r3, [pc, #244]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 800579c:	8a1b      	ldrh	r3, [r3, #16]
 800579e:	3b05      	subs	r3, #5
 80057a0:	429a      	cmp	r2, r3
 80057a2:	da17      	bge.n	80057d4 <VC_CMV_Pulse_I_Parameter+0xf0>
					{
						if (V3.max_flow_acheived == 0)
 80057a4:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <VC_CMV_Pulse_I_Parameter+0x1b0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d11b      	bne.n	80057e4 <VC_CMV_Pulse_I_Parameter+0x100>
						{
							V4.temp_dac = V4.temp_dac_new + 30;
 80057ac:	4b37      	ldr	r3, [pc, #220]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057ae:	88db      	ldrh	r3, [r3, #6]
 80057b0:	331e      	adds	r3, #30
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	4b35      	ldr	r3, [pc, #212]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057b6:	809a      	strh	r2, [r3, #4]
							V4.temp_dac_new = V4.temp_dac;
 80057b8:	4b34      	ldr	r3, [pc, #208]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057ba:	889a      	ldrh	r2, [r3, #4]
 80057bc:	4b33      	ldr	r3, [pc, #204]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057be:	80da      	strh	r2, [r3, #6]

								if (V4.temp_dac_new > 4095)
 80057c0:	4b32      	ldr	r3, [pc, #200]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057c2:	88db      	ldrh	r3, [r3, #6]
 80057c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c8:	d30c      	bcc.n	80057e4 <VC_CMV_Pulse_I_Parameter+0x100>
								{
									V4.temp_dac_new = 1300;
 80057ca:	4b30      	ldr	r3, [pc, #192]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057cc:	f240 5214 	movw	r2, #1300	; 0x514
 80057d0:	80da      	strh	r2, [r3, #6]
 80057d2:	e007      	b.n	80057e4 <VC_CMV_Pulse_I_Parameter+0x100>
						}

					}
					else
					{
						V4.temp_dac = V4.temp_dac_new;
 80057d4:	4b2d      	ldr	r3, [pc, #180]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057d6:	88da      	ldrh	r2, [r3, #6]
 80057d8:	4b2c      	ldr	r3, [pc, #176]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057da:	809a      	strh	r2, [r3, #4]
						V4.temp_dac_new = V4.temp_dac;
 80057dc:	4b2b      	ldr	r3, [pc, #172]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057de:	889a      	ldrh	r2, [r3, #4]
 80057e0:	4b2a      	ldr	r3, [pc, #168]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057e2:	80da      	strh	r2, [r3, #6]
					}


	               V3.max_flow_acheived = 0;
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <VC_CMV_Pulse_I_Parameter+0x1b0>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]
	               V3.constant_dac_done = 1;
 80057ea:	4b2a      	ldr	r3, [pc, #168]	; (8005894 <VC_CMV_Pulse_I_Parameter+0x1b0>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	605a      	str	r2, [r3, #4]
	               V3.Reached_flow_val = 0;
 80057f0:	4b28      	ldr	r3, [pc, #160]	; (8005894 <VC_CMV_Pulse_I_Parameter+0x1b0>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
	               V4.F_max = 0;
 80057f6:	4b25      	ldr	r3, [pc, #148]	; (800588c <VC_CMV_Pulse_I_Parameter+0x1a8>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
	               V3.sensordata_done = 1;
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <VC_CMV_Pulse_I_Parameter+0x1b0>)
 80057fe:	2201      	movs	r2, #1
 8005800:	60da      	str	r2, [r3, #12]
	               V3.Volume_acheived = 1;
 8005802:	4b24      	ldr	r3, [pc, #144]	; (8005894 <VC_CMV_Pulse_I_Parameter+0x1b0>)
 8005804:	2201      	movs	r2, #1
 8005806:	611a      	str	r2, [r3, #16]
	               vol.Volume = 0;
 8005808:	4b23      	ldr	r3, [pc, #140]	; (8005898 <VC_CMV_Pulse_I_Parameter+0x1b4>)
 800580a:	f04f 0200 	mov.w	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
	               V3.volume_reached = 0;
 8005810:	4b20      	ldr	r3, [pc, #128]	; (8005894 <VC_CMV_Pulse_I_Parameter+0x1b0>)
 8005812:	2200      	movs	r2, #0
 8005814:	615a      	str	r2, [r3, #20]


	               Peep_Vale_Lock_delay_Vc_cmv();
 8005816:	f000 f9f5 	bl	8005c04 <Peep_Vale_Lock_delay_Vc_cmv>

	               Ach_vol=1;
 800581a:	4b20      	ldr	r3, [pc, #128]	; (800589c <VC_CMV_Pulse_I_Parameter+0x1b8>)
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]
	               if(Acheived_Volume>(V1._VT_Val+20))
 8005820:	4b1f      	ldr	r3, [pc, #124]	; (80058a0 <VC_CMV_Pulse_I_Parameter+0x1bc>)
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	4b1a      	ldr	r3, [pc, #104]	; (8005890 <VC_CMV_Pulse_I_Parameter+0x1ac>)
 8005828:	8a9b      	ldrh	r3, [r3, #20]
 800582a:	3314      	adds	r3, #20
 800582c:	429a      	cmp	r2, r3
 800582e:	dd11      	ble.n	8005854 <VC_CMV_Pulse_I_Parameter+0x170>
	               {
						check_count++;
 8005830:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <VC_CMV_Pulse_I_Parameter+0x1c0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	4a1b      	ldr	r2, [pc, #108]	; (80058a4 <VC_CMV_Pulse_I_Parameter+0x1c0>)
 8005838:	6013      	str	r3, [r2, #0]
						if (check_count >= 3)
 800583a:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <VC_CMV_Pulse_I_Parameter+0x1c0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	dd08      	ble.n	8005854 <VC_CMV_Pulse_I_Parameter+0x170>
						{
							check_dev = check_dev + 5;
 8005842:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <VC_CMV_Pulse_I_Parameter+0x1c4>)
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	3305      	adds	r3, #5
 8005848:	b29a      	uxth	r2, r3
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <VC_CMV_Pulse_I_Parameter+0x1c4>)
 800584c:	801a      	strh	r2, [r3, #0]
							check_count = 0;
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <VC_CMV_Pulse_I_Parameter+0x1c0>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
						}
	               	}

	 _I_TIMER = V2._I_TIMER_HOLD;
 8005854:	4b15      	ldr	r3, [pc, #84]	; (80058ac <VC_CMV_Pulse_I_Parameter+0x1c8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <VC_CMV_Pulse_I_Parameter+0x1cc>)
 800585a:	6013      	str	r3, [r2, #0]
	_Control_Byte &= (uint8_t) (~(0x80));
 800585c:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <VC_CMV_Pulse_I_Parameter+0x1d0>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005864:	b2da      	uxtb	r2, r3
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <VC_CMV_Pulse_I_Parameter+0x1d0>)
 8005868:	701a      	strb	r2, [r3, #0]
	_CurrentWaveFormState = Generate_E_Wave;
 800586a:	4b13      	ldr	r3, [pc, #76]	; (80058b8 <VC_CMV_Pulse_I_Parameter+0x1d4>)
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_I_Wave ;
 8005870:	4b12      	ldr	r3, [pc, #72]	; (80058bc <VC_CMV_Pulse_I_Parameter+0x1d8>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
	vTaskDelay(V2._I_TIMER_HOLD);
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <VC_CMV_Pulse_I_Parameter+0x1c8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f007 fbb4 	bl	800cfe8 <vTaskDelay>

}
 8005880:	bf00      	nop
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40020400 	.word	0x40020400
 8005888:	20004658 	.word	0x20004658
 800588c:	20004704 	.word	0x20004704
 8005890:	20004628 	.word	0x20004628
 8005894:	20004590 	.word	0x20004590
 8005898:	2000482c 	.word	0x2000482c
 800589c:	20004980 	.word	0x20004980
 80058a0:	20004640 	.word	0x20004640
 80058a4:	20004970 	.word	0x20004970
 80058a8:	200046d4 	.word	0x200046d4
 80058ac:	20004968 	.word	0x20004968
 80058b0:	200048f8 	.word	0x200048f8
 80058b4:	20004944 	.word	0x20004944
 80058b8:	20004642 	.word	0x20004642
 80058bc:	20004798 	.word	0x20004798

080058c0 <VC_CMV_Pulse_E_Parameter>:


void VC_CMV_Pulse_E_Parameter()
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
	_E_TIMER_ACHEIVED = 0;
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <VC_CMV_Pulse_E_Parameter+0x3c>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	801a      	strh	r2, [r3, #0]
	_E_TIMER = V2._E_TIMER_HOLD;
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <VC_CMV_Pulse_E_Parameter+0x40>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <VC_CMV_Pulse_E_Parameter+0x44>)
 80058d0:	6013      	str	r3, [r2, #0]
	_CurrentWaveFormState = Generate_I_Wave;
 80058d2:	4b0d      	ldr	r3, [pc, #52]	; (8005908 <VC_CMV_Pulse_E_Parameter+0x48>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
	_CurrentComputationState = Compute_E_Wave ;
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <VC_CMV_Pulse_E_Parameter+0x4c>)
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
	_Control_Byte |= (uint8_t) 0x80;
 80058de:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <VC_CMV_Pulse_E_Parameter+0x50>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <VC_CMV_Pulse_E_Parameter+0x50>)
 80058ea:	701a      	strb	r2, [r3, #0]
	vTaskDelay(V2._E_TIMER_HOLD);
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <VC_CMV_Pulse_E_Parameter+0x40>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f007 fb79 	bl	800cfe8 <vTaskDelay>
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20004964 	.word	0x20004964
 8005900:	20004968 	.word	0x20004968
 8005904:	20004848 	.word	0x20004848
 8005908:	20004642 	.word	0x20004642
 800590c:	20004798 	.word	0x20004798
 8005910:	20004944 	.word	0x20004944

08005914 <VC_CMV_PARAMETERS>:

void VC_CMV_PARAMETERS(SET_PARAM_CMD_PACKET *RX_PARAM_CMD_PACKET)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

			V1._VT_Val = RX_PARAM_CMD_PACKET->_VTI;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	88db      	ldrh	r3, [r3, #6]
 8005920:	b29a      	uxth	r2, r3
 8005922:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005924:	829a      	strh	r2, [r3, #20]
			V1._PEEP_Val = RX_PARAM_CMD_PACKET->_PEEP;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	795a      	ldrb	r2, [r3, #5]
 800592a:	4b61      	ldr	r3, [pc, #388]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 800592c:	705a      	strb	r2, [r3, #1]
			V1.CycleTime = 60000 / RX_PARAM_CMD_PACKET->_RR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7a5b      	ldrb	r3, [r3, #9]
 8005932:	461a      	mov	r2, r3
 8005934:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005938:	fb93 f3f2 	sdiv	r3, r3, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4b5c      	ldr	r3, [pc, #368]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005940:	605a      	str	r2, [r3, #4]
			V1.I_Time = (0xF0 & RX_PARAM_CMD_PACKET->_I_E) >> 4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	7a1b      	ldrb	r3, [r3, #8]
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	4b58      	ldr	r3, [pc, #352]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 800594e:	609a      	str	r2, [r3, #8]
			V1.E_Time = 0x0F & (RX_PARAM_CMD_PACKET->_I_E);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7a1b      	ldrb	r3, [r3, #8]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	4a55      	ldr	r2, [pc, #340]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 800595a:	60d3      	str	r3, [r2, #12]
			V1._Flow_Rate=RX_PARAM_CMD_PACKET->_FlowRate;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	7b1b      	ldrb	r3, [r3, #12]
 8005960:	b29a      	uxth	r2, r3
 8005962:	4b53      	ldr	r3, [pc, #332]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005964:	821a      	strh	r2, [r3, #16]
			V1.RR=RX_PARAM_CMD_PACKET->_RR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	7a5a      	ldrb	r2, [r3, #9]
 800596a:	4b51      	ldr	r3, [pc, #324]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 800596c:	749a      	strb	r2, [r3, #18]
			_FIO2_Val = RX_PARAM_CMD_PACKET->_FIO2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	7a9a      	ldrb	r2, [r3, #10]
 8005972:	4b50      	ldr	r3, [pc, #320]	; (8005ab4 <VC_CMV_PARAMETERS+0x1a0>)
 8005974:	701a      	strb	r2, [r3, #0]

			V2._I_TIMER_HOLD = (V1.I_Time * (V1.CycleTime / (V1.I_Time +V1.E_Time)));
 8005976:	4b4e      	ldr	r3, [pc, #312]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4a4d      	ldr	r2, [pc, #308]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 800597c:	6851      	ldr	r1, [r2, #4]
 800597e:	4a4c      	ldr	r2, [pc, #304]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005980:	6890      	ldr	r0, [r2, #8]
 8005982:	4a4b      	ldr	r2, [pc, #300]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005984:	68d2      	ldr	r2, [r2, #12]
 8005986:	4402      	add	r2, r0
 8005988:	fbb1 f2f2 	udiv	r2, r1, r2
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	4a49      	ldr	r2, [pc, #292]	; (8005ab8 <VC_CMV_PARAMETERS+0x1a4>)
 8005992:	6013      	str	r3, [r2, #0]
			V2._E_TIMER_HOLD = (V1.E_Time * (V1.CycleTime / (V1.I_Time + V1.E_Time)));
 8005994:	4b46      	ldr	r3, [pc, #280]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	4a45      	ldr	r2, [pc, #276]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 800599a:	6851      	ldr	r1, [r2, #4]
 800599c:	4a44      	ldr	r2, [pc, #272]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 800599e:	6890      	ldr	r0, [r2, #8]
 80059a0:	4a43      	ldr	r2, [pc, #268]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 80059a2:	68d2      	ldr	r2, [r2, #12]
 80059a4:	4402      	add	r2, r0
 80059a6:	fbb1 f2f2 	udiv	r2, r1, r2
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	4a42      	ldr	r2, [pc, #264]	; (8005ab8 <VC_CMV_PARAMETERS+0x1a4>)
 80059b0:	6053      	str	r3, [r2, #4]
			V4.PID_task_delay=10;
 80059b2:	4b42      	ldr	r3, [pc, #264]	; (8005abc <VC_CMV_PARAMETERS+0x1a8>)
 80059b4:	220a      	movs	r2, #10
 80059b6:	60da      	str	r2, [r3, #12]

			S5.Lock_delay=200;
 80059b8:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <VC_CMV_PARAMETERS+0x1ac>)
 80059ba:	22c8      	movs	r2, #200	; 0xc8
 80059bc:	869a      	strh	r2, [r3, #52]	; 0x34
			S5._Set_Peep=V1._PEEP_Val/2;
 80059be:	4b3c      	ldr	r3, [pc, #240]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 80059c0:	785b      	ldrb	r3, [r3, #1]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ce:	4b3c      	ldr	r3, [pc, #240]	; (8005ac0 <VC_CMV_PARAMETERS+0x1ac>)
 80059d0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			check_dev=0;
 80059d4:	4b3b      	ldr	r3, [pc, #236]	; (8005ac4 <VC_CMV_PARAMETERS+0x1b0>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	801a      	strh	r2, [r3, #0]


			if(V1._Flow_Rate>=60)
 80059da:	4b35      	ldr	r3, [pc, #212]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 80059dc:	8a1b      	ldrh	r3, [r3, #16]
 80059de:	2b3b      	cmp	r3, #59	; 0x3b
 80059e0:	d904      	bls.n	80059ec <VC_CMV_PARAMETERS+0xd8>
				V4.temp_dac_new = 900;
 80059e2:	4b36      	ldr	r3, [pc, #216]	; (8005abc <VC_CMV_PARAMETERS+0x1a8>)
 80059e4:	f44f 7261 	mov.w	r2, #900	; 0x384
 80059e8:	80da      	strh	r2, [r3, #6]
 80059ea:	e018      	b.n	8005a1e <VC_CMV_PARAMETERS+0x10a>
			else if(V1._Flow_Rate<60 && V1._Flow_Rate>=40 )
 80059ec:	4b30      	ldr	r3, [pc, #192]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 80059ee:	8a1b      	ldrh	r3, [r3, #16]
 80059f0:	2b3b      	cmp	r3, #59	; 0x3b
 80059f2:	d808      	bhi.n	8005a06 <VC_CMV_PARAMETERS+0xf2>
 80059f4:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 80059f6:	8a1b      	ldrh	r3, [r3, #16]
 80059f8:	2b27      	cmp	r3, #39	; 0x27
 80059fa:	d904      	bls.n	8005a06 <VC_CMV_PARAMETERS+0xf2>
				V4.temp_dac_new = 800;
 80059fc:	4b2f      	ldr	r3, [pc, #188]	; (8005abc <VC_CMV_PARAMETERS+0x1a8>)
 80059fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005a02:	80da      	strh	r2, [r3, #6]
 8005a04:	e00b      	b.n	8005a1e <VC_CMV_PARAMETERS+0x10a>
			else if(V1._Flow_Rate<40 && V1._Flow_Rate>10 )
 8005a06:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005a08:	8a1b      	ldrh	r3, [r3, #16]
 8005a0a:	2b27      	cmp	r3, #39	; 0x27
 8005a0c:	d807      	bhi.n	8005a1e <VC_CMV_PARAMETERS+0x10a>
 8005a0e:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <VC_CMV_PARAMETERS+0x19c>)
 8005a10:	8a1b      	ldrh	r3, [r3, #16]
 8005a12:	2b0a      	cmp	r3, #10
 8005a14:	d903      	bls.n	8005a1e <VC_CMV_PARAMETERS+0x10a>
				V4.temp_dac_new = 700;
 8005a16:	4b29      	ldr	r3, [pc, #164]	; (8005abc <VC_CMV_PARAMETERS+0x1a8>)
 8005a18:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8005a1c:	80da      	strh	r2, [r3, #6]

			FiO2_old=_FIO2_Val;
 8005a1e:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <VC_CMV_PARAMETERS+0x1a0>)
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <VC_CMV_PARAMETERS+0x1b4>)
 8005a24:	701a      	strb	r2, [r3, #0]




			vTaskSuspend(pc_mode_Handler);
 8005a26:	4b29      	ldr	r3, [pc, #164]	; (8005acc <VC_CMV_PARAMETERS+0x1b8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f007 fb10 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_cmv_Pid_Handler);
 8005a30:	4b27      	ldr	r3, [pc, #156]	; (8005ad0 <VC_CMV_PARAMETERS+0x1bc>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f007 fb0b 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Handler);
 8005a3a:	4b26      	ldr	r3, [pc, #152]	; (8005ad4 <VC_CMV_PARAMETERS+0x1c0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f007 fb06 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Pc_simv_Mode_Pid_Handler);
 8005a44:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <VC_CMV_PARAMETERS+0x1c4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f007 fb01 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_simv_mode_Handler);
 8005a4e:	4b23      	ldr	r3, [pc, #140]	; (8005adc <VC_CMV_PARAMETERS+0x1c8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f007 fafc 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Vc_cmv_simv_Pid_Handler);
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <VC_CMV_PARAMETERS+0x1cc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f007 faf7 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Psv_Handler);
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <VC_CMV_PARAMETERS+0x1d0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f007 faf2 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 8005a6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <VC_CMV_PARAMETERS+0x1d4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f007 faed 	bl	800d050 <vTaskSuspend>
			vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 8005a76:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <VC_CMV_PARAMETERS+0x1d8>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f007 fae8 	bl	800d050 <vTaskSuspend>
			vTaskResume(Vc_mode_Handler);
 8005a80:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <VC_CMV_PARAMETERS+0x1dc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f007 fba7 	bl	800d1d8 <vTaskResume>
			vTaskResume(Vc_cmv_Pid_Handler);
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	; (8005af4 <VC_CMV_PARAMETERS+0x1e0>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f007 fba2 	bl	800d1d8 <vTaskResume>
			_CurrentMode=VCCMV;
 8005a94:	4b18      	ldr	r3, [pc, #96]	; (8005af8 <VC_CMV_PARAMETERS+0x1e4>)
 8005a96:	2202      	movs	r2, #2
 8005a98:	701a      	strb	r2, [r3, #0]
			_CurrentWaveFormState = Generate_E_Wave;
 8005a9a:	4b18      	ldr	r3, [pc, #96]	; (8005afc <VC_CMV_PARAMETERS+0x1e8>)
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	701a      	strb	r2, [r3, #0]
			_CurrentComputationState = Compute_E_Wave ;
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <VC_CMV_PARAMETERS+0x1ec>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]




}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20004628 	.word	0x20004628
 8005ab4:	2000466d 	.word	0x2000466d
 8005ab8:	20004968 	.word	0x20004968
 8005abc:	20004704 	.word	0x20004704
 8005ac0:	200048fc 	.word	0x200048fc
 8005ac4:	200046d4 	.word	0x200046d4
 8005ac8:	200048f0 	.word	0x200048f0
 8005acc:	20004614 	.word	0x20004614
 8005ad0:	2000460c 	.word	0x2000460c
 8005ad4:	20004948 	.word	0x20004948
 8005ad8:	20004960 	.word	0x20004960
 8005adc:	20004728 	.word	0x20004728
 8005ae0:	200048f4 	.word	0x200048f4
 8005ae4:	200046d8 	.word	0x200046d8
 8005ae8:	200046d0 	.word	0x200046d0
 8005aec:	200047e4 	.word	0x200047e4
 8005af0:	2000484c 	.word	0x2000484c
 8005af4:	200045a8 	.word	0x200045a8
 8005af8:	200046e8 	.word	0x200046e8
 8005afc:	20004642 	.word	0x20004642
 8005b00:	20004798 	.word	0x20004798

08005b04 <volume_task>:




void volume_task()
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0

	        	if(_CurrentComputationState==Compute_I_Wave)
 8005b08:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <volume_task+0xe0>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d166      	bne.n	8005bde <volume_task+0xda>
				{

					if(vol.Volume<(V1._VT_Val-check_dev))
 8005b10:	4b35      	ldr	r3, [pc, #212]	; (8005be8 <volume_task+0xe4>)
 8005b12:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b16:	4b35      	ldr	r3, [pc, #212]	; (8005bec <volume_task+0xe8>)
 8005b18:	8a9b      	ldrh	r3, [r3, #20]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	4b34      	ldr	r3, [pc, #208]	; (8005bf0 <volume_task+0xec>)
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b32:	d544      	bpl.n	8005bbe <volume_task+0xba>
					{
					 if(V3.volume_reached==0)
 8005b34:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <volume_task+0xf0>)
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d150      	bne.n	8005bde <volume_task+0xda>
					 {
						if(V3.constant_dac_done==0)
 8005b3c:	4b2d      	ldr	r3, [pc, #180]	; (8005bf4 <volume_task+0xf0>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d113      	bne.n	8005b6c <volume_task+0x68>
				        {
								V4._DAC_VAL0=V4.temp_dac+3;
 8005b44:	4b2c      	ldr	r3, [pc, #176]	; (8005bf8 <volume_task+0xf4>)
 8005b46:	889b      	ldrh	r3, [r3, #4]
 8005b48:	3303      	adds	r3, #3
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	4b2a      	ldr	r3, [pc, #168]	; (8005bf8 <volume_task+0xf4>)
 8005b4e:	811a      	strh	r2, [r3, #8]
								V4.temp_dac=V4._DAC_VAL0;
 8005b50:	4b29      	ldr	r3, [pc, #164]	; (8005bf8 <volume_task+0xf4>)
 8005b52:	891a      	ldrh	r2, [r3, #8]
 8005b54:	4b28      	ldr	r3, [pc, #160]	; (8005bf8 <volume_task+0xf4>)
 8005b56:	809a      	strh	r2, [r3, #4]
							    if(V4._DAC_VAL0>4094)
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <volume_task+0xf4>)
 8005b5a:	891b      	ldrh	r3, [r3, #8]
 8005b5c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d903      	bls.n	8005b6c <volume_task+0x68>
							    {
							    	V4._DAC_VAL0=4094;
 8005b64:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <volume_task+0xf4>)
 8005b66:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005b6a:	811a      	strh	r2, [r3, #8]
							    }
				        }

						  if(Flow_Sensor_cal._Flow_Val>=V1._Flow_Rate)
 8005b6c:	4b23      	ldr	r3, [pc, #140]	; (8005bfc <volume_task+0xf8>)
 8005b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b70:	4a1e      	ldr	r2, [pc, #120]	; (8005bec <volume_task+0xe8>)
 8005b72:	8a12      	ldrh	r2, [r2, #16]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	db13      	blt.n	8005ba0 <volume_task+0x9c>
						  {

							      V3.max_flow_acheived=1;
 8005b78:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <volume_task+0xf0>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
								  V3.Reached_flow_val=Flow_Sensor_cal._Flow_Val;
 8005b7e:	4b1f      	ldr	r3, [pc, #124]	; (8005bfc <volume_task+0xf8>)
 8005b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <volume_task+0xf0>)
 8005b84:	6093      	str	r3, [r2, #8]
								  V3.constant_dac_done=0;
 8005b86:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <volume_task+0xf0>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	605a      	str	r2, [r3, #4]
								  if(Flow_Sensor_cal._Flow_Val>V4.F_max)
 8005b8c:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <volume_task+0xf8>)
 8005b8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b90:	4b19      	ldr	r3, [pc, #100]	; (8005bf8 <volume_task+0xf4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	dd03      	ble.n	8005ba0 <volume_task+0x9c>
								  {
									  V4.F_max=Flow_Sensor_cal._Flow_Val;
 8005b98:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <volume_task+0xf8>)
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9c:	4a16      	ldr	r2, [pc, #88]	; (8005bf8 <volume_task+0xf4>)
 8005b9e:	6013      	str	r3, [r2, #0]




						  }
						  if(Flow_Sensor_cal._Flow_Val<V1._Flow_Rate)
 8005ba0:	4b16      	ldr	r3, [pc, #88]	; (8005bfc <volume_task+0xf8>)
 8005ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba4:	4a11      	ldr	r2, [pc, #68]	; (8005bec <volume_task+0xe8>)
 8005ba6:	8a12      	ldrh	r2, [r2, #16]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	da18      	bge.n	8005bde <volume_task+0xda>
						  {

							    if(V3.constant_dac_done==1)
 8005bac:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <volume_task+0xf0>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d114      	bne.n	8005bde <volume_task+0xda>
							    {
							    	V4._DAC_VAL0=V4.temp_dac;
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <volume_task+0xf4>)
 8005bb6:	889a      	ldrh	r2, [r3, #4]
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <volume_task+0xf4>)
 8005bba:	811a      	strh	r2, [r3, #8]

					}

				}

}
 8005bbc:	e00f      	b.n	8005bde <volume_task+0xda>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bc4:	480e      	ldr	r0, [pc, #56]	; (8005c00 <volume_task+0xfc>)
 8005bc6:	f002 fed1 	bl	800896c <HAL_GPIO_WritePin>
						V3.volume_reached=1;
 8005bca:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <volume_task+0xf0>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	615a      	str	r2, [r3, #20]
						V4._DAC_VAL0=0;
 8005bd0:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <volume_task+0xf4>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	811a      	strh	r2, [r3, #8]
						V4.temp_dac=V4.temp_dac_new;
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <volume_task+0xf4>)
 8005bd8:	88da      	ldrh	r2, [r3, #6]
 8005bda:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <volume_task+0xf4>)
 8005bdc:	809a      	strh	r2, [r3, #4]
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20004798 	.word	0x20004798
 8005be8:	2000482c 	.word	0x2000482c
 8005bec:	20004628 	.word	0x20004628
 8005bf0:	200046d4 	.word	0x200046d4
 8005bf4:	20004590 	.word	0x20004590
 8005bf8:	20004704 	.word	0x20004704
 8005bfc:	20004730 	.word	0x20004730
 8005c00:	40020400 	.word	0x40020400

08005c04 <Peep_Vale_Lock_delay_Vc_cmv>:




void Peep_Vale_Lock_delay_Vc_cmv()
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
		S5._Pip_Avg_val = S5._Pip_Avg / S5._Pip_Avg_count;
 8005c08:	4b68      	ldr	r3, [pc, #416]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c0a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c0e:	4b67      	ldr	r3, [pc, #412]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c10:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c18:	4b64      	ldr	r3, [pc, #400]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c1a:	edc3 7a04 	vstr	s15, [r3, #16]
		S5._Pip_Avg_val_int = S5._Pip_Avg_val;
 8005c1e:	4b63      	ldr	r3, [pc, #396]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c28:	ee17 2a90 	vmov	r2, s15
 8005c2c:	4b5f      	ldr	r3, [pc, #380]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c2e:	625a      	str	r2, [r3, #36]	; 0x24
		S5._Pip_Avg_count = 0;
 8005c30:	4b5e      	ldr	r3, [pc, #376]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	60da      	str	r2, [r3, #12]
		S5._Pip_Avg = 0;
 8005c38:	4b5c      	ldr	r3, [pc, #368]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]

		S5._Peep_Avg_val = S5._Peep_Avg / S5._Peep_Avg_count;
 8005c40:	4b5a      	ldr	r3, [pc, #360]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c42:	edd3 6a05 	vldr	s13, [r3, #20]
 8005c46:	4b59      	ldr	r3, [pc, #356]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c48:	ed93 7a06 	vldr	s14, [r3, #24]
 8005c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c50:	4b56      	ldr	r3, [pc, #344]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c52:	edc3 7a07 	vstr	s15, [r3, #28]
		S5._Peep_Avg_val_int = S5._Peep_Avg_val;
 8005c56:	4b55      	ldr	r3, [pc, #340]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c58:	edd3 7a07 	vldr	s15, [r3, #28]
 8005c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c60:	ee17 2a90 	vmov	r2, s15
 8005c64:	4b51      	ldr	r3, [pc, #324]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c66:	621a      	str	r2, [r3, #32]

		if (V1.RR >= 30 || V2._E_TIMER_HOLD < 500)
 8005c68:	4b51      	ldr	r3, [pc, #324]	; (8005db0 <Peep_Vale_Lock_delay_Vc_cmv+0x1ac>)
 8005c6a:	7c9b      	ldrb	r3, [r3, #18]
 8005c6c:	2b1d      	cmp	r3, #29
 8005c6e:	d804      	bhi.n	8005c7a <Peep_Vale_Lock_delay_Vc_cmv+0x76>
 8005c70:	4b50      	ldr	r3, [pc, #320]	; (8005db4 <Peep_Vale_Lock_delay_Vc_cmv+0x1b0>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005c78:	d203      	bcs.n	8005c82 <Peep_Vale_Lock_delay_Vc_cmv+0x7e>
		{
			S5._Peep_Avg_val_int = S5.peep_max;
 8005c7a:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	4a4b      	ldr	r2, [pc, #300]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c80:	6213      	str	r3, [r2, #32]
		}

		if (S5._Peep_Avg_val_int > (V1._PEEP_Val + 1))
 8005c82:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	4b4a      	ldr	r3, [pc, #296]	; (8005db0 <Peep_Vale_Lock_delay_Vc_cmv+0x1ac>)
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	dd32      	ble.n	8005cf6 <Peep_Vale_Lock_delay_Vc_cmv+0xf2>
		{
			S5._Set_Peep = S5._Set_Peep - 0.5f;
 8005c90:	4b46      	ldr	r3, [pc, #280]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005c92:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005c96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c9e:	4b43      	ldr	r3, [pc, #268]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005ca0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			S5.error_count++;
 8005ca4:	4b41      	ldr	r3, [pc, #260]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a40      	ldr	r2, [pc, #256]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cac:	6293      	str	r3, [r2, #40]	; 0x28
			if (S5.error_count > 0)
 8005cae:	4b3f      	ldr	r3, [pc, #252]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	dd11      	ble.n	8005cda <Peep_Vale_Lock_delay_Vc_cmv+0xd6>
			{
				S5.Lock_delay = S5.Lock_delay + 10;
 8005cb6:	4b3d      	ldr	r3, [pc, #244]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cb8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005cba:	330a      	adds	r3, #10
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cc0:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8005cc2:	4b3a      	ldr	r3, [pc, #232]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay > 500)
 8005cc8:	4b38      	ldr	r3, [pc, #224]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005ccc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005cd0:	d903      	bls.n	8005cda <Peep_Vale_Lock_delay_Vc_cmv+0xd6>
					S5.Lock_delay = 500;
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005cd8:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep <= 3)
 8005cda:	4b34      	ldr	r3, [pc, #208]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cdc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005ce0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cec:	d851      	bhi.n	8005d92 <Peep_Vale_Lock_delay_Vc_cmv+0x18e>
			{
				S5._Set_Peep = 3;
 8005cee:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cf0:	4a31      	ldr	r2, [pc, #196]	; (8005db8 <Peep_Vale_Lock_delay_Vc_cmv+0x1b4>)
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf4:	e04d      	b.n	8005d92 <Peep_Vale_Lock_delay_Vc_cmv+0x18e>
			}
		}
		else if (S5._Peep_Avg_val_int < (V1._PEEP_Val - 1))
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <Peep_Vale_Lock_delay_Vc_cmv+0x1ac>)
 8005cfc:	785b      	ldrb	r3, [r3, #1]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	429a      	cmp	r2, r3
 8005d02:	da42      	bge.n	8005d8a <Peep_Vale_Lock_delay_Vc_cmv+0x186>
		{
			S5._Set_Peep = S5._Set_Peep + 0.5f;
 8005d04:	4b29      	ldr	r3, [pc, #164]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d06:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005d0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d12:	4b26      	ldr	r3, [pc, #152]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d14:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

			S5.error_count2++;
 8005d18:	4b24      	ldr	r3, [pc, #144]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a23      	ldr	r2, [pc, #140]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d20:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (S5.error_count2 > 0)
 8005d22:	4b22      	ldr	r3, [pc, #136]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd14      	ble.n	8005d54 <Peep_Vale_Lock_delay_Vc_cmv+0x150>
			{
				S5.Lock_delay = S5.Lock_delay - 10;
 8005d2a:	4b20      	ldr	r3, [pc, #128]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d2c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005d2e:	3b0a      	subs	r3, #10
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	4b1e      	ldr	r3, [pc, #120]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d34:	869a      	strh	r2, [r3, #52]	; 0x34
				S5.error_count = 0;
 8005d36:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28
				if (S5.Lock_delay < 1 || S5.Lock_delay > 500)
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d3e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <Peep_Vale_Lock_delay_Vc_cmv+0x14a>
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d46:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005d48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005d4c:	d902      	bls.n	8005d54 <Peep_Vale_Lock_delay_Vc_cmv+0x150>
					S5.Lock_delay = 1;
 8005d4e:	4b17      	ldr	r3, [pc, #92]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	869a      	strh	r2, [r3, #52]	; 0x34
			}
			if (S5._Set_Peep > V1._PEEP_Val + 2)
 8005d54:	4b15      	ldr	r3, [pc, #84]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d56:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <Peep_Vale_Lock_delay_Vc_cmv+0x1ac>)
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	3302      	adds	r3, #2
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d70:	dd0f      	ble.n	8005d92 <Peep_Vale_Lock_delay_Vc_cmv+0x18e>
			{
				S5._Set_Peep = V1._PEEP_Val / 2;
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <Peep_Vale_Lock_delay_Vc_cmv+0x1ac>)
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d84:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8005d88:	e003      	b.n	8005d92 <Peep_Vale_Lock_delay_Vc_cmv+0x18e>
			}
		}
		else
		{
			S5._Set_Peep = S5._Set_Peep;
 8005d8a:	4b08      	ldr	r3, [pc, #32]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4a07      	ldr	r2, [pc, #28]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d90:	6313      	str	r3, [r2, #48]	; 0x30
		}
		S5._Peep_Avg_count = 0;
 8005d92:	4b06      	ldr	r3, [pc, #24]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	619a      	str	r2, [r3, #24]
		S5._Peep_Avg = 0;
 8005d9a:	4b04      	ldr	r3, [pc, #16]	; (8005dac <Peep_Vale_Lock_delay_Vc_cmv+0x1a8>)
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	615a      	str	r2, [r3, #20]
}
 8005da2:	bf00      	nop
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	200048fc 	.word	0x200048fc
 8005db0:	20004628 	.word	0x20004628
 8005db4:	20004968 	.word	0x20004968
 8005db8:	40400000 	.word	0x40400000

08005dbc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4a06      	ldr	r2, [pc, #24]	; (8005dec <vApplicationGetIdleTaskMemory+0x30>)
 8005dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2280      	movs	r2, #128	; 0x80
 8005dd8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000034 	.word	0x20000034
 8005dec:	20000088 	.word	0x20000088

08005df0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a07      	ldr	r2, [pc, #28]	; (8005e1c <vApplicationGetTimerTaskMemory+0x2c>)
 8005e00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <vApplicationGetTimerTaskMemory+0x30>)
 8005e06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e0e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	20000288 	.word	0x20000288
 8005e20:	200002dc 	.word	0x200002dc

08005e24 <Pressure_Min_Max>:




void Pressure_Min_Max()
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
		if (Pressure_sensor._Pressure_Val < (S5.P_Min))
 8005e28:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <Pressure_Min_Max+0x54>)
 8005e2a:	791b      	ldrb	r3, [r3, #4]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <Pressure_Min_Max+0x58>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	da0c      	bge.n	8005e50 <Pressure_Min_Max+0x2c>
		{
			if (S5.now_check == 1)
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <Pressure_Min_Max+0x58>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d108      	bne.n	8005e50 <Pressure_Min_Max+0x2c>
			{
				if(_CurrentComputationState==Compute_I_Wave)
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <Pressure_Min_Max+0x5c>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <Pressure_Min_Max+0x2c>
				{

					S5.P_Min = Pressure_sensor._Pressure_Val;
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <Pressure_Min_Max+0x54>)
 8005e48:	791b      	ldrb	r3, [r3, #4]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <Pressure_Min_Max+0x58>)
 8005e4e:	605a      	str	r2, [r3, #4]

				}
			}
		}
		if(Pressure_sensor._Pressure_Val >= S5.P_Max)
 8005e50:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <Pressure_Min_Max+0x54>)
 8005e52:	791b      	ldrb	r3, [r3, #4]
 8005e54:	461a      	mov	r2, r3
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <Pressure_Min_Max+0x58>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	db07      	blt.n	8005e6e <Pressure_Min_Max+0x4a>
		{
			S5.P_Max = Pressure_sensor._Pressure_Val;
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <Pressure_Min_Max+0x54>)
 8005e60:	791b      	ldrb	r3, [r3, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <Pressure_Min_Max+0x58>)
 8005e66:	601a      	str	r2, [r3, #0]
			S5.now_check = 1;
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <Pressure_Min_Max+0x58>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	641a      	str	r2, [r3, #64]	; 0x40
		}
}
 8005e6e:	bf00      	nop
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	200047ac 	.word	0x200047ac
 8005e7c:	200048fc 	.word	0x200048fc
 8005e80:	20004798 	.word	0x20004798

08005e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e8a:	f001 f945 	bl	8007118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e8e:	f000 f981 	bl	8006194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e92:	f000 fbad 	bl	80065f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005e96:	f000 fb8b 	bl	80065b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8005e9a:	f000 f9e5 	bl	8006268 <MX_ADC1_Init>
  MX_DAC_Init();
 8005e9e:	f000 fa6d 	bl	800637c <MX_DAC_Init>
  MX_I2C2_Init();
 8005ea2:	f000 fa9f 	bl	80063e4 <MX_I2C2_Init>
  MX_TIM12_Init();
 8005ea6:	f000 facb 	bl	8006440 <MX_TIM12_Init>
  MX_USART6_UART_Init();
 8005eaa:	f000 fb57 	bl	800655c <MX_USART6_UART_Init>
  MX_UART5_Init();
 8005eae:	f000 fb2b 	bl	8006508 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

         Uart_Receive = xQueueCreate(1, sizeof(UART_RX_BUF));
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2111      	movs	r1, #17
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	f006 fa30 	bl	800c31c <xQueueGenericCreate>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	4a76      	ldr	r2, [pc, #472]	; (8006098 <main+0x214>)
 8005ec0:	6013      	str	r3, [r2, #0]
         xTaskCreate(One_Time_Task, "one-time-task", 256, NULL, 2, &One_Time_Handler);
 8005ec2:	4b76      	ldr	r3, [pc, #472]	; (800609c <main+0x218>)
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ed0:	4973      	ldr	r1, [pc, #460]	; (80060a0 <main+0x21c>)
 8005ed2:	4874      	ldr	r0, [pc, #464]	; (80060a4 <main+0x220>)
 8005ed4:	f006 fec1 	bl	800cc5a <xTaskCreate>
         xTaskCreate(Offset_Task, "OFFFSET-task", 512, NULL , 3, &Sensor_Offset_Handler);
 8005ed8:	4b73      	ldr	r3, [pc, #460]	; (80060a8 <main+0x224>)
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	2303      	movs	r3, #3
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee6:	4971      	ldr	r1, [pc, #452]	; (80060ac <main+0x228>)
 8005ee8:	4871      	ldr	r0, [pc, #452]	; (80060b0 <main+0x22c>)
 8005eea:	f006 feb6 	bl	800cc5a <xTaskCreate>
         xTaskCreate(Receiver_Task, "data Receive", 128, NULL, 4, &Receiver_Handler);
 8005eee:	4b71      	ldr	r3, [pc, #452]	; (80060b4 <main+0x230>)
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	2304      	movs	r3, #4
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2280      	movs	r2, #128	; 0x80
 8005efa:	496f      	ldr	r1, [pc, #444]	; (80060b8 <main+0x234>)
 8005efc:	486f      	ldr	r0, [pc, #444]	; (80060bc <main+0x238>)
 8005efe:	f006 feac 	bl	800cc5a <xTaskCreate>
         xTaskCreate(PC_CMV_Task, "PC-mode_task", 64, NULL, 2, &pc_mode_Handler);
 8005f02:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <main+0x23c>)
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	2302      	movs	r3, #2
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2240      	movs	r2, #64	; 0x40
 8005f0e:	496d      	ldr	r1, [pc, #436]	; (80060c4 <main+0x240>)
 8005f10:	486d      	ldr	r0, [pc, #436]	; (80060c8 <main+0x244>)
 8005f12:	f006 fea2 	bl	800cc5a <xTaskCreate>
         xTaskCreate(PC_CMV_PID_Task, "PC-PID_task", 64, NULL, 2, &Pc_cmv_Pid_Handler);
 8005f16:	4b6d      	ldr	r3, [pc, #436]	; (80060cc <main+0x248>)
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2240      	movs	r2, #64	; 0x40
 8005f22:	496b      	ldr	r1, [pc, #428]	; (80060d0 <main+0x24c>)
 8005f24:	486b      	ldr	r0, [pc, #428]	; (80060d4 <main+0x250>)
 8005f26:	f006 fe98 	bl	800cc5a <xTaskCreate>
         xTaskCreate(One_Milli_Second_Task, "one millisecond counter", 128, NULL , 3, &One_Milli_Second_Handler);
 8005f2a:	4b6b      	ldr	r3, [pc, #428]	; (80060d8 <main+0x254>)
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	2303      	movs	r3, #3
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2300      	movs	r3, #0
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	4969      	ldr	r1, [pc, #420]	; (80060dc <main+0x258>)
 8005f38:	4869      	ldr	r0, [pc, #420]	; (80060e0 <main+0x25c>)
 8005f3a:	f006 fe8e 	bl	800cc5a <xTaskCreate>
         xTaskCreate(Sensor_Data_Read_Task, "Read sensor values counter", 128, NULL, 3, &Sensor_Read_Handler);
 8005f3e:	4b69      	ldr	r3, [pc, #420]	; (80060e4 <main+0x260>)
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	2303      	movs	r3, #3
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	2300      	movs	r3, #0
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	4967      	ldr	r1, [pc, #412]	; (80060e8 <main+0x264>)
 8005f4c:	4867      	ldr	r0, [pc, #412]	; (80060ec <main+0x268>)
 8005f4e:	f006 fe84 	bl	800cc5a <xTaskCreate>
         xTaskCreate(Uart_Transmit_Task, "BluetoothData transmit", 128, NULL, 2, &Uart_Transmit_Handler);
 8005f52:	4b67      	ldr	r3, [pc, #412]	; (80060f0 <main+0x26c>)
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	2302      	movs	r3, #2
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	4965      	ldr	r1, [pc, #404]	; (80060f4 <main+0x270>)
 8005f60:	4865      	ldr	r0, [pc, #404]	; (80060f8 <main+0x274>)
 8005f62:	f006 fe7a 	bl	800cc5a <xTaskCreate>

         xTaskCreate(Vc_Cmv_Task, "VC-mode_task", 64, NULL, 2, &Vc_mode_Handler);
 8005f66:	4b65      	ldr	r3, [pc, #404]	; (80060fc <main+0x278>)
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2240      	movs	r2, #64	; 0x40
 8005f72:	4963      	ldr	r1, [pc, #396]	; (8006100 <main+0x27c>)
 8005f74:	4863      	ldr	r0, [pc, #396]	; (8006104 <main+0x280>)
 8005f76:	f006 fe70 	bl	800cc5a <xTaskCreate>
         xTaskCreate(Vc_cmv_PID_Task, "VC-PID-task", 64, NULL, 2, &Vc_cmv_Pid_Handler);
 8005f7a:	4b63      	ldr	r3, [pc, #396]	; (8006108 <main+0x284>)
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	2302      	movs	r3, #2
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	2300      	movs	r3, #0
 8005f84:	2240      	movs	r2, #64	; 0x40
 8005f86:	4961      	ldr	r1, [pc, #388]	; (800610c <main+0x288>)
 8005f88:	4861      	ldr	r0, [pc, #388]	; (8006110 <main+0x28c>)
 8005f8a:	f006 fe66 	bl	800cc5a <xTaskCreate>

         xTaskCreate(PC_SIMV_Task, "PC-SIMV-Task", 64, NULL, 2, &Pc_simv_Mode_Handler);
 8005f8e:	4b61      	ldr	r3, [pc, #388]	; (8006114 <main+0x290>)
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	2302      	movs	r3, #2
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	2240      	movs	r2, #64	; 0x40
 8005f9a:	495f      	ldr	r1, [pc, #380]	; (8006118 <main+0x294>)
 8005f9c:	485f      	ldr	r0, [pc, #380]	; (800611c <main+0x298>)
 8005f9e:	f006 fe5c 	bl	800cc5a <xTaskCreate>
         xTaskCreate(PC_SIMV_PID_Task, "PC-SIMV-PID-task", 64, NULL, 2, &Pc_simv_Mode_Pid_Handler);
 8005fa2:	4b5f      	ldr	r3, [pc, #380]	; (8006120 <main+0x29c>)
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	2240      	movs	r2, #64	; 0x40
 8005fae:	495d      	ldr	r1, [pc, #372]	; (8006124 <main+0x2a0>)
 8005fb0:	485d      	ldr	r0, [pc, #372]	; (8006128 <main+0x2a4>)
 8005fb2:	f006 fe52 	bl	800cc5a <xTaskCreate>

         xTaskCreate(VC_SIMV_Task, "VC-SIMV-Task", 64, NULL, 2, &Vc_simv_mode_Handler);
 8005fb6:	4b5d      	ldr	r3, [pc, #372]	; (800612c <main+0x2a8>)
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	2302      	movs	r3, #2
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2240      	movs	r2, #64	; 0x40
 8005fc2:	495b      	ldr	r1, [pc, #364]	; (8006130 <main+0x2ac>)
 8005fc4:	485b      	ldr	r0, [pc, #364]	; (8006134 <main+0x2b0>)
 8005fc6:	f006 fe48 	bl	800cc5a <xTaskCreate>
         xTaskCreate(VC_SIMV_PID_Task, "VC-SIMV-PID-task", 64, NULL, 2, &Vc_cmv_simv_Pid_Handler);
 8005fca:	4b5b      	ldr	r3, [pc, #364]	; (8006138 <main+0x2b4>)
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	2302      	movs	r3, #2
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2240      	movs	r2, #64	; 0x40
 8005fd6:	4959      	ldr	r1, [pc, #356]	; (800613c <main+0x2b8>)
 8005fd8:	4859      	ldr	r0, [pc, #356]	; (8006140 <main+0x2bc>)
 8005fda:	f006 fe3e 	bl	800cc5a <xTaskCreate>

         xTaskCreate(PSV_Mode_Task, "PSV-Mode-task", 64, NULL, 2, &Psv_Handler);
 8005fde:	4b59      	ldr	r3, [pc, #356]	; (8006144 <main+0x2c0>)
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	2240      	movs	r2, #64	; 0x40
 8005fea:	4957      	ldr	r1, [pc, #348]	; (8006148 <main+0x2c4>)
 8005fec:	4857      	ldr	r0, [pc, #348]	; (800614c <main+0x2c8>)
 8005fee:	f006 fe34 	bl	800cc5a <xTaskCreate>
         xTaskCreate(PSV_PID_Task, "PSV-Pid-task", 64, NULL, 3, &Psv_Pid_Handler);
 8005ff2:	4b57      	ldr	r3, [pc, #348]	; (8006150 <main+0x2cc>)
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2240      	movs	r2, #64	; 0x40
 8005ffe:	4955      	ldr	r1, [pc, #340]	; (8006154 <main+0x2d0>)
 8006000:	4855      	ldr	r0, [pc, #340]	; (8006158 <main+0x2d4>)
 8006002:	f006 fe2a 	bl	800cc5a <xTaskCreate>

         xTaskCreate(Back_Up_PC_CMV_Mode_Task, "Back-Up-PC-CMV-Mode-Task", 64, NULL, 2, &Back_Up_PC_CMV_Mode_Handler);
 8006006:	4b55      	ldr	r3, [pc, #340]	; (800615c <main+0x2d8>)
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	2302      	movs	r3, #2
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	2300      	movs	r3, #0
 8006010:	2240      	movs	r2, #64	; 0x40
 8006012:	4953      	ldr	r1, [pc, #332]	; (8006160 <main+0x2dc>)
 8006014:	4853      	ldr	r0, [pc, #332]	; (8006164 <main+0x2e0>)
 8006016:	f006 fe20 	bl	800cc5a <xTaskCreate>
         xTaskCreate(PID_Back_Up_PC_CMV_Mode_Task, "PID-Back-Up-PC-CMV-Mode-Task", 64, NULL, 2, &PID_Back_Up_PC_CMV_Mode_Handler);
 800601a:	4b53      	ldr	r3, [pc, #332]	; (8006168 <main+0x2e4>)
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	2302      	movs	r3, #2
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2300      	movs	r3, #0
 8006024:	2240      	movs	r2, #64	; 0x40
 8006026:	4951      	ldr	r1, [pc, #324]	; (800616c <main+0x2e8>)
 8006028:	4851      	ldr	r0, [pc, #324]	; (8006170 <main+0x2ec>)
 800602a:	f006 fe16 	bl	800cc5a <xTaskCreate>



#if UART==6
         HAL_UART_Receive_IT(&huart6,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
 800602e:	2211      	movs	r2, #17
 8006030:	4950      	ldr	r1, [pc, #320]	; (8006174 <main+0x2f0>)
 8006032:	4851      	ldr	r0, [pc, #324]	; (8006178 <main+0x2f4>)
 8006034:	f005 f963 	bl	800b2fe <HAL_UART_Receive_IT>
#endif
#if UART==5
         HAL_UART_Receive_IT(&huart5,(uint8_t *) UART_RX_BUF, sizeof( UART_RX_BUF));
#endif
         HAL_DAC_Start(&hdac,DAC1_CHANNEL_1);
 8006038:	2100      	movs	r1, #0
 800603a:	4850      	ldr	r0, [pc, #320]	; (800617c <main+0x2f8>)
 800603c:	f001 fdc4 	bl	8007bc8 <HAL_DAC_Start>
         HAL_DAC_SetValue(&hdac,DAC1_CHANNEL_1,DAC_ALIGN_12B_R,0);
 8006040:	2300      	movs	r3, #0
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	484d      	ldr	r0, [pc, #308]	; (800617c <main+0x2f8>)
 8006048:	f001 fe6a 	bl	8007d20 <HAL_DAC_SetValue>
         HAL_DAC_Start(&hdac,DAC1_CHANNEL_2);
 800604c:	2110      	movs	r1, #16
 800604e:	484b      	ldr	r0, [pc, #300]	; (800617c <main+0x2f8>)
 8006050:	f001 fdba 	bl	8007bc8 <HAL_DAC_Start>
         HAL_DAC_SetValue(&hdac,DAC1_CHANNEL_2,DAC_ALIGN_12B_R,0);
 8006054:	2300      	movs	r3, #0
 8006056:	2200      	movs	r2, #0
 8006058:	2110      	movs	r1, #16
 800605a:	4848      	ldr	r0, [pc, #288]	; (800617c <main+0x2f8>)
 800605c:	f001 fe60 	bl	8007d20 <HAL_DAC_SetValue>
         HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&AdcData,5);
 8006060:	2205      	movs	r2, #5
 8006062:	4947      	ldr	r1, [pc, #284]	; (8006180 <main+0x2fc>)
 8006064:	4847      	ldr	r0, [pc, #284]	; (8006184 <main+0x300>)
 8006066:	f001 f8dd 	bl	8007224 <HAL_ADC_Start_DMA>
         HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 800606a:	2100      	movs	r1, #0
 800606c:	4846      	ldr	r0, [pc, #280]	; (8006188 <main+0x304>)
 800606e:	f004 fa0f 	bl	800a490 <HAL_TIM_PWM_Start>
         TIM12->CCR1=45;
 8006072:	4b46      	ldr	r3, [pc, #280]	; (800618c <main+0x308>)
 8006074:	222d      	movs	r2, #45	; 0x2d
 8006076:	635a      	str	r2, [r3, #52]	; 0x34
         Blowe_ON();
 8006078:	4b45      	ldr	r3, [pc, #276]	; (8006190 <main+0x30c>)
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	4a44      	ldr	r2, [pc, #272]	; (8006190 <main+0x30c>)
 800607e:	f043 0320 	orr.w	r3, r3, #32
 8006082:	6153      	str	r3, [r2, #20]
         Power_Led_ON();
 8006084:	4b42      	ldr	r3, [pc, #264]	; (8006190 <main+0x30c>)
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	4a41      	ldr	r2, [pc, #260]	; (8006190 <main+0x30c>)
 800608a:	f043 0302 	orr.w	r3, r3, #2
 800608e:	6153      	str	r3, [r2, #20]
         vTaskStartScheduler();
 8006090:	f007 f900 	bl	800d294 <vTaskStartScheduler>
  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 8006094:	e7fe      	b.n	8006094 <main+0x210>
 8006096:	bf00      	nop
 8006098:	20004868 	.word	0x20004868
 800609c:	200047e8 	.word	0x200047e8
 80060a0:	0800ec98 	.word	0x0800ec98
 80060a4:	0800676d 	.word	0x0800676d
 80060a8:	20004988 	.word	0x20004988
 80060ac:	0800eca8 	.word	0x0800eca8
 80060b0:	08006861 	.word	0x08006861
 80060b4:	2000498c 	.word	0x2000498c
 80060b8:	0800ecb8 	.word	0x0800ecb8
 80060bc:	08004ae5 	.word	0x08004ae5
 80060c0:	20004614 	.word	0x20004614
 80060c4:	0800ecc8 	.word	0x0800ecc8
 80060c8:	0800309d 	.word	0x0800309d
 80060cc:	2000460c 	.word	0x2000460c
 80060d0:	0800ecd8 	.word	0x0800ecd8
 80060d4:	08003889 	.word	0x08003889
 80060d8:	20004a94 	.word	0x20004a94
 80060dc:	0800ece4 	.word	0x0800ece4
 80060e0:	08006941 	.word	0x08006941
 80060e4:	20004a90 	.word	0x20004a90
 80060e8:	0800ecfc 	.word	0x0800ecfc
 80060ec:	08006925 	.word	0x08006925
 80060f0:	20004a2c 	.word	0x20004a2c
 80060f4:	0800ed18 	.word	0x0800ed18
 80060f8:	080048a9 	.word	0x080048a9
 80060fc:	2000484c 	.word	0x2000484c
 8006100:	0800ed30 	.word	0x0800ed30
 8006104:	08005569 	.word	0x08005569
 8006108:	200045a8 	.word	0x200045a8
 800610c:	0800ed40 	.word	0x0800ed40
 8006110:	08005671 	.word	0x08005671
 8006114:	20004948 	.word	0x20004948
 8006118:	0800ed4c 	.word	0x0800ed4c
 800611c:	080024a9 	.word	0x080024a9
 8006120:	20004960 	.word	0x20004960
 8006124:	0800ed5c 	.word	0x0800ed5c
 8006128:	08002821 	.word	0x08002821
 800612c:	20004728 	.word	0x20004728
 8006130:	0800ed70 	.word	0x0800ed70
 8006134:	08004b69 	.word	0x08004b69
 8006138:	200048f4 	.word	0x200048f4
 800613c:	0800ed80 	.word	0x0800ed80
 8006140:	08004d45 	.word	0x08004d45
 8006144:	200046d8 	.word	0x200046d8
 8006148:	0800ed94 	.word	0x0800ed94
 800614c:	08003fd9 	.word	0x08003fd9
 8006150:	20004610 	.word	0x20004610
 8006154:	0800eda4 	.word	0x0800eda4
 8006158:	08004829 	.word	0x08004829
 800615c:	200046d0 	.word	0x200046d0
 8006160:	0800edb4 	.word	0x0800edb4
 8006164:	08000ea5 	.word	0x08000ea5
 8006168:	200047e4 	.word	0x200047e4
 800616c:	0800edd0 	.word	0x0800edd0
 8006170:	08001249 	.word	0x08001249
 8006174:	200047d0 	.word	0x200047d0
 8006178:	200048ac 	.word	0x200048ac
 800617c:	20004714 	.word	0x20004714
 8006180:	200046c4 	.word	0x200046c4
 8006184:	200049e4 	.word	0x200049e4
 8006188:	20004a98 	.word	0x20004a98
 800618c:	40001800 	.word	0x40001800
 8006190:	40021000 	.word	0x40021000

08006194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b094      	sub	sp, #80	; 0x50
 8006198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800619a:	f107 0320 	add.w	r3, r7, #32
 800619e:	2230      	movs	r2, #48	; 0x30
 80061a0:	2100      	movs	r1, #0
 80061a2:	4618      	mov	r0, r3
 80061a4:	f008 fd5c 	bl	800ec60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061a8:	f107 030c 	add.w	r3, r7, #12
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	605a      	str	r2, [r3, #4]
 80061b2:	609a      	str	r2, [r3, #8]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80061b8:	2300      	movs	r3, #0
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	4b28      	ldr	r3, [pc, #160]	; (8006260 <SystemClock_Config+0xcc>)
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	4a27      	ldr	r2, [pc, #156]	; (8006260 <SystemClock_Config+0xcc>)
 80061c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c6:	6413      	str	r3, [r2, #64]	; 0x40
 80061c8:	4b25      	ldr	r3, [pc, #148]	; (8006260 <SystemClock_Config+0xcc>)
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061d4:	2300      	movs	r3, #0
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	4b22      	ldr	r3, [pc, #136]	; (8006264 <SystemClock_Config+0xd0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a21      	ldr	r2, [pc, #132]	; (8006264 <SystemClock_Config+0xd0>)
 80061de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	4b1f      	ldr	r3, [pc, #124]	; (8006264 <SystemClock_Config+0xd0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ec:	607b      	str	r3, [r7, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061f0:	2301      	movs	r3, #1
 80061f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061fa:	2302      	movs	r3, #2
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80061fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006204:	2308      	movs	r3, #8
 8006206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006208:	23a8      	movs	r3, #168	; 0xa8
 800620a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800620c:	2302      	movs	r3, #2
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006210:	2304      	movs	r3, #4
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006214:	f107 0320 	add.w	r3, r7, #32
 8006218:	4618      	mov	r0, r3
 800621a:	f003 fb7b 	bl	8009914 <HAL_RCC_OscConfig>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006224:	f000 fc30 	bl	8006a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006228:	230f      	movs	r3, #15
 800622a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800622c:	2302      	movs	r3, #2
 800622e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800623a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800623e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006240:	f107 030c 	add.w	r3, r7, #12
 8006244:	2105      	movs	r1, #5
 8006246:	4618      	mov	r0, r3
 8006248:	f003 fddc 	bl	8009e04 <HAL_RCC_ClockConfig>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006252:	f000 fc19 	bl	8006a88 <Error_Handler>
  }
}
 8006256:	bf00      	nop
 8006258:	3750      	adds	r7, #80	; 0x50
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	40007000 	.word	0x40007000

08006268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800626e:	463b      	mov	r3, r7
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	609a      	str	r2, [r3, #8]
 8006278:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800627a:	4b3d      	ldr	r3, [pc, #244]	; (8006370 <MX_ADC1_Init+0x108>)
 800627c:	4a3d      	ldr	r2, [pc, #244]	; (8006374 <MX_ADC1_Init+0x10c>)
 800627e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006280:	4b3b      	ldr	r3, [pc, #236]	; (8006370 <MX_ADC1_Init+0x108>)
 8006282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006286:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006288:	4b39      	ldr	r3, [pc, #228]	; (8006370 <MX_ADC1_Init+0x108>)
 800628a:	2200      	movs	r2, #0
 800628c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800628e:	4b38      	ldr	r3, [pc, #224]	; (8006370 <MX_ADC1_Init+0x108>)
 8006290:	2201      	movs	r2, #1
 8006292:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006294:	4b36      	ldr	r3, [pc, #216]	; (8006370 <MX_ADC1_Init+0x108>)
 8006296:	2201      	movs	r2, #1
 8006298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800629a:	4b35      	ldr	r3, [pc, #212]	; (8006370 <MX_ADC1_Init+0x108>)
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80062a2:	4b33      	ldr	r3, [pc, #204]	; (8006370 <MX_ADC1_Init+0x108>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80062a8:	4b31      	ldr	r3, [pc, #196]	; (8006370 <MX_ADC1_Init+0x108>)
 80062aa:	4a33      	ldr	r2, [pc, #204]	; (8006378 <MX_ADC1_Init+0x110>)
 80062ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80062ae:	4b30      	ldr	r3, [pc, #192]	; (8006370 <MX_ADC1_Init+0x108>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80062b4:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <MX_ADC1_Init+0x108>)
 80062b6:	2205      	movs	r2, #5
 80062b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80062ba:	4b2d      	ldr	r3, [pc, #180]	; (8006370 <MX_ADC1_Init+0x108>)
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80062c2:	4b2b      	ldr	r3, [pc, #172]	; (8006370 <MX_ADC1_Init+0x108>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80062c8:	4829      	ldr	r0, [pc, #164]	; (8006370 <MX_ADC1_Init+0x108>)
 80062ca:	f000 ff67 	bl	800719c <HAL_ADC_Init>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80062d4:	f000 fbd8 	bl	8006a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80062d8:	2300      	movs	r3, #0
 80062da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80062dc:	2301      	movs	r3, #1
 80062de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80062e0:	2307      	movs	r3, #7
 80062e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80062e4:	463b      	mov	r3, r7
 80062e6:	4619      	mov	r1, r3
 80062e8:	4821      	ldr	r0, [pc, #132]	; (8006370 <MX_ADC1_Init+0x108>)
 80062ea:	f001 f8c9 	bl	8007480 <HAL_ADC_ConfigChannel>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80062f4:	f000 fbc8 	bl	8006a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80062f8:	2302      	movs	r3, #2
 80062fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80062fc:	2302      	movs	r3, #2
 80062fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006300:	463b      	mov	r3, r7
 8006302:	4619      	mov	r1, r3
 8006304:	481a      	ldr	r0, [pc, #104]	; (8006370 <MX_ADC1_Init+0x108>)
 8006306:	f001 f8bb 	bl	8007480 <HAL_ADC_ConfigChannel>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006310:	f000 fbba 	bl	8006a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006314:	2303      	movs	r3, #3
 8006316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006318:	2303      	movs	r3, #3
 800631a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800631c:	463b      	mov	r3, r7
 800631e:	4619      	mov	r1, r3
 8006320:	4813      	ldr	r0, [pc, #76]	; (8006370 <MX_ADC1_Init+0x108>)
 8006322:	f001 f8ad 	bl	8007480 <HAL_ADC_ConfigChannel>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800632c:	f000 fbac 	bl	8006a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006330:	230f      	movs	r3, #15
 8006332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006334:	2304      	movs	r3, #4
 8006336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006338:	463b      	mov	r3, r7
 800633a:	4619      	mov	r1, r3
 800633c:	480c      	ldr	r0, [pc, #48]	; (8006370 <MX_ADC1_Init+0x108>)
 800633e:	f001 f89f 	bl	8007480 <HAL_ADC_ConfigChannel>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8006348:	f000 fb9e 	bl	8006a88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800634c:	230d      	movs	r3, #13
 800634e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006350:	2305      	movs	r3, #5
 8006352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006354:	463b      	mov	r3, r7
 8006356:	4619      	mov	r1, r3
 8006358:	4805      	ldr	r0, [pc, #20]	; (8006370 <MX_ADC1_Init+0x108>)
 800635a:	f001 f891 	bl	8007480 <HAL_ADC_ConfigChannel>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8006364:	f000 fb90 	bl	8006a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	200049e4 	.word	0x200049e4
 8006374:	40012000 	.word	0x40012000
 8006378:	0f000001 	.word	0x0f000001

0800637c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006382:	463b      	mov	r3, r7
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <MX_DAC_Init+0x60>)
 800638c:	4a14      	ldr	r2, [pc, #80]	; (80063e0 <MX_DAC_Init+0x64>)
 800638e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8006390:	4812      	ldr	r0, [pc, #72]	; (80063dc <MX_DAC_Init+0x60>)
 8006392:	f001 fbf7 	bl	8007b84 <HAL_DAC_Init>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800639c:	f000 fb74 	bl	8006a88 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80063a0:	2300      	movs	r3, #0
 80063a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80063a8:	463b      	mov	r3, r7
 80063aa:	2200      	movs	r2, #0
 80063ac:	4619      	mov	r1, r3
 80063ae:	480b      	ldr	r0, [pc, #44]	; (80063dc <MX_DAC_Init+0x60>)
 80063b0:	f001 fce5 	bl	8007d7e <HAL_DAC_ConfigChannel>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80063ba:	f000 fb65 	bl	8006a88 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80063be:	463b      	mov	r3, r7
 80063c0:	2210      	movs	r2, #16
 80063c2:	4619      	mov	r1, r3
 80063c4:	4805      	ldr	r0, [pc, #20]	; (80063dc <MX_DAC_Init+0x60>)
 80063c6:	f001 fcda 	bl	8007d7e <HAL_DAC_ConfigChannel>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80063d0:	f000 fb5a 	bl	8006a88 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80063d4:	bf00      	nop
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20004714 	.word	0x20004714
 80063e0:	40007400 	.word	0x40007400

080063e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <MX_I2C2_Init+0x50>)
 80063ea:	4a13      	ldr	r2, [pc, #76]	; (8006438 <MX_I2C2_Init+0x54>)
 80063ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80063ee:	4b11      	ldr	r3, [pc, #68]	; (8006434 <MX_I2C2_Init+0x50>)
 80063f0:	4a12      	ldr	r2, [pc, #72]	; (800643c <MX_I2C2_Init+0x58>)
 80063f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80063f4:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <MX_I2C2_Init+0x50>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <MX_I2C2_Init+0x50>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <MX_I2C2_Init+0x50>)
 8006402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006406:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006408:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <MX_I2C2_Init+0x50>)
 800640a:	2200      	movs	r2, #0
 800640c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <MX_I2C2_Init+0x50>)
 8006410:	2200      	movs	r2, #0
 8006412:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <MX_I2C2_Init+0x50>)
 8006416:	2200      	movs	r2, #0
 8006418:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800641a:	4b06      	ldr	r3, [pc, #24]	; (8006434 <MX_I2C2_Init+0x50>)
 800641c:	2200      	movs	r2, #0
 800641e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006420:	4804      	ldr	r0, [pc, #16]	; (8006434 <MX_I2C2_Init+0x50>)
 8006422:	f002 fae1 	bl	80089e8 <HAL_I2C_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800642c:	f000 fb2c 	bl	8006a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006430:	bf00      	nop
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20004990 	.word	0x20004990
 8006438:	40005800 	.word	0x40005800
 800643c:	000186a0 	.word	0x000186a0

08006440 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08c      	sub	sp, #48	; 0x30
 8006444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006446:	f107 0320 	add.w	r3, r7, #32
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	609a      	str	r2, [r3, #8]
 8006452:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006454:	1d3b      	adds	r3, r7, #4
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	605a      	str	r2, [r3, #4]
 800645c:	609a      	str	r2, [r3, #8]
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	611a      	str	r2, [r3, #16]
 8006462:	615a      	str	r2, [r3, #20]
 8006464:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8006466:	4b26      	ldr	r3, [pc, #152]	; (8006500 <MX_TIM12_Init+0xc0>)
 8006468:	4a26      	ldr	r2, [pc, #152]	; (8006504 <MX_TIM12_Init+0xc4>)
 800646a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 1680-1;
 800646c:	4b24      	ldr	r3, [pc, #144]	; (8006500 <MX_TIM12_Init+0xc0>)
 800646e:	f240 628f 	movw	r2, #1679	; 0x68f
 8006472:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006474:	4b22      	ldr	r3, [pc, #136]	; (8006500 <MX_TIM12_Init+0xc0>)
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 800647a:	4b21      	ldr	r3, [pc, #132]	; (8006500 <MX_TIM12_Init+0xc0>)
 800647c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006480:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006482:	4b1f      	ldr	r3, [pc, #124]	; (8006500 <MX_TIM12_Init+0xc0>)
 8006484:	2200      	movs	r2, #0
 8006486:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006488:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <MX_TIM12_Init+0xc0>)
 800648a:	2200      	movs	r2, #0
 800648c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800648e:	481c      	ldr	r0, [pc, #112]	; (8006500 <MX_TIM12_Init+0xc0>)
 8006490:	f003 fee4 	bl	800a25c <HAL_TIM_Base_Init>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800649a:	f000 faf5 	bl	8006a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800649e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80064a4:	f107 0320 	add.w	r3, r7, #32
 80064a8:	4619      	mov	r1, r3
 80064aa:	4815      	ldr	r0, [pc, #84]	; (8006500 <MX_TIM12_Init+0xc0>)
 80064ac:	f004 fa82 	bl	800a9b4 <HAL_TIM_ConfigClockSource>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <MX_TIM12_Init+0x7a>
  {
    Error_Handler();
 80064b6:	f000 fae7 	bl	8006a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80064ba:	4811      	ldr	r0, [pc, #68]	; (8006500 <MX_TIM12_Init+0xc0>)
 80064bc:	f003 ff8e 	bl	800a3dc <HAL_TIM_PWM_Init>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80064c6:	f000 fadf 	bl	8006a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064ca:	2360      	movs	r3, #96	; 0x60
 80064cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	2200      	movs	r2, #0
 80064de:	4619      	mov	r1, r3
 80064e0:	4807      	ldr	r0, [pc, #28]	; (8006500 <MX_TIM12_Init+0xc0>)
 80064e2:	f004 f9a5 	bl	800a830 <HAL_TIM_PWM_ConfigChannel>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80064ec:	f000 facc 	bl	8006a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80064f0:	4803      	ldr	r0, [pc, #12]	; (8006500 <MX_TIM12_Init+0xc0>)
 80064f2:	f000 fc45 	bl	8006d80 <HAL_TIM_MspPostInit>

}
 80064f6:	bf00      	nop
 80064f8:	3730      	adds	r7, #48	; 0x30
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20004a98 	.word	0x20004a98
 8006504:	40001800 	.word	0x40001800

08006508 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800650c:	4b11      	ldr	r3, [pc, #68]	; (8006554 <MX_UART5_Init+0x4c>)
 800650e:	4a12      	ldr	r2, [pc, #72]	; (8006558 <MX_UART5_Init+0x50>)
 8006510:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <MX_UART5_Init+0x4c>)
 8006514:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006518:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <MX_UART5_Init+0x4c>)
 800651c:	2200      	movs	r2, #0
 800651e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006520:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <MX_UART5_Init+0x4c>)
 8006522:	2200      	movs	r2, #0
 8006524:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <MX_UART5_Init+0x4c>)
 8006528:	2200      	movs	r2, #0
 800652a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <MX_UART5_Init+0x4c>)
 800652e:	220c      	movs	r2, #12
 8006530:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006532:	4b08      	ldr	r3, [pc, #32]	; (8006554 <MX_UART5_Init+0x4c>)
 8006534:	2200      	movs	r2, #0
 8006536:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <MX_UART5_Init+0x4c>)
 800653a:	2200      	movs	r2, #0
 800653c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800653e:	4805      	ldr	r0, [pc, #20]	; (8006554 <MX_UART5_Init+0x4c>)
 8006540:	f004 fe4b 	bl	800b1da <HAL_UART_Init>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800654a:	f000 fa9d 	bl	8006a88 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800654e:	bf00      	nop
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20004680 	.word	0x20004680
 8006558:	40005000 	.word	0x40005000

0800655c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006560:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 8006562:	4a12      	ldr	r2, [pc, #72]	; (80065ac <MX_USART6_UART_Init+0x50>)
 8006564:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 8006568:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800656c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800656e:	4b0e      	ldr	r3, [pc, #56]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 8006570:	2200      	movs	r2, #0
 8006572:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 8006576:	2200      	movs	r2, #0
 8006578:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 800657c:	2200      	movs	r2, #0
 800657e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006580:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 8006582:	220c      	movs	r2, #12
 8006584:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006586:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 8006588:	2200      	movs	r2, #0
 800658a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 800658e:	2200      	movs	r2, #0
 8006590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006592:	4805      	ldr	r0, [pc, #20]	; (80065a8 <MX_USART6_UART_Init+0x4c>)
 8006594:	f004 fe21 	bl	800b1da <HAL_UART_Init>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800659e:	f000 fa73 	bl	8006a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200048ac 	.word	0x200048ac
 80065ac:	40011400 	.word	0x40011400

080065b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80065b6:	2300      	movs	r3, #0
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	4b0c      	ldr	r3, [pc, #48]	; (80065ec <MX_DMA_Init+0x3c>)
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065be:	4a0b      	ldr	r2, [pc, #44]	; (80065ec <MX_DMA_Init+0x3c>)
 80065c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065c4:	6313      	str	r3, [r2, #48]	; 0x30
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <MX_DMA_Init+0x3c>)
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ce:	607b      	str	r3, [r7, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80065d2:	2200      	movs	r2, #0
 80065d4:	2105      	movs	r1, #5
 80065d6:	2038      	movs	r0, #56	; 0x38
 80065d8:	f001 faaa 	bl	8007b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80065dc:	2038      	movs	r0, #56	; 0x38
 80065de:	f001 fac3 	bl	8007b68 <HAL_NVIC_EnableIRQ>

}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40023800 	.word	0x40023800

080065f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08c      	sub	sp, #48	; 0x30
 80065f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065f6:	f107 031c 	add.w	r3, r7, #28
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	605a      	str	r2, [r3, #4]
 8006600:	609a      	str	r2, [r3, #8]
 8006602:	60da      	str	r2, [r3, #12]
 8006604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	4b54      	ldr	r3, [pc, #336]	; (800675c <MX_GPIO_Init+0x16c>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660e:	4a53      	ldr	r2, [pc, #332]	; (800675c <MX_GPIO_Init+0x16c>)
 8006610:	f043 0310 	orr.w	r3, r3, #16
 8006614:	6313      	str	r3, [r2, #48]	; 0x30
 8006616:	4b51      	ldr	r3, [pc, #324]	; (800675c <MX_GPIO_Init+0x16c>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
 8006626:	4b4d      	ldr	r3, [pc, #308]	; (800675c <MX_GPIO_Init+0x16c>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4a4c      	ldr	r2, [pc, #304]	; (800675c <MX_GPIO_Init+0x16c>)
 800662c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006630:	6313      	str	r3, [r2, #48]	; 0x30
 8006632:	4b4a      	ldr	r3, [pc, #296]	; (800675c <MX_GPIO_Init+0x16c>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	4b46      	ldr	r3, [pc, #280]	; (800675c <MX_GPIO_Init+0x16c>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4a45      	ldr	r2, [pc, #276]	; (800675c <MX_GPIO_Init+0x16c>)
 8006648:	f043 0304 	orr.w	r3, r3, #4
 800664c:	6313      	str	r3, [r2, #48]	; 0x30
 800664e:	4b43      	ldr	r3, [pc, #268]	; (800675c <MX_GPIO_Init+0x16c>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	4b3f      	ldr	r3, [pc, #252]	; (800675c <MX_GPIO_Init+0x16c>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a3e      	ldr	r2, [pc, #248]	; (800675c <MX_GPIO_Init+0x16c>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6313      	str	r3, [r2, #48]	; 0x30
 800666a:	4b3c      	ldr	r3, [pc, #240]	; (800675c <MX_GPIO_Init+0x16c>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	4b38      	ldr	r3, [pc, #224]	; (800675c <MX_GPIO_Init+0x16c>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	4a37      	ldr	r2, [pc, #220]	; (800675c <MX_GPIO_Init+0x16c>)
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	6313      	str	r3, [r2, #48]	; 0x30
 8006686:	4b35      	ldr	r3, [pc, #212]	; (800675c <MX_GPIO_Init+0x16c>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	4b31      	ldr	r3, [pc, #196]	; (800675c <MX_GPIO_Init+0x16c>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a30      	ldr	r2, [pc, #192]	; (800675c <MX_GPIO_Init+0x16c>)
 800669c:	f043 0308 	orr.w	r3, r3, #8
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b2e      	ldr	r3, [pc, #184]	; (800675c <MX_GPIO_Init+0x16c>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2122      	movs	r1, #34	; 0x22
 80066b2:	482b      	ldr	r0, [pc, #172]	; (8006760 <MX_GPIO_Init+0x170>)
 80066b4:	f002 f95a 	bl	800896c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_9, GPIO_PIN_RESET);
 80066b8:	2200      	movs	r2, #0
 80066ba:	f44f 4132 	mov.w	r1, #45568	; 0xb200
 80066be:	4829      	ldr	r0, [pc, #164]	; (8006764 <MX_GPIO_Init+0x174>)
 80066c0:	f002 f954 	bl	800896c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_6, GPIO_PIN_RESET);
 80066c4:	2200      	movs	r2, #0
 80066c6:	f248 0140 	movw	r1, #32832	; 0x8040
 80066ca:	4827      	ldr	r0, [pc, #156]	; (8006768 <MX_GPIO_Init+0x178>)
 80066cc:	f002 f94e 	bl	800896c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80066d0:	2304      	movs	r3, #4
 80066d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80066d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066da:	2301      	movs	r3, #1
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066de:	f107 031c 	add.w	r3, r7, #28
 80066e2:	4619      	mov	r1, r3
 80066e4:	481e      	ldr	r0, [pc, #120]	; (8006760 <MX_GPIO_Init+0x170>)
 80066e6:	f001 ffa5 	bl	8008634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1;
 80066ea:	2322      	movs	r3, #34	; 0x22
 80066ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066ee:	2301      	movs	r3, #1
 80066f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f6:	2300      	movs	r3, #0
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066fa:	f107 031c 	add.w	r3, r7, #28
 80066fe:	4619      	mov	r1, r3
 8006700:	4817      	ldr	r0, [pc, #92]	; (8006760 <MX_GPIO_Init+0x170>)
 8006702:	f001 ff97 	bl	8008634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_9;
 8006706:	f44f 4332 	mov.w	r3, #45568	; 0xb200
 800670a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800670c:	2301      	movs	r3, #1
 800670e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006710:	2300      	movs	r3, #0
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006714:	2300      	movs	r3, #0
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006718:	f107 031c 	add.w	r3, r7, #28
 800671c:	4619      	mov	r1, r3
 800671e:	4811      	ldr	r0, [pc, #68]	; (8006764 <MX_GPIO_Init+0x174>)
 8006720:	f001 ff88 	bl	8008634 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_6;
 8006724:	f248 0340 	movw	r3, #32832	; 0x8040
 8006728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800672a:	2301      	movs	r3, #1
 800672c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672e:	2300      	movs	r3, #0
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006732:	2300      	movs	r3, #0
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006736:	f107 031c 	add.w	r3, r7, #28
 800673a:	4619      	mov	r1, r3
 800673c:	480a      	ldr	r0, [pc, #40]	; (8006768 <MX_GPIO_Init+0x178>)
 800673e:	f001 ff79 	bl	8008634 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8006742:	2200      	movs	r2, #0
 8006744:	2105      	movs	r1, #5
 8006746:	2008      	movs	r0, #8
 8006748:	f001 f9f2 	bl	8007b30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800674c:	2008      	movs	r0, #8
 800674e:	f001 fa0b 	bl	8007b68 <HAL_NVIC_EnableIRQ>

}
 8006752:	bf00      	nop
 8006754:	3730      	adds	r7, #48	; 0x30
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	40021000 	.word	0x40021000
 8006764:	40020400 	.word	0x40020400
 8006768:	40020c00 	.word	0x40020c00

0800676c <One_Time_Task>:




void One_Time_Task (void *argument)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]


	while (1)
	{

		switch (_CurrentWaveFormState)
 8006774:	4b37      	ldr	r3, [pc, #220]	; (8006854 <One_Time_Task+0xe8>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d066      	beq.n	800684a <One_Time_Task+0xde>
 800677c:	2b02      	cmp	r3, #2
 800677e:	dc66      	bgt.n	800684e <One_Time_Task+0xe2>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <One_Time_Task+0x1e>
 8006784:	2b01      	cmp	r3, #1
 8006786:	d034      	beq.n	80067f2 <One_Time_Task+0x86>
			break;

		case NoWaveFormState:
			break;
		default:
			break;
 8006788:	e061      	b.n	800684e <One_Time_Task+0xe2>
			switch (S1._Mode_Val)
 800678a:	4b33      	ldr	r3, [pc, #204]	; (8006858 <One_Time_Task+0xec>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	3b01      	subs	r3, #1
 8006790:	2b08      	cmp	r3, #8
 8006792:	d824      	bhi.n	80067de <One_Time_Task+0x72>
 8006794:	a201      	add	r2, pc, #4	; (adr r2, 800679c <One_Time_Task+0x30>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c7 	.word	0x080067c7
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d3 	.word	0x080067d3
 80067ac:	080067df 	.word	0x080067df
 80067b0:	080067df 	.word	0x080067df
 80067b4:	080067df 	.word	0x080067df
 80067b8:	080067df 	.word	0x080067df
 80067bc:	080067d9 	.word	0x080067d9
				PC_CMV_Pulse_I_Parameter();
 80067c0:	f7fc fcf0 	bl	80031a4 <PC_CMV_Pulse_I_Parameter>
				break;
 80067c4:	e014      	b.n	80067f0 <One_Time_Task+0x84>
				VC_CMV_Pulse_I_Parameter();
 80067c6:	f7fe ff8d 	bl	80056e4 <VC_CMV_Pulse_I_Parameter>
				break;
 80067ca:	e011      	b.n	80067f0 <One_Time_Task+0x84>
				PC_SIMV_Pulse_I_Parameter();
 80067cc:	f7fb ff86 	bl	80026dc <PC_SIMV_Pulse_I_Parameter>
			    break;
 80067d0:	e00e      	b.n	80067f0 <One_Time_Task+0x84>
				VC_SIMV_Pulse_I_Parameter();
 80067d2:	f7fe faf1 	bl	8004db8 <VC_SIMV_Pulse_I_Parameter>
		    	break;
 80067d6:	e00b      	b.n	80067f0 <One_Time_Task+0x84>
				  BACKUP_PC_SIMV_Pulse_I_Parameter();
 80067d8:	f7fa fc94 	bl	8001104 <BACKUP_PC_SIMV_Pulse_I_Parameter>
				break;
 80067dc:	e008      	b.n	80067f0 <One_Time_Task+0x84>
				vol.Volume = 0;
 80067de:	4b1f      	ldr	r3, [pc, #124]	; (800685c <One_Time_Task+0xf0>)
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	605a      	str	r2, [r3, #4]
				vTaskDelay(1000);
 80067e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067ea:	f006 fbfd 	bl	800cfe8 <vTaskDelay>
				break;
 80067ee:	bf00      	nop
			break;
 80067f0:	e02e      	b.n	8006850 <One_Time_Task+0xe4>
			switch (S1._Mode_Val)
 80067f2:	4b19      	ldr	r3, [pc, #100]	; (8006858 <One_Time_Task+0xec>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d824      	bhi.n	8006846 <One_Time_Task+0xda>
 80067fc:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <One_Time_Task+0x98>)
 80067fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006802:	bf00      	nop
 8006804:	08006829 	.word	0x08006829
 8006808:	0800682f 	.word	0x0800682f
 800680c:	08006835 	.word	0x08006835
 8006810:	0800683b 	.word	0x0800683b
 8006814:	08006847 	.word	0x08006847
 8006818:	08006847 	.word	0x08006847
 800681c:	08006847 	.word	0x08006847
 8006820:	08006847 	.word	0x08006847
 8006824:	08006841 	.word	0x08006841
				PC_CMV_Pulse_E_Parameter();
 8006828:	f7fc fd2a 	bl	8003280 <PC_CMV_Pulse_E_Parameter>
				break;
 800682c:	e00c      	b.n	8006848 <One_Time_Task+0xdc>
				VC_CMV_Pulse_E_Parameter();
 800682e:	f7ff f847 	bl	80058c0 <VC_CMV_Pulse_E_Parameter>
				break;
 8006832:	e009      	b.n	8006848 <One_Time_Task+0xdc>
				PC_SIMV_Pulse_E_Parameter();
 8006834:	f7fb ffc6 	bl	80027c4 <PC_SIMV_Pulse_E_Parameter>
				break;
 8006838:	e006      	b.n	8006848 <One_Time_Task+0xdc>
				VC_SIMV_Pulse_E_Parameter();
 800683a:	f7fe fbab 	bl	8004f94 <VC_SIMV_Pulse_E_Parameter>
				break;
 800683e:	e003      	b.n	8006848 <One_Time_Task+0xdc>
				BACKUP_PC_SIMV_Pulse_E_Parameter();
 8006840:	f7fa fcd4 	bl	80011ec <BACKUP_PC_SIMV_Pulse_E_Parameter>
				break;
 8006844:	e000      	b.n	8006848 <One_Time_Task+0xdc>
				break;
 8006846:	bf00      	nop
			break;
 8006848:	e002      	b.n	8006850 <One_Time_Task+0xe4>
			break;
 800684a:	bf00      	nop
 800684c:	e792      	b.n	8006774 <One_Time_Task+0x8>
			break;
 800684e:	bf00      	nop
		switch (_CurrentWaveFormState)
 8006850:	e790      	b.n	8006774 <One_Time_Task+0x8>
 8006852:	bf00      	nop
 8006854:	20004642 	.word	0x20004642
 8006858:	20004644 	.word	0x20004644
 800685c:	2000482c 	.word	0x2000482c

08006860 <Offset_Task>:
	}

}

void Offset_Task (void *argument)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	while (1)
	{
		vTaskSuspend(pc_mode_Handler);
 8006868:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <Offset_Task+0x94>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	f006 fbef 	bl	800d050 <vTaskSuspend>
		vTaskSuspend(Pc_cmv_Pid_Handler);
 8006872:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <Offset_Task+0x98>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f006 fbea 	bl	800d050 <vTaskSuspend>

		vTaskSuspend(Vc_mode_Handler);
 800687c:	4b1f      	ldr	r3, [pc, #124]	; (80068fc <Offset_Task+0x9c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f006 fbe5 	bl	800d050 <vTaskSuspend>
	    vTaskSuspend(Vc_cmv_Pid_Handler);
 8006886:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <Offset_Task+0xa0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f006 fbe0 	bl	800d050 <vTaskSuspend>

	    vTaskSuspend(Pc_simv_Mode_Handler);
 8006890:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <Offset_Task+0xa4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f006 fbdb 	bl	800d050 <vTaskSuspend>
	    vTaskSuspend(Pc_simv_Mode_Handler);
 800689a:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <Offset_Task+0xa4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f006 fbd6 	bl	800d050 <vTaskSuspend>

	    vTaskSuspend(Vc_simv_mode_Handler);
 80068a4:	4b18      	ldr	r3, [pc, #96]	; (8006908 <Offset_Task+0xa8>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f006 fbd1 	bl	800d050 <vTaskSuspend>
	    vTaskSuspend(Vc_cmv_simv_Pid_Handler);
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <Offset_Task+0xac>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f006 fbcc 	bl	800d050 <vTaskSuspend>

	    vTaskSuspend(Psv_Handler);
 80068b8:	4b15      	ldr	r3, [pc, #84]	; (8006910 <Offset_Task+0xb0>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f006 fbc7 	bl	800d050 <vTaskSuspend>
	    vTaskSuspend(Psv_Pid_Handler);
 80068c2:	4b14      	ldr	r3, [pc, #80]	; (8006914 <Offset_Task+0xb4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f006 fbc2 	bl	800d050 <vTaskSuspend>

	    vTaskSuspend(Back_Up_PC_CMV_Mode_Handler);
 80068cc:	4b12      	ldr	r3, [pc, #72]	; (8006918 <Offset_Task+0xb8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f006 fbbd 	bl	800d050 <vTaskSuspend>
	    vTaskSuspend(PID_Back_Up_PC_CMV_Mode_Handler);
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <Offset_Task+0xbc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f006 fbb8 	bl	800d050 <vTaskSuspend>

		Pressure_Sensor_offset();
 80068e0:	f7fd fb20 	bl	8003f24 <Pressure_Sensor_offset>
		Flow_Sensor_7002_offset();
 80068e4:	f7fb fbc6 	bl	8002074 <Flow_Sensor_7002_offset>
		vTaskDelete(Sensor_Offset_Handler);
 80068e8:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <Offset_Task+0xc0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f006 faeb 	bl	800cec8 <vTaskDelete>
		vTaskSuspend(pc_mode_Handler);
 80068f2:	e7b9      	b.n	8006868 <Offset_Task+0x8>
 80068f4:	20004614 	.word	0x20004614
 80068f8:	2000460c 	.word	0x2000460c
 80068fc:	2000484c 	.word	0x2000484c
 8006900:	200045a8 	.word	0x200045a8
 8006904:	20004948 	.word	0x20004948
 8006908:	20004728 	.word	0x20004728
 800690c:	200048f4 	.word	0x200048f4
 8006910:	200046d8 	.word	0x200046d8
 8006914:	20004610 	.word	0x20004610
 8006918:	200046d0 	.word	0x200046d0
 800691c:	200047e4 	.word	0x200047e4
 8006920:	20004988 	.word	0x20004988

08006924 <Sensor_Data_Read_Task>:

	}
}

void Sensor_Data_Read_Task (void *argument)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	while (1)
	{

		Pressure_Sensor_Value();
 800692c:	f7fd fb1a 	bl	8003f64 <Pressure_Sensor_Value>
		Flow_Sensor_Value();
 8006930:	f7fb fdb2 	bl	8002498 <Flow_Sensor_Value>
		Get_Volume();
 8006934:	f7fb fa90 	bl	8001e58 <Get_Volume>
		vTaskDelay(2);
 8006938:	2002      	movs	r0, #2
 800693a:	f006 fb55 	bl	800cfe8 <vTaskDelay>
		Pressure_Sensor_Value();
 800693e:	e7f5      	b.n	800692c <Sensor_Data_Read_Task+0x8>

08006940 <One_Milli_Second_Task>:
}



void One_Milli_Second_Task (void *argument)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
	while (1)
	{

		if(_E_TIMER>0)
 8006948:	4b3f      	ldr	r3, [pc, #252]	; (8006a48 <One_Milli_Second_Task+0x108>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d031      	beq.n	80069b4 <One_Milli_Second_Task+0x74>
		{
			_E_TIMER-- ;
 8006950:	4b3d      	ldr	r3, [pc, #244]	; (8006a48 <One_Milli_Second_Task+0x108>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3b01      	subs	r3, #1
 8006956:	4a3c      	ldr	r2, [pc, #240]	; (8006a48 <One_Milli_Second_Task+0x108>)
 8006958:	6013      	str	r3, [r2, #0]
			_E_TIMER_ACHEIVED++;
 800695a:	4b3c      	ldr	r3, [pc, #240]	; (8006a4c <One_Milli_Second_Task+0x10c>)
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	4b3a      	ldr	r3, [pc, #232]	; (8006a4c <One_Milli_Second_Task+0x10c>)
 8006964:	801a      	strh	r2, [r3, #0]
				if(_E_TIMER<100)
 8006966:	4b38      	ldr	r3, [pc, #224]	; (8006a48 <One_Milli_Second_Task+0x108>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b63      	cmp	r3, #99	; 0x63
 800696c:	d822      	bhi.n	80069b4 <One_Milli_Second_Task+0x74>
				{
					S5._Peep_Avg+=Pressure_sensor._Pressure_Val;
 800696e:	4b38      	ldr	r3, [pc, #224]	; (8006a50 <One_Milli_Second_Task+0x110>)
 8006970:	ed93 7a05 	vldr	s14, [r3, #20]
 8006974:	4b37      	ldr	r3, [pc, #220]	; (8006a54 <One_Milli_Second_Task+0x114>)
 8006976:	791b      	ldrb	r3, [r3, #4]
 8006978:	ee07 3a90 	vmov	s15, r3
 800697c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006984:	4b32      	ldr	r3, [pc, #200]	; (8006a50 <One_Milli_Second_Task+0x110>)
 8006986:	edc3 7a05 	vstr	s15, [r3, #20]
					S5._Peep_Avg_count++;
 800698a:	4b31      	ldr	r3, [pc, #196]	; (8006a50 <One_Milli_Second_Task+0x110>)
 800698c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006994:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006998:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <One_Milli_Second_Task+0x110>)
 800699a:	edc3 7a06 	vstr	s15, [r3, #24]
						if(S5.peep_max<Pressure_sensor._Pressure_Val)
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <One_Milli_Second_Task+0x110>)
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	4a2c      	ldr	r2, [pc, #176]	; (8006a54 <One_Milli_Second_Task+0x114>)
 80069a4:	7912      	ldrb	r2, [r2, #4]
 80069a6:	4293      	cmp	r3, r2
 80069a8:	da04      	bge.n	80069b4 <One_Milli_Second_Task+0x74>
						{
							S5.peep_max=Pressure_sensor._Pressure_Val;
 80069aa:	4b2a      	ldr	r3, [pc, #168]	; (8006a54 <One_Milli_Second_Task+0x114>)
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	461a      	mov	r2, r3
 80069b0:	4b27      	ldr	r3, [pc, #156]	; (8006a50 <One_Milli_Second_Task+0x110>)
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38
						}
				}

		}
		if(_I_TIMER>0)
 80069b4:	4b28      	ldr	r3, [pc, #160]	; (8006a58 <One_Milli_Second_Task+0x118>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02c      	beq.n	8006a16 <One_Milli_Second_Task+0xd6>
		{
			_I_TIMER-- ;
 80069bc:	4b26      	ldr	r3, [pc, #152]	; (8006a58 <One_Milli_Second_Task+0x118>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <One_Milli_Second_Task+0x118>)
 80069c4:	6013      	str	r3, [r2, #0]
			_I_TIMER_ACHEIVED++;
 80069c6:	4b25      	ldr	r3, [pc, #148]	; (8006a5c <One_Milli_Second_Task+0x11c>)
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <One_Milli_Second_Task+0x11c>)
 80069d0:	801a      	strh	r2, [r3, #0]
			    if(_I_TIMER_ACHEIVED>100)
 80069d2:	4b22      	ldr	r3, [pc, #136]	; (8006a5c <One_Milli_Second_Task+0x11c>)
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	2b64      	cmp	r3, #100	; 0x64
 80069d8:	d901      	bls.n	80069de <One_Milli_Second_Task+0x9e>
				{
					 Pressure_Min_Max();
 80069da:	f7ff fa23 	bl	8005e24 <Pressure_Min_Max>
				}
			    if(_I_TIMER<200)
 80069de:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <One_Milli_Second_Task+0x118>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2bc7      	cmp	r3, #199	; 0xc7
 80069e4:	d817      	bhi.n	8006a16 <One_Milli_Second_Task+0xd6>
				{
					S5._Pip_Avg+=Pressure_sensor._Pressure_Val;
 80069e6:	4b1a      	ldr	r3, [pc, #104]	; (8006a50 <One_Milli_Second_Task+0x110>)
 80069e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80069ec:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <One_Milli_Second_Task+0x114>)
 80069ee:	791b      	ldrb	r3, [r3, #4]
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069fc:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <One_Milli_Second_Task+0x110>)
 80069fe:	edc3 7a02 	vstr	s15, [r3, #8]
					S5._Pip_Avg_count++;
 8006a02:	4b13      	ldr	r3, [pc, #76]	; (8006a50 <One_Milli_Second_Task+0x110>)
 8006a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <One_Milli_Second_Task+0x110>)
 8006a12:	edc3 7a03 	vstr	s15, [r3, #12]
				}
		}
		if(P1._APNEA_COUNTER  > 0)
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <One_Milli_Second_Task+0x120>)
 8006a18:	8bdb      	ldrh	r3, [r3, #30]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <One_Milli_Second_Task+0xea>
		{
			P1._APNEA_COUNTER -- ;
 8006a1e:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <One_Milli_Second_Task+0x120>)
 8006a20:	8bdb      	ldrh	r3, [r3, #30]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <One_Milli_Second_Task+0x120>)
 8006a28:	83da      	strh	r2, [r3, #30]

		}

		if(P1._Apnea_counter_trigger_check_time>0)
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	; (8006a60 <One_Milli_Second_Task+0x120>)
 8006a2c:	889b      	ldrh	r3, [r3, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <One_Milli_Second_Task+0xfe>
		{
		    P1._Apnea_counter_trigger_check_time--;
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <One_Milli_Second_Task+0x120>)
 8006a34:	889b      	ldrh	r3, [r3, #4]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <One_Milli_Second_Task+0x120>)
 8006a3c:	809a      	strh	r2, [r3, #4]
		}
		vTaskDelay(1);
 8006a3e:	2001      	movs	r0, #1
 8006a40:	f006 fad2 	bl	800cfe8 <vTaskDelay>
		if(_E_TIMER>0)
 8006a44:	e780      	b.n	8006948 <One_Milli_Second_Task+0x8>
 8006a46:	bf00      	nop
 8006a48:	20004848 	.word	0x20004848
 8006a4c:	20004964 	.word	0x20004964
 8006a50:	200048fc 	.word	0x200048fc
 8006a54:	200047ac 	.word	0x200047ac
 8006a58:	200048f8 	.word	0x200048f8
 8006a5c:	20004658 	.word	0x20004658
 8006a60:	200045ac 	.word	0x200045ac

08006a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d101      	bne.n	8006a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006a76:	f000 fb71 	bl	800715c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40001000 	.word	0x40001000

08006a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a8c:	b672      	cpsid	i
}
 8006a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a90:	e7fe      	b.n	8006a90 <Error_Handler+0x8>
	...

08006a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <HAL_MspInit+0x54>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	4a11      	ldr	r2, [pc, #68]	; (8006ae8 <HAL_MspInit+0x54>)
 8006aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8006aaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <HAL_MspInit+0x54>)
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <HAL_MspInit+0x54>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <HAL_MspInit+0x54>)
 8006ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ac6:	4b08      	ldr	r3, [pc, #32]	; (8006ae8 <HAL_MspInit+0x54>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	210f      	movs	r1, #15
 8006ad6:	f06f 0001 	mvn.w	r0, #1
 8006ada:	f001 f829 	bl	8007b30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ade:	bf00      	nop
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40023800 	.word	0x40023800

08006aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af4:	f107 0314 	add.w	r3, r7, #20
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	605a      	str	r2, [r3, #4]
 8006afe:	609a      	str	r2, [r3, #8]
 8006b00:	60da      	str	r2, [r3, #12]
 8006b02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a3c      	ldr	r2, [pc, #240]	; (8006bfc <HAL_ADC_MspInit+0x110>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d171      	bne.n	8006bf2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	4b3b      	ldr	r3, [pc, #236]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	4a3a      	ldr	r2, [pc, #232]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b1e:	4b38      	ldr	r3, [pc, #224]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	4b34      	ldr	r3, [pc, #208]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b34:	f043 0304 	orr.w	r3, r3, #4
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3a:	4b31      	ldr	r3, [pc, #196]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	4a2c      	ldr	r2, [pc, #176]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	6313      	str	r3, [r2, #48]	; 0x30
 8006b56:	4b2a      	ldr	r3, [pc, #168]	; (8006c00 <HAL_ADC_MspInit+0x114>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8006b62:	2328      	movs	r3, #40	; 0x28
 8006b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b66:	2303      	movs	r3, #3
 8006b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b6e:	f107 0314 	add.w	r3, r7, #20
 8006b72:	4619      	mov	r1, r3
 8006b74:	4823      	ldr	r0, [pc, #140]	; (8006c04 <HAL_ADC_MspInit+0x118>)
 8006b76:	f001 fd5d 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8006b7a:	230d      	movs	r3, #13
 8006b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b86:	f107 0314 	add.w	r3, r7, #20
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	481e      	ldr	r0, [pc, #120]	; (8006c08 <HAL_ADC_MspInit+0x11c>)
 8006b8e:	f001 fd51 	bl	8008634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006b92:	4b1e      	ldr	r3, [pc, #120]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006b94:	4a1e      	ldr	r2, [pc, #120]	; (8006c10 <HAL_ADC_MspInit+0x124>)
 8006b96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006b98:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b9e:	4b1b      	ldr	r3, [pc, #108]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ba4:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006baa:	4b18      	ldr	r3, [pc, #96]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bb2:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006bca:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bd6:	480d      	ldr	r0, [pc, #52]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bd8:	f001 f92a 	bl	8007e30 <HAL_DMA_Init>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8006be2:	f7ff ff51 	bl	8006a88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
 8006bec:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <HAL_ADC_MspInit+0x120>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006bf2:	bf00      	nop
 8006bf4:	3728      	adds	r7, #40	; 0x28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40012000 	.word	0x40012000
 8006c00:	40023800 	.word	0x40023800
 8006c04:	40020800 	.word	0x40020800
 8006c08:	40020000 	.word	0x40020000
 8006c0c:	20004a30 	.word	0x20004a30
 8006c10:	40026410 	.word	0x40026410

08006c14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c1c:	f107 0314 	add.w	r3, r7, #20
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	609a      	str	r2, [r3, #8]
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <HAL_DAC_MspInit+0x8c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d12f      	bne.n	8006c96 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <HAL_DAC_MspInit+0x90>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <HAL_DAC_MspInit+0x90>)
 8006c40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c44:	6413      	str	r3, [r2, #64]	; 0x40
 8006c46:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <HAL_DAC_MspInit+0x90>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c4e:	613b      	str	r3, [r7, #16]
 8006c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	4b13      	ldr	r3, [pc, #76]	; (8006ca4 <HAL_DAC_MspInit+0x90>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <HAL_DAC_MspInit+0x90>)
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6313      	str	r3, [r2, #48]	; 0x30
 8006c62:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <HAL_DAC_MspInit+0x90>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006c6e:	2330      	movs	r3, #48	; 0x30
 8006c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c72:	2303      	movs	r3, #3
 8006c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c7a:	f107 0314 	add.w	r3, r7, #20
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4809      	ldr	r0, [pc, #36]	; (8006ca8 <HAL_DAC_MspInit+0x94>)
 8006c82:	f001 fcd7 	bl	8008634 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8006c86:	2200      	movs	r2, #0
 8006c88:	210f      	movs	r1, #15
 8006c8a:	2036      	movs	r0, #54	; 0x36
 8006c8c:	f000 ff50 	bl	8007b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006c90:	2036      	movs	r0, #54	; 0x36
 8006c92:	f000 ff69 	bl	8007b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006c96:	bf00      	nop
 8006c98:	3728      	adds	r7, #40	; 0x28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40007400 	.word	0x40007400
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40020000 	.word	0x40020000

08006cac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cb4:	f107 0314 	add.w	r3, r7, #20
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	605a      	str	r2, [r3, #4]
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <HAL_I2C_MspInit+0x84>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d12c      	bne.n	8006d28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	4b18      	ldr	r3, [pc, #96]	; (8006d34 <HAL_I2C_MspInit+0x88>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <HAL_I2C_MspInit+0x88>)
 8006cd8:	f043 0302 	orr.w	r3, r3, #2
 8006cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <HAL_I2C_MspInit+0x88>)
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006cea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cf0:	2312      	movs	r3, #18
 8006cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	4619      	mov	r1, r3
 8006d06:	480c      	ldr	r0, [pc, #48]	; (8006d38 <HAL_I2C_MspInit+0x8c>)
 8006d08:	f001 fc94 	bl	8008634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_I2C_MspInit+0x88>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <HAL_I2C_MspInit+0x88>)
 8006d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_I2C_MspInit+0x88>)
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006d28:	bf00      	nop
 8006d2a:	3728      	adds	r7, #40	; 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40005800 	.word	0x40005800
 8006d34:	40023800 	.word	0x40023800
 8006d38:	40020400 	.word	0x40020400

08006d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a0b      	ldr	r2, [pc, #44]	; (8006d78 <HAL_TIM_Base_MspInit+0x3c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10d      	bne.n	8006d6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <HAL_TIM_Base_MspInit+0x40>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	4a09      	ldr	r2, [pc, #36]	; (8006d7c <HAL_TIM_Base_MspInit+0x40>)
 8006d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <HAL_TIM_Base_MspInit+0x40>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40001800 	.word	0x40001800
 8006d7c:	40023800 	.word	0x40023800

08006d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	609a      	str	r2, [r3, #8]
 8006d94:	60da      	str	r2, [r3, #12]
 8006d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <HAL_TIM_MspPostInit+0x68>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d11e      	bne.n	8006de0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da2:	2300      	movs	r3, #0
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <HAL_TIM_MspPostInit+0x6c>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	4a10      	ldr	r2, [pc, #64]	; (8006dec <HAL_TIM_MspPostInit+0x6c>)
 8006dac:	f043 0302 	orr.w	r3, r3, #2
 8006db0:	6313      	str	r3, [r2, #48]	; 0x30
 8006db2:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <HAL_TIM_MspPostInit+0x6c>)
 8006db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	60bb      	str	r3, [r7, #8]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PB14     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8006dd0:	2309      	movs	r3, #9
 8006dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4805      	ldr	r0, [pc, #20]	; (8006df0 <HAL_TIM_MspPostInit+0x70>)
 8006ddc:	f001 fc2a 	bl	8008634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8006de0:	bf00      	nop
 8006de2:	3720      	adds	r7, #32
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	40001800 	.word	0x40001800
 8006dec:	40023800 	.word	0x40023800
 8006df0:	40020400 	.word	0x40020400

08006df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08c      	sub	sp, #48	; 0x30
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dfc:	f107 031c 	add.w	r3, r7, #28
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	605a      	str	r2, [r3, #4]
 8006e06:	609a      	str	r2, [r3, #8]
 8006e08:	60da      	str	r2, [r3, #12]
 8006e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a49      	ldr	r2, [pc, #292]	; (8006f38 <HAL_UART_MspInit+0x144>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d153      	bne.n	8006ebe <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	4b48      	ldr	r3, [pc, #288]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	4a47      	ldr	r2, [pc, #284]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e24:	6413      	str	r3, [r2, #64]	; 0x40
 8006e26:	4b45      	ldr	r3, [pc, #276]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	4a40      	ldr	r2, [pc, #256]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e3c:	f043 0304 	orr.w	r3, r3, #4
 8006e40:	6313      	str	r3, [r2, #48]	; 0x30
 8006e42:	4b3e      	ldr	r3, [pc, #248]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e4e:	2300      	movs	r3, #0
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	4b3a      	ldr	r3, [pc, #232]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	4a39      	ldr	r2, [pc, #228]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e58:	f043 0308 	orr.w	r3, r3, #8
 8006e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e5e:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e70:	2302      	movs	r3, #2
 8006e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006e7c:	2308      	movs	r3, #8
 8006e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e80:	f107 031c 	add.w	r3, r7, #28
 8006e84:	4619      	mov	r1, r3
 8006e86:	482e      	ldr	r0, [pc, #184]	; (8006f40 <HAL_UART_MspInit+0x14c>)
 8006e88:	f001 fbd4 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e90:	2302      	movs	r3, #2
 8006e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e94:	2300      	movs	r3, #0
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ea0:	f107 031c 	add.w	r3, r7, #28
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4827      	ldr	r0, [pc, #156]	; (8006f44 <HAL_UART_MspInit+0x150>)
 8006ea8:	f001 fbc4 	bl	8008634 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8006eac:	2200      	movs	r2, #0
 8006eae:	2105      	movs	r1, #5
 8006eb0:	2035      	movs	r0, #53	; 0x35
 8006eb2:	f000 fe3d 	bl	8007b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006eb6:	2035      	movs	r0, #53	; 0x35
 8006eb8:	f000 fe56 	bl	8007b68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006ebc:	e038      	b.n	8006f30 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART6)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a21      	ldr	r2, [pc, #132]	; (8006f48 <HAL_UART_MspInit+0x154>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d133      	bne.n	8006f30 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006ed2:	f043 0320 	orr.w	r3, r3, #32
 8006ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ed8:	4b18      	ldr	r3, [pc, #96]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	4b14      	ldr	r3, [pc, #80]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	4a13      	ldr	r2, [pc, #76]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006eee:	f043 0304 	orr.w	r3, r3, #4
 8006ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef4:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <HAL_UART_MspInit+0x148>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	60bb      	str	r3, [r7, #8]
 8006efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f00:	23c0      	movs	r3, #192	; 0xc0
 8006f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f04:	2302      	movs	r3, #2
 8006f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006f10:	2308      	movs	r3, #8
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f14:	f107 031c 	add.w	r3, r7, #28
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4809      	ldr	r0, [pc, #36]	; (8006f40 <HAL_UART_MspInit+0x14c>)
 8006f1c:	f001 fb8a 	bl	8008634 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006f20:	2200      	movs	r2, #0
 8006f22:	2105      	movs	r1, #5
 8006f24:	2047      	movs	r0, #71	; 0x47
 8006f26:	f000 fe03 	bl	8007b30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006f2a:	2047      	movs	r0, #71	; 0x47
 8006f2c:	f000 fe1c 	bl	8007b68 <HAL_NVIC_EnableIRQ>
}
 8006f30:	bf00      	nop
 8006f32:	3730      	adds	r7, #48	; 0x30
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40005000 	.word	0x40005000
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40020800 	.word	0x40020800
 8006f44:	40020c00 	.word	0x40020c00
 8006f48:	40011400 	.word	0x40011400

08006f4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08c      	sub	sp, #48	; 0x30
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006f54:	2300      	movs	r3, #0
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	2036      	movs	r0, #54	; 0x36
 8006f62:	f000 fde5 	bl	8007b30 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006f66:	2036      	movs	r0, #54	; 0x36
 8006f68:	f000 fdfe 	bl	8007b68 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	4b1f      	ldr	r3, [pc, #124]	; (8006ff0 <HAL_InitTick+0xa4>)
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <HAL_InitTick+0xa4>)
 8006f76:	f043 0310 	orr.w	r3, r3, #16
 8006f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <HAL_InitTick+0xa4>)
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006f88:	f107 0210 	add.w	r2, r7, #16
 8006f8c:	f107 0314 	add.w	r3, r7, #20
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f003 f930 	bl	800a1f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006f98:	f003 f906 	bl	800a1a8 <HAL_RCC_GetPCLK1Freq>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	4a13      	ldr	r2, [pc, #76]	; (8006ff4 <HAL_InitTick+0xa8>)
 8006fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006faa:	0c9b      	lsrs	r3, r3, #18
 8006fac:	3b01      	subs	r3, #1
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006fb0:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <HAL_InitTick+0xac>)
 8006fb2:	4a12      	ldr	r2, [pc, #72]	; (8006ffc <HAL_InitTick+0xb0>)
 8006fb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <HAL_InitTick+0xac>)
 8006fb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006fbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006fbe:	4a0e      	ldr	r2, [pc, #56]	; (8006ff8 <HAL_InitTick+0xac>)
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <HAL_InitTick+0xac>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fca:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <HAL_InitTick+0xac>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006fd0:	4809      	ldr	r0, [pc, #36]	; (8006ff8 <HAL_InitTick+0xac>)
 8006fd2:	f003 f943 	bl	800a25c <HAL_TIM_Base_Init>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006fdc:	4806      	ldr	r0, [pc, #24]	; (8006ff8 <HAL_InitTick+0xac>)
 8006fde:	f003 f98d 	bl	800a2fc <HAL_TIM_Base_Start_IT>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	e000      	b.n	8006fe8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3730      	adds	r7, #48	; 0x30
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	431bde83 	.word	0x431bde83
 8006ff8:	20004ae0 	.word	0x20004ae0
 8006ffc:	40001000 	.word	0x40001000

08007000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007004:	e7fe      	b.n	8007004 <NMI_Handler+0x4>

08007006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007006:	b480      	push	{r7}
 8007008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800700a:	e7fe      	b.n	800700a <HardFault_Handler+0x4>

0800700c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007010:	e7fe      	b.n	8007010 <MemManage_Handler+0x4>

08007012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007012:	b480      	push	{r7}
 8007014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007016:	e7fe      	b.n	8007016 <BusFault_Handler+0x4>

08007018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007018:	b480      	push	{r7}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800701c:	e7fe      	b.n	800701c <UsageFault_Handler+0x4>

0800701e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800701e:	b480      	push	{r7}
 8007020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007022:	bf00      	nop
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8007030:	2004      	movs	r0, #4
 8007032:	f001 fcb5 	bl	80089a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007040:	4802      	ldr	r0, [pc, #8]	; (800704c <UART5_IRQHandler+0x10>)
 8007042:	f004 f98d 	bl	800b360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8007046:	bf00      	nop
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20004680 	.word	0x20004680

08007050 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <TIM6_DAC_IRQHandler+0x20>)
 8007056:	791b      	ldrb	r3, [r3, #4]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800705e:	4804      	ldr	r0, [pc, #16]	; (8007070 <TIM6_DAC_IRQHandler+0x20>)
 8007060:	f000 fe04 	bl	8007c6c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8007064:	4803      	ldr	r0, [pc, #12]	; (8007074 <TIM6_DAC_IRQHandler+0x24>)
 8007066:	f003 fadb 	bl	800a620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20004714 	.word	0x20004714
 8007074:	20004ae0 	.word	0x20004ae0

08007078 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800707c:	4802      	ldr	r0, [pc, #8]	; (8007088 <DMA2_Stream0_IRQHandler+0x10>)
 800707e:	f001 f86f 	bl	8008160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007082:	bf00      	nop
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20004a30 	.word	0x20004a30

0800708c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007090:	4802      	ldr	r0, [pc, #8]	; (800709c <USART6_IRQHandler+0x10>)
 8007092:	f004 f965 	bl	800b360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007096:	bf00      	nop
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200048ac 	.word	0x200048ac

080070a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070a4:	4b06      	ldr	r3, [pc, #24]	; (80070c0 <SystemInit+0x20>)
 80070a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070aa:	4a05      	ldr	r2, [pc, #20]	; (80070c0 <SystemInit+0x20>)
 80070ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80070c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80070fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80070c8:	480d      	ldr	r0, [pc, #52]	; (8007100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80070ca:	490e      	ldr	r1, [pc, #56]	; (8007104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80070cc:	4a0e      	ldr	r2, [pc, #56]	; (8007108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80070ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070d0:	e002      	b.n	80070d8 <LoopCopyDataInit>

080070d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80070d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80070d6:	3304      	adds	r3, #4

080070d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80070d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80070da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070dc:	d3f9      	bcc.n	80070d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070de:	4a0b      	ldr	r2, [pc, #44]	; (800710c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80070e0:	4c0b      	ldr	r4, [pc, #44]	; (8007110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80070e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070e4:	e001      	b.n	80070ea <LoopFillZerobss>

080070e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070e8:	3204      	adds	r2, #4

080070ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070ec:	d3fb      	bcc.n	80070e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80070ee:	f7ff ffd7 	bl	80070a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070f2:	f007 fd83 	bl	800ebfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070f6:	f7fe fec5 	bl	8005e84 <main>
  bx  lr    
 80070fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80070fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007104:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8007108:	0800ee38 	.word	0x0800ee38
  ldr r2, =_sbss
 800710c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8007110:	20004b6c 	.word	0x20004b6c

08007114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007114:	e7fe      	b.n	8007114 <ADC_IRQHandler>
	...

08007118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_Init+0x40>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a0d      	ldr	r2, [pc, #52]	; (8007158 <HAL_Init+0x40>)
 8007122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <HAL_Init+0x40>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a0a      	ldr	r2, [pc, #40]	; (8007158 <HAL_Init+0x40>)
 800712e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007134:	4b08      	ldr	r3, [pc, #32]	; (8007158 <HAL_Init+0x40>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a07      	ldr	r2, [pc, #28]	; (8007158 <HAL_Init+0x40>)
 800713a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007140:	2003      	movs	r0, #3
 8007142:	f000 fcea 	bl	8007b1a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007146:	200f      	movs	r0, #15
 8007148:	f7ff ff00 	bl	8006f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800714c:	f7ff fca2 	bl	8006a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40023c00 	.word	0x40023c00

0800715c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_IncTick+0x20>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	4b06      	ldr	r3, [pc, #24]	; (8007180 <HAL_IncTick+0x24>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4413      	add	r3, r2
 800716c:	4a04      	ldr	r2, [pc, #16]	; (8007180 <HAL_IncTick+0x24>)
 800716e:	6013      	str	r3, [r2, #0]
}
 8007170:	bf00      	nop
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000008 	.word	0x20000008
 8007180:	20004b28 	.word	0x20004b28

08007184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  return uwTick;
 8007188:	4b03      	ldr	r3, [pc, #12]	; (8007198 <HAL_GetTick+0x14>)
 800718a:	681b      	ldr	r3, [r3, #0]
}
 800718c:	4618      	mov	r0, r3
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20004b28 	.word	0x20004b28

0800719c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e033      	b.n	800721a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fc96 	bl	8006aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f003 0310 	and.w	r3, r3, #16
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d118      	bne.n	800720c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071e2:	f023 0302 	bic.w	r3, r3, #2
 80071e6:	f043 0202 	orr.w	r2, r3, #2
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa68 	bl	80076c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	f043 0201 	orr.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	641a      	str	r2, [r3, #64]	; 0x40
 800720a:	e001      	b.n	8007210 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007218:	7bfb      	ldrb	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_ADC_Start_DMA+0x1e>
 800723e:	2302      	movs	r3, #2
 8007240:	e0e9      	b.n	8007416 <HAL_ADC_Start_DMA+0x1f2>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b01      	cmp	r3, #1
 8007256:	d018      	beq.n	800728a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007268:	4b6d      	ldr	r3, [pc, #436]	; (8007420 <HAL_ADC_Start_DMA+0x1fc>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6d      	ldr	r2, [pc, #436]	; (8007424 <HAL_ADC_Start_DMA+0x200>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	0c9a      	lsrs	r2, r3, #18
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800727c:	e002      	b.n	8007284 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	3b01      	subs	r3, #1
 8007282:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f9      	bne.n	800727e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007298:	d107      	bne.n	80072aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	f040 80a1 	bne.w	80073fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072c2:	f023 0301 	bic.w	r3, r3, #1
 80072c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f8:	d106      	bne.n	8007308 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fe:	f023 0206 	bic.w	r2, r3, #6
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	645a      	str	r2, [r3, #68]	; 0x44
 8007306:	e002      	b.n	800730e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007316:	4b44      	ldr	r3, [pc, #272]	; (8007428 <HAL_ADC_Start_DMA+0x204>)
 8007318:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	4a43      	ldr	r2, [pc, #268]	; (800742c <HAL_ADC_Start_DMA+0x208>)
 8007320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	4a42      	ldr	r2, [pc, #264]	; (8007430 <HAL_ADC_Start_DMA+0x20c>)
 8007328:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	4a41      	ldr	r2, [pc, #260]	; (8007434 <HAL_ADC_Start_DMA+0x210>)
 8007330:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800733a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800734a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800735a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	334c      	adds	r3, #76	; 0x4c
 8007366:	4619      	mov	r1, r3
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f000 fe0e 	bl	8007f8c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	2b00      	cmp	r3, #0
 800737a:	d12a      	bne.n	80073d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2d      	ldr	r2, [pc, #180]	; (8007438 <HAL_ADC_Start_DMA+0x214>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d015      	beq.n	80073b2 <HAL_ADC_Start_DMA+0x18e>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2c      	ldr	r2, [pc, #176]	; (800743c <HAL_ADC_Start_DMA+0x218>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d105      	bne.n	800739c <HAL_ADC_Start_DMA+0x178>
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <HAL_ADC_Start_DMA+0x204>)
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <HAL_ADC_Start_DMA+0x21c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d136      	bne.n	8007414 <HAL_ADC_Start_DMA+0x1f0>
 80073a6:	4b20      	ldr	r3, [pc, #128]	; (8007428 <HAL_ADC_Start_DMA+0x204>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d130      	bne.n	8007414 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d129      	bne.n	8007414 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	e020      	b.n	8007414 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a18      	ldr	r2, [pc, #96]	; (8007438 <HAL_ADC_Start_DMA+0x214>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d11b      	bne.n	8007414 <HAL_ADC_Start_DMA+0x1f0>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d114      	bne.n	8007414 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073f8:	609a      	str	r2, [r3, #8]
 80073fa:	e00b      	b.n	8007414 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	f043 0210 	orr.w	r2, r3, #16
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740c:	f043 0201 	orr.w	r2, r3, #1
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000000 	.word	0x20000000
 8007424:	431bde83 	.word	0x431bde83
 8007428:	40012300 	.word	0x40012300
 800742c:	080078bd 	.word	0x080078bd
 8007430:	08007977 	.word	0x08007977
 8007434:	08007993 	.word	0x08007993
 8007438:	40012000 	.word	0x40012000
 800743c:	40012100 	.word	0x40012100
 8007440:	40012200 	.word	0x40012200

08007444 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_ADC_ConfigChannel+0x1c>
 8007498:	2302      	movs	r3, #2
 800749a:	e105      	b.n	80076a8 <HAL_ADC_ConfigChannel+0x228>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	d925      	bls.n	80074f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68d9      	ldr	r1, [r3, #12]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	461a      	mov	r2, r3
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	3b1e      	subs	r3, #30
 80074c2:	2207      	movs	r2, #7
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	43da      	mvns	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	400a      	ands	r2, r1
 80074d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68d9      	ldr	r1, [r3, #12]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	4618      	mov	r0, r3
 80074e4:	4603      	mov	r3, r0
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	4403      	add	r3, r0
 80074ea:	3b1e      	subs	r3, #30
 80074ec:	409a      	lsls	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e022      	b.n	800753e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6919      	ldr	r1, [r3, #16]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	b29b      	uxth	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	4613      	mov	r3, r2
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4413      	add	r3, r2
 800750c:	2207      	movs	r2, #7
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	43da      	mvns	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	400a      	ands	r2, r1
 800751a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6919      	ldr	r1, [r3, #16]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	4618      	mov	r0, r3
 800752e:	4603      	mov	r3, r0
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4403      	add	r3, r0
 8007534:	409a      	lsls	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2b06      	cmp	r3, #6
 8007544:	d824      	bhi.n	8007590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	3b05      	subs	r3, #5
 8007558:	221f      	movs	r2, #31
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	43da      	mvns	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	400a      	ands	r2, r1
 8007566:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	4618      	mov	r0, r3
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	3b05      	subs	r3, #5
 8007582:	fa00 f203 	lsl.w	r2, r0, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	635a      	str	r2, [r3, #52]	; 0x34
 800758e:	e04c      	b.n	800762a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d824      	bhi.n	80075e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	4613      	mov	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	3b23      	subs	r3, #35	; 0x23
 80075aa:	221f      	movs	r2, #31
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	43da      	mvns	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	400a      	ands	r2, r1
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4618      	mov	r0, r3
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	3b23      	subs	r3, #35	; 0x23
 80075d4:	fa00 f203 	lsl.w	r2, r0, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	631a      	str	r2, [r3, #48]	; 0x30
 80075e0:	e023      	b.n	800762a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	3b41      	subs	r3, #65	; 0x41
 80075f4:	221f      	movs	r2, #31
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	43da      	mvns	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	400a      	ands	r2, r1
 8007602:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	4618      	mov	r0, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	3b41      	subs	r3, #65	; 0x41
 800761e:	fa00 f203 	lsl.w	r2, r0, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800762a:	4b22      	ldr	r3, [pc, #136]	; (80076b4 <HAL_ADC_ConfigChannel+0x234>)
 800762c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a21      	ldr	r2, [pc, #132]	; (80076b8 <HAL_ADC_ConfigChannel+0x238>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d109      	bne.n	800764c <HAL_ADC_ConfigChannel+0x1cc>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b12      	cmp	r3, #18
 800763e:	d105      	bne.n	800764c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a19      	ldr	r2, [pc, #100]	; (80076b8 <HAL_ADC_ConfigChannel+0x238>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d123      	bne.n	800769e <HAL_ADC_ConfigChannel+0x21e>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b10      	cmp	r3, #16
 800765c:	d003      	beq.n	8007666 <HAL_ADC_ConfigChannel+0x1e6>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b11      	cmp	r3, #17
 8007664:	d11b      	bne.n	800769e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b10      	cmp	r3, #16
 8007678:	d111      	bne.n	800769e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800767a:	4b10      	ldr	r3, [pc, #64]	; (80076bc <HAL_ADC_ConfigChannel+0x23c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a10      	ldr	r2, [pc, #64]	; (80076c0 <HAL_ADC_ConfigChannel+0x240>)
 8007680:	fba2 2303 	umull	r2, r3, r2, r3
 8007684:	0c9a      	lsrs	r2, r3, #18
 8007686:	4613      	mov	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007690:	e002      	b.n	8007698 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	3b01      	subs	r3, #1
 8007696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f9      	bne.n	8007692 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	40012300 	.word	0x40012300
 80076b8:	40012000 	.word	0x40012000
 80076bc:	20000000 	.word	0x20000000
 80076c0:	431bde83 	.word	0x431bde83

080076c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076cc:	4b79      	ldr	r3, [pc, #484]	; (80078b4 <ADC_Init+0x1f0>)
 80076ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6859      	ldr	r1, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	021a      	lsls	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800771c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6859      	ldr	r1, [r3, #4]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800773e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6899      	ldr	r1, [r3, #8]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	4a58      	ldr	r2, [pc, #352]	; (80078b8 <ADC_Init+0x1f4>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d022      	beq.n	80077a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800776a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6899      	ldr	r1, [r3, #8]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800778c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6899      	ldr	r1, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
 80077a0:	e00f      	b.n	80077c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80077c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0202 	bic.w	r2, r2, #2
 80077d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6899      	ldr	r1, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7e1b      	ldrb	r3, [r3, #24]
 80077dc:	005a      	lsls	r2, r3, #1
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01b      	beq.n	8007828 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800780e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6859      	ldr	r1, [r3, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	3b01      	subs	r3, #1
 800781c:	035a      	lsls	r2, r3, #13
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	e007      	b.n	8007838 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007836:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007846:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	3b01      	subs	r3, #1
 8007854:	051a      	lsls	r2, r3, #20
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800786c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6899      	ldr	r1, [r3, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800787a:	025a      	lsls	r2, r3, #9
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6899      	ldr	r1, [r3, #8]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	029a      	lsls	r2, r3, #10
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	609a      	str	r2, [r3, #8]
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	40012300 	.word	0x40012300
 80078b8:	0f000001 	.word	0x0f000001

080078bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d13c      	bne.n	8007950 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d12b      	bne.n	8007948 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d127      	bne.n	8007948 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007902:	2b00      	cmp	r3, #0
 8007904:	d006      	beq.n	8007914 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007910:	2b00      	cmp	r3, #0
 8007912:	d119      	bne.n	8007948 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0220 	bic.w	r2, r2, #32
 8007922:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d105      	bne.n	8007948 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	f043 0201 	orr.w	r2, r3, #1
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff fd7b 	bl	8007444 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800794e:	e00e      	b.n	800796e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff fd85 	bl	800746c <HAL_ADC_ErrorCallback>
}
 8007962:	e004      	b.n	800796e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7ff fd67 	bl	8007458 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2240      	movs	r2, #64	; 0x40
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079aa:	f043 0204 	orr.w	r2, r3, #4
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff fd5a 	bl	800746c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <__NVIC_SetPriorityGrouping+0x44>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079dc:	4013      	ands	r3, r2
 80079de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079f2:	4a04      	ldr	r2, [pc, #16]	; (8007a04 <__NVIC_SetPriorityGrouping+0x44>)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	60d3      	str	r3, [r2, #12]
}
 80079f8:	bf00      	nop
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	e000ed00 	.word	0xe000ed00

08007a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a0c:	4b04      	ldr	r3, [pc, #16]	; (8007a20 <__NVIC_GetPriorityGrouping+0x18>)
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	f003 0307 	and.w	r3, r3, #7
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	e000ed00 	.word	0xe000ed00

08007a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	db0b      	blt.n	8007a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	f003 021f 	and.w	r2, r3, #31
 8007a3c:	4907      	ldr	r1, [pc, #28]	; (8007a5c <__NVIC_EnableIRQ+0x38>)
 8007a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	2001      	movs	r0, #1
 8007a46:	fa00 f202 	lsl.w	r2, r0, r2
 8007a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a4e:	bf00      	nop
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	e000e100 	.word	0xe000e100

08007a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	6039      	str	r1, [r7, #0]
 8007a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	db0a      	blt.n	8007a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	490c      	ldr	r1, [pc, #48]	; (8007aac <__NVIC_SetPriority+0x4c>)
 8007a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a7e:	0112      	lsls	r2, r2, #4
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	440b      	add	r3, r1
 8007a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a88:	e00a      	b.n	8007aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4908      	ldr	r1, [pc, #32]	; (8007ab0 <__NVIC_SetPriority+0x50>)
 8007a90:	79fb      	ldrb	r3, [r7, #7]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	3b04      	subs	r3, #4
 8007a98:	0112      	lsls	r2, r2, #4
 8007a9a:	b2d2      	uxtb	r2, r2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	761a      	strb	r2, [r3, #24]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	e000e100 	.word	0xe000e100
 8007ab0:	e000ed00 	.word	0xe000ed00

08007ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b089      	sub	sp, #36	; 0x24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	f1c3 0307 	rsb	r3, r3, #7
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	bf28      	it	cs
 8007ad2:	2304      	movcs	r3, #4
 8007ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	2b06      	cmp	r3, #6
 8007adc:	d902      	bls.n	8007ae4 <NVIC_EncodePriority+0x30>
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	3b03      	subs	r3, #3
 8007ae2:	e000      	b.n	8007ae6 <NVIC_EncodePriority+0x32>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43da      	mvns	r2, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	401a      	ands	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007afc:	f04f 31ff 	mov.w	r1, #4294967295
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	fa01 f303 	lsl.w	r3, r1, r3
 8007b06:	43d9      	mvns	r1, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b0c:	4313      	orrs	r3, r2
         );
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3724      	adds	r7, #36	; 0x24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff ff4c 	bl	80079c0 <__NVIC_SetPriorityGrouping>
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b42:	f7ff ff61 	bl	8007a08 <__NVIC_GetPriorityGrouping>
 8007b46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f7ff ffb1 	bl	8007ab4 <NVIC_EncodePriority>
 8007b52:	4602      	mov	r2, r0
 8007b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff ff80 	bl	8007a60 <__NVIC_SetPriority>
}
 8007b60:	bf00      	nop
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff ff54 	bl	8007a24 <__NVIC_EnableIRQ>
}
 8007b7c:	bf00      	nop
 8007b7e:	3708      	adds	r7, #8
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e014      	b.n	8007bc0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	791b      	ldrb	r3, [r3, #4]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d105      	bne.n	8007bac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff f834 	bl	8006c14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	795b      	ldrb	r3, [r3, #5]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_DAC_Start+0x16>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e040      	b.n	8007c60 <HAL_DAC_Start+0x98>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	409a      	lsls	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10f      	bne.n	8007c28 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007c12:	2b3c      	cmp	r3, #60	; 0x3c
 8007c14:	d11d      	bne.n	8007c52 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0201 	orr.w	r2, r2, #1
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	e014      	b.n	8007c52 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	213c      	movs	r1, #60	; 0x3c
 8007c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d107      	bne.n	8007c52 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0202 	orr.w	r2, r2, #2
 8007c50:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d120      	bne.n	8007cc6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c92:	d118      	bne.n	8007cc6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2204      	movs	r2, #4
 8007c98:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f043 0201 	orr.w	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cbe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f852 	bl	8007d6a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd4:	d120      	bne.n	8007d18 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ce4:	d118      	bne.n	8007d18 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f043 0202 	orr.w	r2, r3, #2
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007d00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d10:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f882 	bl	8007e1c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d105      	bne.n	8007d4a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4413      	add	r3, r2
 8007d44:	3308      	adds	r3, #8
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	e004      	b.n	8007d54 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4413      	add	r3, r2
 8007d50:	3314      	adds	r3, #20
 8007d52:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	461a      	mov	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	371c      	adds	r7, #28
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b087      	sub	sp, #28
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	795b      	ldrb	r3, [r3, #5]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d101      	bne.n	8007d96 <HAL_DAC_ConfigChannel+0x18>
 8007d92:	2302      	movs	r3, #2
 8007d94:	e03c      	b.n	8007e10 <HAL_DAC_ConfigChannel+0x92>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	43db      	mvns	r3, r3
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6819      	ldr	r1, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f003 0310 	and.w	r3, r3, #16
 8007df2:	22c0      	movs	r2, #192	; 0xc0
 8007df4:	fa02 f303 	lsl.w	r3, r2, r3
 8007df8:	43da      	mvns	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	400a      	ands	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007e3c:	f7ff f9a2 	bl	8007184 <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e099      	b.n	8007f80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0201 	bic.w	r2, r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e6c:	e00f      	b.n	8007e8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e6e:	f7ff f989 	bl	8007184 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	d908      	bls.n	8007e8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2203      	movs	r2, #3
 8007e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e078      	b.n	8007f80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e8      	bne.n	8007e6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4b38      	ldr	r3, [pc, #224]	; (8007f88 <HAL_DMA_Init+0x158>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ed2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a1b      	ldr	r3, [r3, #32]
 8007ed8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d107      	bne.n	8007ef8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f023 0307 	bic.w	r3, r3, #7
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d117      	bne.n	8007f52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fb01 	bl	800853c <DMA_CheckFifoParam>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2240      	movs	r2, #64	; 0x40
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e016      	b.n	8007f80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 fab8 	bl	80084d0 <DMA_CalcBaseAndBitshift>
 8007f60:	4603      	mov	r3, r0
 8007f62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f68:	223f      	movs	r2, #63	; 0x3f
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	f010803f 	.word	0xf010803f

08007f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <HAL_DMA_Start_IT+0x26>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e040      	b.n	8008034 <HAL_DMA_Start_IT+0xa8>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d12f      	bne.n	8008026 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	68b9      	ldr	r1, [r7, #8]
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fa4a 	bl	8008474 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe4:	223f      	movs	r2, #63	; 0x3f
 8007fe6:	409a      	lsls	r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0216 	orr.w	r2, r2, #22
 8007ffa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0208 	orr.w	r2, r2, #8
 8008012:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	e005      	b.n	8008032 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800802e:	2302      	movs	r3, #2
 8008030:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008048:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800804a:	f7ff f89b 	bl	8007184 <HAL_GetTick>
 800804e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d008      	beq.n	800806e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2280      	movs	r2, #128	; 0x80
 8008060:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e052      	b.n	8008114 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0216 	bic.w	r2, r2, #22
 800807c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695a      	ldr	r2, [r3, #20]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800808c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <HAL_DMA_Abort+0x62>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0208 	bic.w	r2, r2, #8
 80080ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0201 	bic.w	r2, r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080be:	e013      	b.n	80080e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080c0:	f7ff f860 	bl	8007184 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b05      	cmp	r3, #5
 80080cc:	d90c      	bls.n	80080e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2203      	movs	r2, #3
 80080d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e015      	b.n	8008114 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e4      	bne.n	80080c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fa:	223f      	movs	r2, #63	; 0x3f
 80080fc:	409a      	lsls	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d004      	beq.n	800813a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2280      	movs	r2, #128	; 0x80
 8008134:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e00c      	b.n	8008154 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2205      	movs	r2, #5
 800813e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0201 	bic.w	r2, r2, #1
 8008150:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800816c:	4b92      	ldr	r3, [pc, #584]	; (80083b8 <HAL_DMA_IRQHandler+0x258>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a92      	ldr	r2, [pc, #584]	; (80083bc <HAL_DMA_IRQHandler+0x25c>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	0a9b      	lsrs	r3, r3, #10
 8008178:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818a:	2208      	movs	r2, #8
 800818c:	409a      	lsls	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4013      	ands	r3, r2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01a      	beq.n	80081cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d013      	beq.n	80081cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0204 	bic.w	r2, r2, #4
 80081b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b8:	2208      	movs	r2, #8
 80081ba:	409a      	lsls	r2, r3
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c4:	f043 0201 	orr.w	r2, r3, #1
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d0:	2201      	movs	r2, #1
 80081d2:	409a      	lsls	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4013      	ands	r3, r2
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d012      	beq.n	8008202 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ee:	2201      	movs	r2, #1
 80081f0:	409a      	lsls	r2, r3
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	f043 0202 	orr.w	r2, r3, #2
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008206:	2204      	movs	r2, #4
 8008208:	409a      	lsls	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d012      	beq.n	8008238 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008224:	2204      	movs	r2, #4
 8008226:	409a      	lsls	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008230:	f043 0204 	orr.w	r2, r3, #4
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823c:	2210      	movs	r2, #16
 800823e:	409a      	lsls	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4013      	ands	r3, r2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d043      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d03c      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800825a:	2210      	movs	r2, #16
 800825c:	409a      	lsls	r2, r3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d018      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d108      	bne.n	8008290 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d024      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
 800828e:	e01f      	b.n	80082d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01b      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
 80082a0:	e016      	b.n	80082d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d107      	bne.n	80082c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0208 	bic.w	r2, r2, #8
 80082be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d4:	2220      	movs	r2, #32
 80082d6:	409a      	lsls	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 808e 	beq.w	80083fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8086 	beq.w	80083fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f6:	2220      	movs	r2, #32
 80082f8:	409a      	lsls	r2, r3
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b05      	cmp	r3, #5
 8008308:	d136      	bne.n	8008378 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0216 	bic.w	r2, r2, #22
 8008318:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	695a      	ldr	r2, [r3, #20]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008328:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <HAL_DMA_IRQHandler+0x1da>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0208 	bic.w	r2, r2, #8
 8008348:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834e:	223f      	movs	r2, #63	; 0x3f
 8008350:	409a      	lsls	r2, r3
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836a:	2b00      	cmp	r3, #0
 800836c:	d07d      	beq.n	800846a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	4798      	blx	r3
        }
        return;
 8008376:	e078      	b.n	800846a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d01c      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d108      	bne.n	80083a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	2b00      	cmp	r3, #0
 800839a:	d030      	beq.n	80083fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
 80083a4:	e02b      	b.n	80083fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d027      	beq.n	80083fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
 80083b6:	e022      	b.n	80083fe <HAL_DMA_IRQHandler+0x29e>
 80083b8:	20000000 	.word	0x20000000
 80083bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10f      	bne.n	80083ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0210 	bic.w	r2, r2, #16
 80083dc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008402:	2b00      	cmp	r3, #0
 8008404:	d032      	beq.n	800846c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d022      	beq.n	8008458 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2205      	movs	r2, #5
 8008416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	3301      	adds	r3, #1
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	429a      	cmp	r2, r3
 8008434:	d307      	bcc.n	8008446 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1f2      	bne.n	800842a <HAL_DMA_IRQHandler+0x2ca>
 8008444:	e000      	b.n	8008448 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008446:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	4798      	blx	r3
 8008468:	e000      	b.n	800846c <HAL_DMA_IRQHandler+0x30c>
        return;
 800846a:	bf00      	nop
    }
  }
}
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop

08008474 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008490:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	d108      	bne.n	80084b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80084b2:	e007      	b.n	80084c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	60da      	str	r2, [r3, #12]
}
 80084c4:	bf00      	nop
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	3b10      	subs	r3, #16
 80084e0:	4a14      	ldr	r2, [pc, #80]	; (8008534 <DMA_CalcBaseAndBitshift+0x64>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	091b      	lsrs	r3, r3, #4
 80084e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80084ea:	4a13      	ldr	r2, [pc, #76]	; (8008538 <DMA_CalcBaseAndBitshift+0x68>)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d909      	bls.n	8008512 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008506:	f023 0303 	bic.w	r3, r3, #3
 800850a:	1d1a      	adds	r2, r3, #4
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	659a      	str	r2, [r3, #88]	; 0x58
 8008510:	e007      	b.n	8008522 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	aaaaaaab 	.word	0xaaaaaaab
 8008538:	0800ee20 	.word	0x0800ee20

0800853c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d11f      	bne.n	8008596 <DMA_CheckFifoParam+0x5a>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b03      	cmp	r3, #3
 800855a:	d856      	bhi.n	800860a <DMA_CheckFifoParam+0xce>
 800855c:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <DMA_CheckFifoParam+0x28>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008575 	.word	0x08008575
 8008568:	08008587 	.word	0x08008587
 800856c:	08008575 	.word	0x08008575
 8008570:	0800860b 	.word	0x0800860b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d046      	beq.n	800860e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008584:	e043      	b.n	800860e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800858e:	d140      	bne.n	8008612 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008594:	e03d      	b.n	8008612 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800859e:	d121      	bne.n	80085e4 <DMA_CheckFifoParam+0xa8>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d837      	bhi.n	8008616 <DMA_CheckFifoParam+0xda>
 80085a6:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <DMA_CheckFifoParam+0x70>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085bd 	.word	0x080085bd
 80085b0:	080085c3 	.word	0x080085c3
 80085b4:	080085bd 	.word	0x080085bd
 80085b8:	080085d5 	.word	0x080085d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
      break;
 80085c0:	e030      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d025      	beq.n	800861a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085d2:	e022      	b.n	800861a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085dc:	d11f      	bne.n	800861e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80085e2:	e01c      	b.n	800861e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d903      	bls.n	80085f2 <DMA_CheckFifoParam+0xb6>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d003      	beq.n	80085f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80085f0:	e018      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	73fb      	strb	r3, [r7, #15]
      break;
 80085f6:	e015      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00e      	beq.n	8008622 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	73fb      	strb	r3, [r7, #15]
      break;
 8008608:	e00b      	b.n	8008622 <DMA_CheckFifoParam+0xe6>
      break;
 800860a:	bf00      	nop
 800860c:	e00a      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      break;
 800860e:	bf00      	nop
 8008610:	e008      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      break;
 8008612:	bf00      	nop
 8008614:	e006      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      break;
 8008616:	bf00      	nop
 8008618:	e004      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      break;
 800861a:	bf00      	nop
 800861c:	e002      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      break;   
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <DMA_CheckFifoParam+0xe8>
      break;
 8008622:	bf00      	nop
    }
  } 
  
  return status; 
 8008624:	7bfb      	ldrb	r3, [r7, #15]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop

08008634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008634:	b480      	push	{r7}
 8008636:	b089      	sub	sp, #36	; 0x24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008646:	2300      	movs	r3, #0
 8008648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	e16b      	b.n	8008928 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008650:	2201      	movs	r2, #1
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4013      	ands	r3, r2
 8008662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	429a      	cmp	r2, r3
 800866a:	f040 815a 	bne.w	8008922 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	2b01      	cmp	r3, #1
 8008678:	d005      	beq.n	8008686 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008682:	2b02      	cmp	r3, #2
 8008684:	d130      	bne.n	80086e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	2203      	movs	r2, #3
 8008692:	fa02 f303 	lsl.w	r3, r2, r3
 8008696:	43db      	mvns	r3, r3
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	4013      	ands	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	fa02 f303 	lsl.w	r3, r2, r3
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80086bc:	2201      	movs	r2, #1
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	43db      	mvns	r3, r3
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	4013      	ands	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	f003 0201 	and.w	r2, r3, #1
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	4313      	orrs	r3, r2
 80086e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d017      	beq.n	8008724 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	2203      	movs	r2, #3
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	43db      	mvns	r3, r3
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	4013      	ands	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	005b      	lsls	r3, r3, #1
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	4313      	orrs	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f003 0303 	and.w	r3, r3, #3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d123      	bne.n	8008778 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	08da      	lsrs	r2, r3, #3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3208      	adds	r2, #8
 8008738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	220f      	movs	r2, #15
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	43db      	mvns	r3, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4013      	ands	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	691a      	ldr	r2, [r3, #16]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	fa02 f303 	lsl.w	r3, r2, r3
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	4313      	orrs	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	08da      	lsrs	r2, r3, #3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3208      	adds	r2, #8
 8008772:	69b9      	ldr	r1, [r7, #24]
 8008774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	2203      	movs	r2, #3
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	43db      	mvns	r3, r3
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	4013      	ands	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f003 0203 	and.w	r2, r3, #3
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	fa02 f303 	lsl.w	r3, r2, r3
 80087a0:	69ba      	ldr	r2, [r7, #24]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 80b4 	beq.w	8008922 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	4b60      	ldr	r3, [pc, #384]	; (8008940 <HAL_GPIO_Init+0x30c>)
 80087c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c2:	4a5f      	ldr	r2, [pc, #380]	; (8008940 <HAL_GPIO_Init+0x30c>)
 80087c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087c8:	6453      	str	r3, [r2, #68]	; 0x44
 80087ca:	4b5d      	ldr	r3, [pc, #372]	; (8008940 <HAL_GPIO_Init+0x30c>)
 80087cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087d6:	4a5b      	ldr	r2, [pc, #364]	; (8008944 <HAL_GPIO_Init+0x310>)
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	089b      	lsrs	r3, r3, #2
 80087dc:	3302      	adds	r3, #2
 80087de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	220f      	movs	r2, #15
 80087ee:	fa02 f303 	lsl.w	r3, r2, r3
 80087f2:	43db      	mvns	r3, r3
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	4013      	ands	r3, r2
 80087f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a52      	ldr	r2, [pc, #328]	; (8008948 <HAL_GPIO_Init+0x314>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d02b      	beq.n	800885a <HAL_GPIO_Init+0x226>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a51      	ldr	r2, [pc, #324]	; (800894c <HAL_GPIO_Init+0x318>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d025      	beq.n	8008856 <HAL_GPIO_Init+0x222>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a50      	ldr	r2, [pc, #320]	; (8008950 <HAL_GPIO_Init+0x31c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d01f      	beq.n	8008852 <HAL_GPIO_Init+0x21e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a4f      	ldr	r2, [pc, #316]	; (8008954 <HAL_GPIO_Init+0x320>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d019      	beq.n	800884e <HAL_GPIO_Init+0x21a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a4e      	ldr	r2, [pc, #312]	; (8008958 <HAL_GPIO_Init+0x324>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <HAL_GPIO_Init+0x216>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a4d      	ldr	r2, [pc, #308]	; (800895c <HAL_GPIO_Init+0x328>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00d      	beq.n	8008846 <HAL_GPIO_Init+0x212>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a4c      	ldr	r2, [pc, #304]	; (8008960 <HAL_GPIO_Init+0x32c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d007      	beq.n	8008842 <HAL_GPIO_Init+0x20e>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a4b      	ldr	r2, [pc, #300]	; (8008964 <HAL_GPIO_Init+0x330>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d101      	bne.n	800883e <HAL_GPIO_Init+0x20a>
 800883a:	2307      	movs	r3, #7
 800883c:	e00e      	b.n	800885c <HAL_GPIO_Init+0x228>
 800883e:	2308      	movs	r3, #8
 8008840:	e00c      	b.n	800885c <HAL_GPIO_Init+0x228>
 8008842:	2306      	movs	r3, #6
 8008844:	e00a      	b.n	800885c <HAL_GPIO_Init+0x228>
 8008846:	2305      	movs	r3, #5
 8008848:	e008      	b.n	800885c <HAL_GPIO_Init+0x228>
 800884a:	2304      	movs	r3, #4
 800884c:	e006      	b.n	800885c <HAL_GPIO_Init+0x228>
 800884e:	2303      	movs	r3, #3
 8008850:	e004      	b.n	800885c <HAL_GPIO_Init+0x228>
 8008852:	2302      	movs	r3, #2
 8008854:	e002      	b.n	800885c <HAL_GPIO_Init+0x228>
 8008856:	2301      	movs	r3, #1
 8008858:	e000      	b.n	800885c <HAL_GPIO_Init+0x228>
 800885a:	2300      	movs	r3, #0
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	f002 0203 	and.w	r2, r2, #3
 8008862:	0092      	lsls	r2, r2, #2
 8008864:	4093      	lsls	r3, r2
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	4313      	orrs	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800886c:	4935      	ldr	r1, [pc, #212]	; (8008944 <HAL_GPIO_Init+0x310>)
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	089b      	lsrs	r3, r3, #2
 8008872:	3302      	adds	r3, #2
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800887a:	4b3b      	ldr	r3, [pc, #236]	; (8008968 <HAL_GPIO_Init+0x334>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	43db      	mvns	r3, r3
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	4013      	ands	r3, r2
 8008888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800889e:	4a32      	ldr	r2, [pc, #200]	; (8008968 <HAL_GPIO_Init+0x334>)
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80088a4:	4b30      	ldr	r3, [pc, #192]	; (8008968 <HAL_GPIO_Init+0x334>)
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	43db      	mvns	r3, r3
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	4013      	ands	r3, r2
 80088b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d003      	beq.n	80088c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80088c8:	4a27      	ldr	r2, [pc, #156]	; (8008968 <HAL_GPIO_Init+0x334>)
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088ce:	4b26      	ldr	r3, [pc, #152]	; (8008968 <HAL_GPIO_Init+0x334>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	43db      	mvns	r3, r3
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	4013      	ands	r3, r2
 80088dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80088f2:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <HAL_GPIO_Init+0x334>)
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80088f8:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <HAL_GPIO_Init+0x334>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	43db      	mvns	r3, r3
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	4013      	ands	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800891c:	4a12      	ldr	r2, [pc, #72]	; (8008968 <HAL_GPIO_Init+0x334>)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3301      	adds	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	2b0f      	cmp	r3, #15
 800892c:	f67f ae90 	bls.w	8008650 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	3724      	adds	r7, #36	; 0x24
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40023800 	.word	0x40023800
 8008944:	40013800 	.word	0x40013800
 8008948:	40020000 	.word	0x40020000
 800894c:	40020400 	.word	0x40020400
 8008950:	40020800 	.word	0x40020800
 8008954:	40020c00 	.word	0x40020c00
 8008958:	40021000 	.word	0x40021000
 800895c:	40021400 	.word	0x40021400
 8008960:	40021800 	.word	0x40021800
 8008964:	40021c00 	.word	0x40021c00
 8008968:	40013c00 	.word	0x40013c00

0800896c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	807b      	strh	r3, [r7, #2]
 8008978:	4613      	mov	r3, r2
 800897a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800897c:	787b      	ldrb	r3, [r7, #1]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008982:	887a      	ldrh	r2, [r7, #2]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008988:	e003      	b.n	8008992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800898a:	887b      	ldrh	r3, [r7, #2]
 800898c:	041a      	lsls	r2, r3, #16
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	619a      	str	r2, [r3, #24]
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
	...

080089a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80089aa:	4b08      	ldr	r3, [pc, #32]	; (80089cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089ac:	695a      	ldr	r2, [r3, #20]
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	4013      	ands	r3, r2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80089b6:	4a05      	ldr	r2, [pc, #20]	; (80089cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f806 	bl	80089d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	40013c00 	.word	0x40013c00

080089d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	4603      	mov	r3, r0
 80089d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e12b      	b.n	8008c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fe f94c 	bl	8006cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2224      	movs	r2, #36	; 0x24
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008a4c:	f001 fbac 	bl	800a1a8 <HAL_RCC_GetPCLK1Freq>
 8008a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	4a81      	ldr	r2, [pc, #516]	; (8008c5c <HAL_I2C_Init+0x274>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d807      	bhi.n	8008a6c <HAL_I2C_Init+0x84>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4a80      	ldr	r2, [pc, #512]	; (8008c60 <HAL_I2C_Init+0x278>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bf94      	ite	ls
 8008a64:	2301      	movls	r3, #1
 8008a66:	2300      	movhi	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	e006      	b.n	8008a7a <HAL_I2C_Init+0x92>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4a7d      	ldr	r2, [pc, #500]	; (8008c64 <HAL_I2C_Init+0x27c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	bf94      	ite	ls
 8008a74:	2301      	movls	r3, #1
 8008a76:	2300      	movhi	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e0e7      	b.n	8008c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4a78      	ldr	r2, [pc, #480]	; (8008c68 <HAL_I2C_Init+0x280>)
 8008a86:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8a:	0c9b      	lsrs	r3, r3, #18
 8008a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	4a6a      	ldr	r2, [pc, #424]	; (8008c5c <HAL_I2C_Init+0x274>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d802      	bhi.n	8008abc <HAL_I2C_Init+0xd4>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	e009      	b.n	8008ad0 <HAL_I2C_Init+0xe8>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ac2:	fb02 f303 	mul.w	r3, r2, r3
 8008ac6:	4a69      	ldr	r2, [pc, #420]	; (8008c6c <HAL_I2C_Init+0x284>)
 8008ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8008acc:	099b      	lsrs	r3, r3, #6
 8008ace:	3301      	adds	r3, #1
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	495c      	ldr	r1, [pc, #368]	; (8008c5c <HAL_I2C_Init+0x274>)
 8008aec:	428b      	cmp	r3, r1
 8008aee:	d819      	bhi.n	8008b24 <HAL_I2C_Init+0x13c>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1e59      	subs	r1, r3, #1
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8008afe:	1c59      	adds	r1, r3, #1
 8008b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008b04:	400b      	ands	r3, r1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <HAL_I2C_Init+0x138>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	1e59      	subs	r1, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b18:	3301      	adds	r3, #1
 8008b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b1e:	e051      	b.n	8008bc4 <HAL_I2C_Init+0x1dc>
 8008b20:	2304      	movs	r3, #4
 8008b22:	e04f      	b.n	8008bc4 <HAL_I2C_Init+0x1dc>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d111      	bne.n	8008b50 <HAL_I2C_Init+0x168>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	1e58      	subs	r0, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6859      	ldr	r1, [r3, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	440b      	add	r3, r1
 8008b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b3e:	3301      	adds	r3, #1
 8008b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bf0c      	ite	eq
 8008b48:	2301      	moveq	r3, #1
 8008b4a:	2300      	movne	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	e012      	b.n	8008b76 <HAL_I2C_Init+0x18e>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	1e58      	subs	r0, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6859      	ldr	r1, [r3, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	0099      	lsls	r1, r3, #2
 8008b60:	440b      	add	r3, r1
 8008b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b66:	3301      	adds	r3, #1
 8008b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <HAL_I2C_Init+0x196>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e022      	b.n	8008bc4 <HAL_I2C_Init+0x1dc>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d10e      	bne.n	8008ba4 <HAL_I2C_Init+0x1bc>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	1e58      	subs	r0, r3, #1
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6859      	ldr	r1, [r3, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	440b      	add	r3, r1
 8008b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba2:	e00f      	b.n	8008bc4 <HAL_I2C_Init+0x1dc>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	1e58      	subs	r0, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6859      	ldr	r1, [r3, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	440b      	add	r3, r1
 8008bb2:	0099      	lsls	r1, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bba:	3301      	adds	r3, #1
 8008bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	6809      	ldr	r1, [r1, #0]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69da      	ldr	r2, [r3, #28]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6911      	ldr	r1, [r2, #16]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68d2      	ldr	r2, [r2, #12]
 8008bfe:	4311      	orrs	r1, r2
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	6812      	ldr	r2, [r2, #0]
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	695a      	ldr	r2, [r3, #20]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0201 	orr.w	r2, r2, #1
 8008c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	000186a0 	.word	0x000186a0
 8008c60:	001e847f 	.word	0x001e847f
 8008c64:	003d08ff 	.word	0x003d08ff
 8008c68:	431bde83 	.word	0x431bde83
 8008c6c:	10624dd3 	.word	0x10624dd3

08008c70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	817b      	strh	r3, [r7, #10]
 8008c80:	4613      	mov	r3, r2
 8008c82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c84:	f7fe fa7e 	bl	8007184 <HAL_GetTick>
 8008c88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	f040 80e0 	bne.w	8008e58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	2319      	movs	r3, #25
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4970      	ldr	r1, [pc, #448]	; (8008e64 <HAL_I2C_Master_Transmit+0x1f4>)
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fc58 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e0d3      	b.n	8008e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_I2C_Master_Transmit+0x50>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e0cc      	b.n	8008e5a <HAL_I2C_Master_Transmit+0x1ea>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d007      	beq.n	8008ce6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f042 0201 	orr.w	r2, r2, #1
 8008ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2221      	movs	r2, #33	; 0x21
 8008cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2210      	movs	r2, #16
 8008d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	893a      	ldrh	r2, [r7, #8]
 8008d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4a50      	ldr	r2, [pc, #320]	; (8008e68 <HAL_I2C_Master_Transmit+0x1f8>)
 8008d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008d28:	8979      	ldrh	r1, [r7, #10]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	6a3a      	ldr	r2, [r7, #32]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 fac2 	bl	80092b8 <I2C_MasterRequestWrite>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e08d      	b.n	8008e5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	613b      	str	r3, [r7, #16]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008d54:	e066      	b.n	8008e24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	6a39      	ldr	r1, [r7, #32]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 fcd2 	bl	8009704 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00d      	beq.n	8008d82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d107      	bne.n	8008d7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e06b      	b.n	8008e5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d11b      	bne.n	8008df8 <HAL_I2C_Master_Transmit+0x188>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d017      	beq.n	8008df8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df0:	3b01      	subs	r3, #1
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	6a39      	ldr	r1, [r7, #32]
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fcc2 	bl	8009786 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00d      	beq.n	8008e24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d107      	bne.n	8008e20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e01a      	b.n	8008e5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d194      	bne.n	8008d56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	e000      	b.n	8008e5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008e58:	2302      	movs	r3, #2
  }
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	00100002 	.word	0x00100002
 8008e68:	ffff0000 	.word	0xffff0000

08008e6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08c      	sub	sp, #48	; 0x30
 8008e70:	af02      	add	r7, sp, #8
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	607a      	str	r2, [r7, #4]
 8008e76:	461a      	mov	r2, r3
 8008e78:	460b      	mov	r3, r1
 8008e7a:	817b      	strh	r3, [r7, #10]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e80:	f7fe f980 	bl	8007184 <HAL_GetTick>
 8008e84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b20      	cmp	r3, #32
 8008e90:	f040 820b 	bne.w	80092aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	2319      	movs	r3, #25
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	497c      	ldr	r1, [pc, #496]	; (8009090 <HAL_I2C_Master_Receive+0x224>)
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 fb5a 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	e1fe      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <HAL_I2C_Master_Receive+0x50>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e1f7      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d007      	beq.n	8008ee2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ef0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2222      	movs	r2, #34	; 0x22
 8008ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2210      	movs	r2, #16
 8008efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	893a      	ldrh	r2, [r7, #8]
 8008f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4a5c      	ldr	r2, [pc, #368]	; (8009094 <HAL_I2C_Master_Receive+0x228>)
 8008f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008f24:	8979      	ldrh	r1, [r7, #10]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fa46 	bl	80093bc <I2C_MasterRequestRead>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e1b8      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d113      	bne.n	8008f6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f42:	2300      	movs	r3, #0
 8008f44:	623b      	str	r3, [r7, #32]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	623b      	str	r3, [r7, #32]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	623b      	str	r3, [r7, #32]
 8008f56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	e18c      	b.n	8009284 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d11b      	bne.n	8008faa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f82:	2300      	movs	r3, #0
 8008f84:	61fb      	str	r3, [r7, #28]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	e16c      	b.n	8009284 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d11b      	bne.n	8008fea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61bb      	str	r3, [r7, #24]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	61bb      	str	r3, [r7, #24]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	61bb      	str	r3, [r7, #24]
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	e14c      	b.n	8009284 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	617b      	str	r3, [r7, #20]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009010:	e138      	b.n	8009284 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009016:	2b03      	cmp	r3, #3
 8009018:	f200 80f1 	bhi.w	80091fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009020:	2b01      	cmp	r3, #1
 8009022:	d123      	bne.n	800906c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 fbed 	bl	8009808 <I2C_WaitOnRXNEFlagUntilTimeout>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e139      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	855a      	strh	r2, [r3, #42]	; 0x2a
 800906a:	e10b      	b.n	8009284 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009070:	2b02      	cmp	r3, #2
 8009072:	d14e      	bne.n	8009112 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	2200      	movs	r2, #0
 800907c:	4906      	ldr	r1, [pc, #24]	; (8009098 <HAL_I2C_Master_Receive+0x22c>)
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 fa6a 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d008      	beq.n	800909c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e10e      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
 800908e:	bf00      	nop
 8009090:	00100002 	.word	0x00100002
 8009094:	ffff0000 	.word	0xffff0000
 8009098:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691a      	ldr	r2, [r3, #16]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b6:	b2d2      	uxtb	r2, r2
 80090b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	1c5a      	adds	r2, r3, #1
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	691a      	ldr	r2, [r3, #16]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e8:	b2d2      	uxtb	r2, r2
 80090ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fa:	3b01      	subs	r3, #1
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009110:	e0b8      	b.n	8009284 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	2200      	movs	r2, #0
 800911a:	4966      	ldr	r1, [pc, #408]	; (80092b4 <HAL_I2C_Master_Receive+0x448>)
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fa1b 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e0bf      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800913a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691a      	ldr	r2, [r3, #16]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	2200      	movs	r2, #0
 8009176:	494f      	ldr	r1, [pc, #316]	; (80092b4 <HAL_I2C_Master_Receive+0x448>)
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 f9ed 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e091      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e6:	3b01      	subs	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3b01      	subs	r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091fc:	e042      	b.n	8009284 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 fb00 	bl	8009808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e04c      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	b2d2      	uxtb	r2, r2
 800921e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800922e:	3b01      	subs	r3, #1
 8009230:	b29a      	uxth	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b04      	cmp	r3, #4
 8009250:	d118      	bne.n	8009284 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	691a      	ldr	r2, [r3, #16]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	b2d2      	uxtb	r2, r2
 800925e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800926e:	3b01      	subs	r3, #1
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927a:	b29b      	uxth	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009288:	2b00      	cmp	r3, #0
 800928a:	f47f aec2 	bne.w	8009012 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2220      	movs	r2, #32
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	e000      	b.n	80092ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80092aa:	2302      	movs	r3, #2
  }
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3728      	adds	r7, #40	; 0x28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	00010004 	.word	0x00010004

080092b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af02      	add	r7, sp, #8
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	607a      	str	r2, [r7, #4]
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	460b      	mov	r3, r1
 80092c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b08      	cmp	r3, #8
 80092d2:	d006      	beq.n	80092e2 <I2C_MasterRequestWrite+0x2a>
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d003      	beq.n	80092e2 <I2C_MasterRequestWrite+0x2a>
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092e0:	d108      	bne.n	80092f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	e00b      	b.n	800930c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f8:	2b12      	cmp	r3, #18
 80092fa:	d107      	bne.n	800930c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800930a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f91d 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00d      	beq.n	8009340 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009332:	d103      	bne.n	800933c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800933a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e035      	b.n	80093ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009348:	d108      	bne.n	800935c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800934a:	897b      	ldrh	r3, [r7, #10]
 800934c:	b2db      	uxtb	r3, r3
 800934e:	461a      	mov	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009358:	611a      	str	r2, [r3, #16]
 800935a:	e01b      	b.n	8009394 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800935c:	897b      	ldrh	r3, [r7, #10]
 800935e:	11db      	asrs	r3, r3, #7
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 0306 	and.w	r3, r3, #6
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f063 030f 	orn	r3, r3, #15
 800936c:	b2da      	uxtb	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	490e      	ldr	r1, [pc, #56]	; (80093b4 <I2C_MasterRequestWrite+0xfc>)
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 f943 	bl	8009606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e010      	b.n	80093ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800938a:	897b      	ldrh	r3, [r7, #10]
 800938c:	b2da      	uxtb	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4907      	ldr	r1, [pc, #28]	; (80093b8 <I2C_MasterRequestWrite+0x100>)
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f933 	bl	8009606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	00010008 	.word	0x00010008
 80093b8:	00010002 	.word	0x00010002

080093bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af02      	add	r7, sp, #8
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	607a      	str	r2, [r7, #4]
 80093c6:	603b      	str	r3, [r7, #0]
 80093c8:	460b      	mov	r3, r1
 80093ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d006      	beq.n	80093f6 <I2C_MasterRequestRead+0x3a>
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d003      	beq.n	80093f6 <I2C_MasterRequestRead+0x3a>
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093f4:	d108      	bne.n	8009408 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	e00b      	b.n	8009420 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940c:	2b11      	cmp	r3, #17
 800940e:	d107      	bne.n	8009420 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800941e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f893 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00d      	beq.n	8009454 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009446:	d103      	bne.n	8009450 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800944e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009450:	2303      	movs	r3, #3
 8009452:	e079      	b.n	8009548 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800945c:	d108      	bne.n	8009470 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800945e:	897b      	ldrh	r3, [r7, #10]
 8009460:	b2db      	uxtb	r3, r3
 8009462:	f043 0301 	orr.w	r3, r3, #1
 8009466:	b2da      	uxtb	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	611a      	str	r2, [r3, #16]
 800946e:	e05f      	b.n	8009530 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009470:	897b      	ldrh	r3, [r7, #10]
 8009472:	11db      	asrs	r3, r3, #7
 8009474:	b2db      	uxtb	r3, r3
 8009476:	f003 0306 	and.w	r3, r3, #6
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f063 030f 	orn	r3, r3, #15
 8009480:	b2da      	uxtb	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	4930      	ldr	r1, [pc, #192]	; (8009550 <I2C_MasterRequestRead+0x194>)
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 f8b9 	bl	8009606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d001      	beq.n	800949e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e054      	b.n	8009548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800949e:	897b      	ldrh	r3, [r7, #10]
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4929      	ldr	r1, [pc, #164]	; (8009554 <I2C_MasterRequestRead+0x198>)
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f8a9 	bl	8009606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e044      	b.n	8009548 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	613b      	str	r3, [r7, #16]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	613b      	str	r3, [r7, #16]
 80094d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f831 	bl	8009558 <I2C_WaitOnFlagUntilTimeout>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00d      	beq.n	8009518 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d103      	bne.n	8009514 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009512:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e017      	b.n	8009548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009518:	897b      	ldrh	r3, [r7, #10]
 800951a:	11db      	asrs	r3, r3, #7
 800951c:	b2db      	uxtb	r3, r3
 800951e:	f003 0306 	and.w	r3, r3, #6
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f063 030e 	orn	r3, r3, #14
 8009528:	b2da      	uxtb	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	4907      	ldr	r1, [pc, #28]	; (8009554 <I2C_MasterRequestRead+0x198>)
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 f865 	bl	8009606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	00010008 	.word	0x00010008
 8009554:	00010002 	.word	0x00010002

08009558 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	4613      	mov	r3, r2
 8009566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009568:	e025      	b.n	80095b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009570:	d021      	beq.n	80095b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009572:	f7fd fe07 	bl	8007184 <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d302      	bcc.n	8009588 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d116      	bne.n	80095b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2220      	movs	r2, #32
 8009592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f043 0220 	orr.w	r2, r3, #32
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e023      	b.n	80095fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	0c1b      	lsrs	r3, r3, #16
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d10d      	bne.n	80095dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	43da      	mvns	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4013      	ands	r3, r2
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	bf0c      	ite	eq
 80095d2:	2301      	moveq	r3, #1
 80095d4:	2300      	movne	r3, #0
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	461a      	mov	r2, r3
 80095da:	e00c      	b.n	80095f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	43da      	mvns	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	4013      	ands	r3, r2
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	bf0c      	ite	eq
 80095ee:	2301      	moveq	r3, #1
 80095f0:	2300      	movne	r3, #0
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	79fb      	ldrb	r3, [r7, #7]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d0b6      	beq.n	800956a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	60b9      	str	r1, [r7, #8]
 8009610:	607a      	str	r2, [r7, #4]
 8009612:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009614:	e051      	b.n	80096ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009624:	d123      	bne.n	800966e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009634:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800963e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2220      	movs	r2, #32
 800964a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965a:	f043 0204 	orr.w	r2, r3, #4
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e046      	b.n	80096fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d021      	beq.n	80096ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009676:	f7fd fd85 	bl	8007184 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d302      	bcc.n	800968c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d116      	bne.n	80096ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	f043 0220 	orr.w	r2, r3, #32
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e020      	b.n	80096fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	0c1b      	lsrs	r3, r3, #16
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d10c      	bne.n	80096de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	43da      	mvns	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4013      	ands	r3, r2
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	bf14      	ite	ne
 80096d6:	2301      	movne	r3, #1
 80096d8:	2300      	moveq	r3, #0
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	e00b      	b.n	80096f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	43da      	mvns	r2, r3
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	bf14      	ite	ne
 80096f0:	2301      	movne	r3, #1
 80096f2:	2300      	moveq	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d18d      	bne.n	8009616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009710:	e02d      	b.n	800976e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 f8ce 	bl	80098b4 <I2C_IsAcknowledgeFailed>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e02d      	b.n	800977e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009728:	d021      	beq.n	800976e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800972a:	f7fd fd2b 	bl	8007184 <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	429a      	cmp	r2, r3
 8009738:	d302      	bcc.n	8009740 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d116      	bne.n	800976e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2220      	movs	r2, #32
 800974a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	f043 0220 	orr.w	r2, r3, #32
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e007      	b.n	800977e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009778:	2b80      	cmp	r3, #128	; 0x80
 800977a:	d1ca      	bne.n	8009712 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009792:	e02d      	b.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f000 f88d 	bl	80098b4 <I2C_IsAcknowledgeFailed>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e02d      	b.n	8009800 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097aa:	d021      	beq.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ac:	f7fd fcea 	bl	8007184 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d302      	bcc.n	80097c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d116      	bne.n	80097f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097dc:	f043 0220 	orr.w	r2, r3, #32
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e007      	b.n	8009800 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d1ca      	bne.n	8009794 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009814:	e042      	b.n	800989c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b10      	cmp	r3, #16
 8009822:	d119      	bne.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f06f 0210 	mvn.w	r2, #16
 800982c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2220      	movs	r2, #32
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e029      	b.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009858:	f7fd fc94 	bl	8007184 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	429a      	cmp	r2, r3
 8009866:	d302      	bcc.n	800986e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d116      	bne.n	800989c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009888:	f043 0220 	orr.w	r2, r3, #32
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e007      	b.n	80098ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a6:	2b40      	cmp	r3, #64	; 0x40
 80098a8:	d1b5      	bne.n	8009816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ca:	d11b      	bne.n	8009904 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f0:	f043 0204 	orr.w	r2, r3, #4
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e000      	b.n	8009906 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
	...

08009914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e264      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d075      	beq.n	8009a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009932:	4ba3      	ldr	r3, [pc, #652]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 030c 	and.w	r3, r3, #12
 800993a:	2b04      	cmp	r3, #4
 800993c:	d00c      	beq.n	8009958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800993e:	4ba0      	ldr	r3, [pc, #640]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009946:	2b08      	cmp	r3, #8
 8009948:	d112      	bne.n	8009970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800994a:	4b9d      	ldr	r3, [pc, #628]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009956:	d10b      	bne.n	8009970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009958:	4b99      	ldr	r3, [pc, #612]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d05b      	beq.n	8009a1c <HAL_RCC_OscConfig+0x108>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d157      	bne.n	8009a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e23f      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009978:	d106      	bne.n	8009988 <HAL_RCC_OscConfig+0x74>
 800997a:	4b91      	ldr	r3, [pc, #580]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a90      	ldr	r2, [pc, #576]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	e01d      	b.n	80099c4 <HAL_RCC_OscConfig+0xb0>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009990:	d10c      	bne.n	80099ac <HAL_RCC_OscConfig+0x98>
 8009992:	4b8b      	ldr	r3, [pc, #556]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a8a      	ldr	r2, [pc, #552]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	4b88      	ldr	r3, [pc, #544]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a87      	ldr	r2, [pc, #540]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 80099a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	e00b      	b.n	80099c4 <HAL_RCC_OscConfig+0xb0>
 80099ac:	4b84      	ldr	r3, [pc, #528]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a83      	ldr	r2, [pc, #524]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 80099b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	4b81      	ldr	r3, [pc, #516]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a80      	ldr	r2, [pc, #512]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 80099be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d013      	beq.n	80099f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099cc:	f7fd fbda 	bl	8007184 <HAL_GetTick>
 80099d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099d2:	e008      	b.n	80099e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099d4:	f7fd fbd6 	bl	8007184 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2b64      	cmp	r3, #100	; 0x64
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e204      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099e6:	4b76      	ldr	r3, [pc, #472]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0f0      	beq.n	80099d4 <HAL_RCC_OscConfig+0xc0>
 80099f2:	e014      	b.n	8009a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099f4:	f7fd fbc6 	bl	8007184 <HAL_GetTick>
 80099f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099fc:	f7fd fbc2 	bl	8007184 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b64      	cmp	r3, #100	; 0x64
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e1f0      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a0e:	4b6c      	ldr	r3, [pc, #432]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f0      	bne.n	80099fc <HAL_RCC_OscConfig+0xe8>
 8009a1a:	e000      	b.n	8009a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d063      	beq.n	8009af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a2a:	4b65      	ldr	r3, [pc, #404]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 030c 	and.w	r3, r3, #12
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00b      	beq.n	8009a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a36:	4b62      	ldr	r3, [pc, #392]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	d11c      	bne.n	8009a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a42:	4b5f      	ldr	r3, [pc, #380]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d116      	bne.n	8009a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a4e:	4b5c      	ldr	r3, [pc, #368]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <HAL_RCC_OscConfig+0x152>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d001      	beq.n	8009a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e1c4      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a66:	4b56      	ldr	r3, [pc, #344]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4952      	ldr	r1, [pc, #328]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a7a:	e03a      	b.n	8009af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d020      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a84:	4b4f      	ldr	r3, [pc, #316]	; (8009bc4 <HAL_RCC_OscConfig+0x2b0>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8a:	f7fd fb7b 	bl	8007184 <HAL_GetTick>
 8009a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a92:	f7fd fb77 	bl	8007184 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e1a5      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aa4:	4b46      	ldr	r3, [pc, #280]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0f0      	beq.n	8009a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ab0:	4b43      	ldr	r3, [pc, #268]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	4940      	ldr	r1, [pc, #256]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	600b      	str	r3, [r1, #0]
 8009ac4:	e015      	b.n	8009af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ac6:	4b3f      	ldr	r3, [pc, #252]	; (8009bc4 <HAL_RCC_OscConfig+0x2b0>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009acc:	f7fd fb5a 	bl	8007184 <HAL_GetTick>
 8009ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ad4:	f7fd fb56 	bl	8007184 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d901      	bls.n	8009ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e184      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ae6:	4b36      	ldr	r3, [pc, #216]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1f0      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0308 	and.w	r3, r3, #8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d030      	beq.n	8009b60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d016      	beq.n	8009b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b06:	4b30      	ldr	r3, [pc, #192]	; (8009bc8 <HAL_RCC_OscConfig+0x2b4>)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b0c:	f7fd fb3a 	bl	8007184 <HAL_GetTick>
 8009b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b12:	e008      	b.n	8009b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b14:	f7fd fb36 	bl	8007184 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d901      	bls.n	8009b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e164      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b26:	4b26      	ldr	r3, [pc, #152]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0f0      	beq.n	8009b14 <HAL_RCC_OscConfig+0x200>
 8009b32:	e015      	b.n	8009b60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b34:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <HAL_RCC_OscConfig+0x2b4>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b3a:	f7fd fb23 	bl	8007184 <HAL_GetTick>
 8009b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b40:	e008      	b.n	8009b54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b42:	f7fd fb1f 	bl	8007184 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e14d      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b54:	4b1a      	ldr	r3, [pc, #104]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f0      	bne.n	8009b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 80a0 	beq.w	8009cae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b72:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10f      	bne.n	8009b9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60bb      	str	r3, [r7, #8]
 8009b82:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	4a0e      	ldr	r2, [pc, #56]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <HAL_RCC_OscConfig+0x2ac>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b96:	60bb      	str	r3, [r7, #8]
 8009b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b9e:	4b0b      	ldr	r3, [pc, #44]	; (8009bcc <HAL_RCC_OscConfig+0x2b8>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d121      	bne.n	8009bee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009baa:	4b08      	ldr	r3, [pc, #32]	; (8009bcc <HAL_RCC_OscConfig+0x2b8>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a07      	ldr	r2, [pc, #28]	; (8009bcc <HAL_RCC_OscConfig+0x2b8>)
 8009bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bb6:	f7fd fae5 	bl	8007184 <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bbc:	e011      	b.n	8009be2 <HAL_RCC_OscConfig+0x2ce>
 8009bbe:	bf00      	nop
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	42470000 	.word	0x42470000
 8009bc8:	42470e80 	.word	0x42470e80
 8009bcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bd0:	f7fd fad8 	bl	8007184 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e106      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009be2:	4b85      	ldr	r3, [pc, #532]	; (8009df8 <HAL_RCC_OscConfig+0x4e4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0f0      	beq.n	8009bd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d106      	bne.n	8009c04 <HAL_RCC_OscConfig+0x2f0>
 8009bf6:	4b81      	ldr	r3, [pc, #516]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfa:	4a80      	ldr	r2, [pc, #512]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009bfc:	f043 0301 	orr.w	r3, r3, #1
 8009c00:	6713      	str	r3, [r2, #112]	; 0x70
 8009c02:	e01c      	b.n	8009c3e <HAL_RCC_OscConfig+0x32a>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	2b05      	cmp	r3, #5
 8009c0a:	d10c      	bne.n	8009c26 <HAL_RCC_OscConfig+0x312>
 8009c0c:	4b7b      	ldr	r3, [pc, #492]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c10:	4a7a      	ldr	r2, [pc, #488]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c12:	f043 0304 	orr.w	r3, r3, #4
 8009c16:	6713      	str	r3, [r2, #112]	; 0x70
 8009c18:	4b78      	ldr	r3, [pc, #480]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1c:	4a77      	ldr	r2, [pc, #476]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	6713      	str	r3, [r2, #112]	; 0x70
 8009c24:	e00b      	b.n	8009c3e <HAL_RCC_OscConfig+0x32a>
 8009c26:	4b75      	ldr	r3, [pc, #468]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2a:	4a74      	ldr	r2, [pc, #464]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c2c:	f023 0301 	bic.w	r3, r3, #1
 8009c30:	6713      	str	r3, [r2, #112]	; 0x70
 8009c32:	4b72      	ldr	r3, [pc, #456]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c36:	4a71      	ldr	r2, [pc, #452]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c38:	f023 0304 	bic.w	r3, r3, #4
 8009c3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d015      	beq.n	8009c72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c46:	f7fd fa9d 	bl	8007184 <HAL_GetTick>
 8009c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c4c:	e00a      	b.n	8009c64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c4e:	f7fd fa99 	bl	8007184 <HAL_GetTick>
 8009c52:	4602      	mov	r2, r0
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d901      	bls.n	8009c64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e0c5      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c64:	4b65      	ldr	r3, [pc, #404]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0ee      	beq.n	8009c4e <HAL_RCC_OscConfig+0x33a>
 8009c70:	e014      	b.n	8009c9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c72:	f7fd fa87 	bl	8007184 <HAL_GetTick>
 8009c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c78:	e00a      	b.n	8009c90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c7a:	f7fd fa83 	bl	8007184 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d901      	bls.n	8009c90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e0af      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c90:	4b5a      	ldr	r3, [pc, #360]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1ee      	bne.n	8009c7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d105      	bne.n	8009cae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ca2:	4b56      	ldr	r3, [pc, #344]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca6:	4a55      	ldr	r2, [pc, #340]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 809b 	beq.w	8009dee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cb8:	4b50      	ldr	r3, [pc, #320]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f003 030c 	and.w	r3, r3, #12
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d05c      	beq.n	8009d7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d141      	bne.n	8009d50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ccc:	4b4c      	ldr	r3, [pc, #304]	; (8009e00 <HAL_RCC_OscConfig+0x4ec>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cd2:	f7fd fa57 	bl	8007184 <HAL_GetTick>
 8009cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cd8:	e008      	b.n	8009cec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cda:	f7fd fa53 	bl	8007184 <HAL_GetTick>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d901      	bls.n	8009cec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e081      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cec:	4b43      	ldr	r3, [pc, #268]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f0      	bne.n	8009cda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69da      	ldr	r2, [r3, #28]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d06:	019b      	lsls	r3, r3, #6
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0e:	085b      	lsrs	r3, r3, #1
 8009d10:	3b01      	subs	r3, #1
 8009d12:	041b      	lsls	r3, r3, #16
 8009d14:	431a      	orrs	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	061b      	lsls	r3, r3, #24
 8009d1c:	4937      	ldr	r1, [pc, #220]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_RCC_OscConfig+0x4ec>)
 8009d24:	2201      	movs	r2, #1
 8009d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d28:	f7fd fa2c 	bl	8007184 <HAL_GetTick>
 8009d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d2e:	e008      	b.n	8009d42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d30:	f7fd fa28 	bl	8007184 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d901      	bls.n	8009d42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e056      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d42:	4b2e      	ldr	r3, [pc, #184]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0f0      	beq.n	8009d30 <HAL_RCC_OscConfig+0x41c>
 8009d4e:	e04e      	b.n	8009dee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d50:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <HAL_RCC_OscConfig+0x4ec>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d56:	f7fd fa15 	bl	8007184 <HAL_GetTick>
 8009d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d5c:	e008      	b.n	8009d70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d5e:	f7fd fa11 	bl	8007184 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d901      	bls.n	8009d70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e03f      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d70:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1f0      	bne.n	8009d5e <HAL_RCC_OscConfig+0x44a>
 8009d7c:	e037      	b.n	8009dee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e032      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <HAL_RCC_OscConfig+0x4e8>)
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d028      	beq.n	8009dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d121      	bne.n	8009dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d11a      	bne.n	8009dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009dba:	4013      	ands	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d111      	bne.n	8009dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd0:	085b      	lsrs	r3, r3, #1
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d107      	bne.n	8009dea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d001      	beq.n	8009dee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e000      	b.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3718      	adds	r7, #24
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	40007000 	.word	0x40007000
 8009dfc:	40023800 	.word	0x40023800
 8009e00:	42470060 	.word	0x42470060

08009e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0cc      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e18:	4b68      	ldr	r3, [pc, #416]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0307 	and.w	r3, r3, #7
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d90c      	bls.n	8009e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e26:	4b65      	ldr	r3, [pc, #404]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	b2d2      	uxtb	r2, r2
 8009e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e2e:	4b63      	ldr	r3, [pc, #396]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d001      	beq.n	8009e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e0b8      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d020      	beq.n	8009e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d005      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e58:	4b59      	ldr	r3, [pc, #356]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	4a58      	ldr	r2, [pc, #352]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0308 	and.w	r3, r3, #8
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d005      	beq.n	8009e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e70:	4b53      	ldr	r3, [pc, #332]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	4a52      	ldr	r2, [pc, #328]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e7c:	4b50      	ldr	r3, [pc, #320]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	494d      	ldr	r1, [pc, #308]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d044      	beq.n	8009f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d107      	bne.n	8009eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ea2:	4b47      	ldr	r3, [pc, #284]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d119      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e07f      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d003      	beq.n	8009ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d107      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ec2:	4b3f      	ldr	r3, [pc, #252]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e06f      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ed2:	4b3b      	ldr	r3, [pc, #236]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e067      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ee2:	4b37      	ldr	r3, [pc, #220]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f023 0203 	bic.w	r2, r3, #3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4934      	ldr	r1, [pc, #208]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ef4:	f7fd f946 	bl	8007184 <HAL_GetTick>
 8009ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009efa:	e00a      	b.n	8009f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009efc:	f7fd f942 	bl	8007184 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e04f      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f12:	4b2b      	ldr	r3, [pc, #172]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f003 020c 	and.w	r2, r3, #12
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d1eb      	bne.n	8009efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f24:	4b25      	ldr	r3, [pc, #148]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0307 	and.w	r3, r3, #7
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d20c      	bcs.n	8009f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f32:	4b22      	ldr	r3, [pc, #136]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f3a:	4b20      	ldr	r3, [pc, #128]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d001      	beq.n	8009f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e032      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 0304 	and.w	r3, r3, #4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d008      	beq.n	8009f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f58:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	4916      	ldr	r1, [pc, #88]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0308 	and.w	r3, r3, #8
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d009      	beq.n	8009f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f76:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	490e      	ldr	r1, [pc, #56]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f8a:	f000 f821 	bl	8009fd0 <HAL_RCC_GetSysClockFreq>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	091b      	lsrs	r3, r3, #4
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	490a      	ldr	r1, [pc, #40]	; (8009fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8009f9c:	5ccb      	ldrb	r3, [r1, r3]
 8009f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa2:	4a09      	ldr	r2, [pc, #36]	; (8009fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8009fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009fa6:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <HAL_RCC_ClockConfig+0x1c8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fc ffce 	bl	8006f4c <HAL_InitTick>

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	40023c00 	.word	0x40023c00
 8009fc0:	40023800 	.word	0x40023800
 8009fc4:	0800ee08 	.word	0x0800ee08
 8009fc8:	20000000 	.word	0x20000000
 8009fcc:	20000004 	.word	0x20000004

08009fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	607b      	str	r3, [r7, #4]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fe8:	4b67      	ldr	r3, [pc, #412]	; (800a188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f003 030c 	and.w	r3, r3, #12
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d00d      	beq.n	800a010 <HAL_RCC_GetSysClockFreq+0x40>
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	f200 80bd 	bhi.w	800a174 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <HAL_RCC_GetSysClockFreq+0x34>
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d003      	beq.n	800a00a <HAL_RCC_GetSysClockFreq+0x3a>
 800a002:	e0b7      	b.n	800a174 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a004:	4b61      	ldr	r3, [pc, #388]	; (800a18c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a006:	60bb      	str	r3, [r7, #8]
       break;
 800a008:	e0b7      	b.n	800a17a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a00a:	4b60      	ldr	r3, [pc, #384]	; (800a18c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a00c:	60bb      	str	r3, [r7, #8]
      break;
 800a00e:	e0b4      	b.n	800a17a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a010:	4b5d      	ldr	r3, [pc, #372]	; (800a188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a018:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a01a:	4b5b      	ldr	r3, [pc, #364]	; (800a188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d04d      	beq.n	800a0c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a026:	4b58      	ldr	r3, [pc, #352]	; (800a188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	099b      	lsrs	r3, r3, #6
 800a02c:	461a      	mov	r2, r3
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a036:	f04f 0100 	mov.w	r1, #0
 800a03a:	ea02 0800 	and.w	r8, r2, r0
 800a03e:	ea03 0901 	and.w	r9, r3, r1
 800a042:	4640      	mov	r0, r8
 800a044:	4649      	mov	r1, r9
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	014b      	lsls	r3, r1, #5
 800a050:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a054:	0142      	lsls	r2, r0, #5
 800a056:	4610      	mov	r0, r2
 800a058:	4619      	mov	r1, r3
 800a05a:	ebb0 0008 	subs.w	r0, r0, r8
 800a05e:	eb61 0109 	sbc.w	r1, r1, r9
 800a062:	f04f 0200 	mov.w	r2, #0
 800a066:	f04f 0300 	mov.w	r3, #0
 800a06a:	018b      	lsls	r3, r1, #6
 800a06c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a070:	0182      	lsls	r2, r0, #6
 800a072:	1a12      	subs	r2, r2, r0
 800a074:	eb63 0301 	sbc.w	r3, r3, r1
 800a078:	f04f 0000 	mov.w	r0, #0
 800a07c:	f04f 0100 	mov.w	r1, #0
 800a080:	00d9      	lsls	r1, r3, #3
 800a082:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a086:	00d0      	lsls	r0, r2, #3
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	eb12 0208 	adds.w	r2, r2, r8
 800a090:	eb43 0309 	adc.w	r3, r3, r9
 800a094:	f04f 0000 	mov.w	r0, #0
 800a098:	f04f 0100 	mov.w	r1, #0
 800a09c:	0299      	lsls	r1, r3, #10
 800a09e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a0a2:	0290      	lsls	r0, r2, #10
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f04f 0300 	mov.w	r3, #0
 800a0b4:	f7f6 fd7a 	bl	8000bac <__aeabi_uldivmod>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4613      	mov	r3, r2
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e04a      	b.n	800a158 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0c2:	4b31      	ldr	r3, [pc, #196]	; (800a188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	099b      	lsrs	r3, r3, #6
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	f04f 0300 	mov.w	r3, #0
 800a0ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a0d2:	f04f 0100 	mov.w	r1, #0
 800a0d6:	ea02 0400 	and.w	r4, r2, r0
 800a0da:	ea03 0501 	and.w	r5, r3, r1
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f04f 0200 	mov.w	r2, #0
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	014b      	lsls	r3, r1, #5
 800a0ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a0f0:	0142      	lsls	r2, r0, #5
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	1b00      	subs	r0, r0, r4
 800a0f8:	eb61 0105 	sbc.w	r1, r1, r5
 800a0fc:	f04f 0200 	mov.w	r2, #0
 800a100:	f04f 0300 	mov.w	r3, #0
 800a104:	018b      	lsls	r3, r1, #6
 800a106:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a10a:	0182      	lsls	r2, r0, #6
 800a10c:	1a12      	subs	r2, r2, r0
 800a10e:	eb63 0301 	sbc.w	r3, r3, r1
 800a112:	f04f 0000 	mov.w	r0, #0
 800a116:	f04f 0100 	mov.w	r1, #0
 800a11a:	00d9      	lsls	r1, r3, #3
 800a11c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a120:	00d0      	lsls	r0, r2, #3
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	1912      	adds	r2, r2, r4
 800a128:	eb45 0303 	adc.w	r3, r5, r3
 800a12c:	f04f 0000 	mov.w	r0, #0
 800a130:	f04f 0100 	mov.w	r1, #0
 800a134:	0299      	lsls	r1, r3, #10
 800a136:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a13a:	0290      	lsls	r0, r2, #10
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4610      	mov	r0, r2
 800a142:	4619      	mov	r1, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	461a      	mov	r2, r3
 800a148:	f04f 0300 	mov.w	r3, #0
 800a14c:	f7f6 fd2e 	bl	8000bac <__aeabi_uldivmod>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4613      	mov	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a158:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	0c1b      	lsrs	r3, r3, #16
 800a15e:	f003 0303 	and.w	r3, r3, #3
 800a162:	3301      	adds	r3, #1
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a170:	60bb      	str	r3, [r7, #8]
      break;
 800a172:	e002      	b.n	800a17a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a174:	4b05      	ldr	r3, [pc, #20]	; (800a18c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a176:	60bb      	str	r3, [r7, #8]
      break;
 800a178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a17a:	68bb      	ldr	r3, [r7, #8]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a186:	bf00      	nop
 800a188:	40023800 	.word	0x40023800
 800a18c:	00f42400 	.word	0x00f42400

0800a190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a190:	b480      	push	{r7}
 800a192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a194:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a196:	681b      	ldr	r3, [r3, #0]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20000000 	.word	0x20000000

0800a1a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1ac:	f7ff fff0 	bl	800a190 <HAL_RCC_GetHCLKFreq>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	0a9b      	lsrs	r3, r3, #10
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	4903      	ldr	r1, [pc, #12]	; (800a1cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1be:	5ccb      	ldrb	r3, [r1, r3]
 800a1c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	40023800 	.word	0x40023800
 800a1cc:	0800ee18 	.word	0x0800ee18

0800a1d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a1d4:	f7ff ffdc 	bl	800a190 <HAL_RCC_GetHCLKFreq>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	0b5b      	lsrs	r3, r3, #13
 800a1e0:	f003 0307 	and.w	r3, r3, #7
 800a1e4:	4903      	ldr	r1, [pc, #12]	; (800a1f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1e6:	5ccb      	ldrb	r3, [r1, r3]
 800a1e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	40023800 	.word	0x40023800
 800a1f4:	0800ee18 	.word	0x0800ee18

0800a1f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	220f      	movs	r2, #15
 800a206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a208:	4b12      	ldr	r3, [pc, #72]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	f003 0203 	and.w	r2, r3, #3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a214:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a220:	4b0c      	ldr	r3, [pc, #48]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a22c:	4b09      	ldr	r3, [pc, #36]	; (800a254 <HAL_RCC_GetClockConfig+0x5c>)
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	08db      	lsrs	r3, r3, #3
 800a232:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <HAL_RCC_GetClockConfig+0x60>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0207 	and.w	r2, r3, #7
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	601a      	str	r2, [r3, #0]
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	40023800 	.word	0x40023800
 800a258:	40023c00 	.word	0x40023c00

0800a25c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e041      	b.n	800a2f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d106      	bne.n	800a288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7fc fd5a 	bl	8006d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f000 fc7a 	bl	800ab94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d001      	beq.n	800a314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e04e      	b.n	800a3b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f042 0201 	orr.w	r2, r2, #1
 800a32a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a23      	ldr	r2, [pc, #140]	; (800a3c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d022      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a33e:	d01d      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a1f      	ldr	r2, [pc, #124]	; (800a3c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d018      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1e      	ldr	r2, [pc, #120]	; (800a3c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d013      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a1c      	ldr	r2, [pc, #112]	; (800a3cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d00e      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a1b      	ldr	r2, [pc, #108]	; (800a3d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d009      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a19      	ldr	r2, [pc, #100]	; (800a3d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d004      	beq.n	800a37c <HAL_TIM_Base_Start_IT+0x80>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a18      	ldr	r2, [pc, #96]	; (800a3d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d111      	bne.n	800a3a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f003 0307 	and.w	r3, r3, #7
 800a386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2b06      	cmp	r3, #6
 800a38c:	d010      	beq.n	800a3b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0201 	orr.w	r2, r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a39e:	e007      	b.n	800a3b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0201 	orr.w	r2, r2, #1
 800a3ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	40010000 	.word	0x40010000
 800a3c4:	40000400 	.word	0x40000400
 800a3c8:	40000800 	.word	0x40000800
 800a3cc:	40000c00 	.word	0x40000c00
 800a3d0:	40010400 	.word	0x40010400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40001800 	.word	0x40001800

0800a3dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e041      	b.n	800a472 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f839 	bl	800a47a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	3304      	adds	r3, #4
 800a418:	4619      	mov	r1, r3
 800a41a:	4610      	mov	r0, r2
 800a41c:	f000 fbba 	bl	800ab94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2201      	movs	r2, #1
 800a46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
	...

0800a490 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <HAL_TIM_PWM_Start+0x24>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	bf14      	ite	ne
 800a4ac:	2301      	movne	r3, #1
 800a4ae:	2300      	moveq	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	e022      	b.n	800a4fa <HAL_TIM_PWM_Start+0x6a>
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d109      	bne.n	800a4ce <HAL_TIM_PWM_Start+0x3e>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	bf14      	ite	ne
 800a4c6:	2301      	movne	r3, #1
 800a4c8:	2300      	moveq	r3, #0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	e015      	b.n	800a4fa <HAL_TIM_PWM_Start+0x6a>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d109      	bne.n	800a4e8 <HAL_TIM_PWM_Start+0x58>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	bf14      	ite	ne
 800a4e0:	2301      	movne	r3, #1
 800a4e2:	2300      	moveq	r3, #0
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	e008      	b.n	800a4fa <HAL_TIM_PWM_Start+0x6a>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	bf14      	ite	ne
 800a4f4:	2301      	movne	r3, #1
 800a4f6:	2300      	moveq	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e07c      	b.n	800a5fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <HAL_TIM_PWM_Start+0x82>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a510:	e013      	b.n	800a53a <HAL_TIM_PWM_Start+0xaa>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b04      	cmp	r3, #4
 800a516:	d104      	bne.n	800a522 <HAL_TIM_PWM_Start+0x92>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a520:	e00b      	b.n	800a53a <HAL_TIM_PWM_Start+0xaa>
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	2b08      	cmp	r3, #8
 800a526:	d104      	bne.n	800a532 <HAL_TIM_PWM_Start+0xa2>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a530:	e003      	b.n	800a53a <HAL_TIM_PWM_Start+0xaa>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2202      	movs	r2, #2
 800a536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2201      	movs	r2, #1
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 fe10 	bl	800b168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a2d      	ldr	r2, [pc, #180]	; (800a604 <HAL_TIM_PWM_Start+0x174>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d004      	beq.n	800a55c <HAL_TIM_PWM_Start+0xcc>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a2c      	ldr	r2, [pc, #176]	; (800a608 <HAL_TIM_PWM_Start+0x178>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d101      	bne.n	800a560 <HAL_TIM_PWM_Start+0xd0>
 800a55c:	2301      	movs	r3, #1
 800a55e:	e000      	b.n	800a562 <HAL_TIM_PWM_Start+0xd2>
 800a560:	2300      	movs	r3, #0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a574:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a22      	ldr	r2, [pc, #136]	; (800a604 <HAL_TIM_PWM_Start+0x174>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d022      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a588:	d01d      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1f      	ldr	r2, [pc, #124]	; (800a60c <HAL_TIM_PWM_Start+0x17c>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d018      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a1d      	ldr	r2, [pc, #116]	; (800a610 <HAL_TIM_PWM_Start+0x180>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d013      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a1c      	ldr	r2, [pc, #112]	; (800a614 <HAL_TIM_PWM_Start+0x184>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d00e      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a16      	ldr	r2, [pc, #88]	; (800a608 <HAL_TIM_PWM_Start+0x178>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d009      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a18      	ldr	r2, [pc, #96]	; (800a618 <HAL_TIM_PWM_Start+0x188>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d004      	beq.n	800a5c6 <HAL_TIM_PWM_Start+0x136>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a16      	ldr	r2, [pc, #88]	; (800a61c <HAL_TIM_PWM_Start+0x18c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d111      	bne.n	800a5ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	d010      	beq.n	800a5fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0201 	orr.w	r2, r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e8:	e007      	b.n	800a5fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	40010000 	.word	0x40010000
 800a608:	40010400 	.word	0x40010400
 800a60c:	40000400 	.word	0x40000400
 800a610:	40000800 	.word	0x40000800
 800a614:	40000c00 	.word	0x40000c00
 800a618:	40014000 	.word	0x40014000
 800a61c:	40001800 	.word	0x40001800

0800a620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b02      	cmp	r3, #2
 800a634:	d122      	bne.n	800a67c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b02      	cmp	r3, #2
 800a642:	d11b      	bne.n	800a67c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f06f 0202 	mvn.w	r2, #2
 800a64c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	f003 0303 	and.w	r3, r3, #3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fa77 	bl	800ab56 <HAL_TIM_IC_CaptureCallback>
 800a668:	e005      	b.n	800a676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fa69 	bl	800ab42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fa7a 	bl	800ab6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b04      	cmp	r3, #4
 800a688:	d122      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b04      	cmp	r3, #4
 800a696:	d11b      	bne.n	800a6d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f06f 0204 	mvn.w	r2, #4
 800a6a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fa4d 	bl	800ab56 <HAL_TIM_IC_CaptureCallback>
 800a6bc:	e005      	b.n	800a6ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fa3f 	bl	800ab42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fa50 	bl	800ab6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	f003 0308 	and.w	r3, r3, #8
 800a6da:	2b08      	cmp	r3, #8
 800a6dc:	d122      	bne.n	800a724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b08      	cmp	r3, #8
 800a6ea:	d11b      	bne.n	800a724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f06f 0208 	mvn.w	r2, #8
 800a6f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fa23 	bl	800ab56 <HAL_TIM_IC_CaptureCallback>
 800a710:	e005      	b.n	800a71e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa15 	bl	800ab42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fa26 	bl	800ab6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	f003 0310 	and.w	r3, r3, #16
 800a72e:	2b10      	cmp	r3, #16
 800a730:	d122      	bne.n	800a778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	d11b      	bne.n	800a778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f06f 0210 	mvn.w	r2, #16
 800a748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2208      	movs	r2, #8
 800a74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f9f9 	bl	800ab56 <HAL_TIM_IC_CaptureCallback>
 800a764:	e005      	b.n	800a772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f9eb 	bl	800ab42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f9fc 	bl	800ab6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b01      	cmp	r3, #1
 800a784:	d10e      	bne.n	800a7a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b01      	cmp	r3, #1
 800a792:	d107      	bne.n	800a7a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f06f 0201 	mvn.w	r2, #1
 800a79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7fc f960 	bl	8006a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ae:	2b80      	cmp	r3, #128	; 0x80
 800a7b0:	d10e      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7bc:	2b80      	cmp	r3, #128	; 0x80
 800a7be:	d107      	bne.n	800a7d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fcfb 	bl	800b1c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7da:	2b40      	cmp	r3, #64	; 0x40
 800a7dc:	d10e      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e8:	2b40      	cmp	r3, #64	; 0x40
 800a7ea:	d107      	bne.n	800a7fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f9c1 	bl	800ab7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	f003 0320 	and.w	r3, r3, #32
 800a806:	2b20      	cmp	r3, #32
 800a808:	d10e      	bne.n	800a828 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f003 0320 	and.w	r3, r3, #32
 800a814:	2b20      	cmp	r3, #32
 800a816:	d107      	bne.n	800a828 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0220 	mvn.w	r2, #32
 800a820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fcc5 	bl	800b1b2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a846:	2b01      	cmp	r3, #1
 800a848:	d101      	bne.n	800a84e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a84a:	2302      	movs	r3, #2
 800a84c:	e0ae      	b.n	800a9ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b0c      	cmp	r3, #12
 800a85a:	f200 809f 	bhi.w	800a99c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a85e:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a899 	.word	0x0800a899
 800a868:	0800a99d 	.word	0x0800a99d
 800a86c:	0800a99d 	.word	0x0800a99d
 800a870:	0800a99d 	.word	0x0800a99d
 800a874:	0800a8d9 	.word	0x0800a8d9
 800a878:	0800a99d 	.word	0x0800a99d
 800a87c:	0800a99d 	.word	0x0800a99d
 800a880:	0800a99d 	.word	0x0800a99d
 800a884:	0800a91b 	.word	0x0800a91b
 800a888:	0800a99d 	.word	0x0800a99d
 800a88c:	0800a99d 	.word	0x0800a99d
 800a890:	0800a99d 	.word	0x0800a99d
 800a894:	0800a95b 	.word	0x0800a95b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68b9      	ldr	r1, [r7, #8]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fa18 	bl	800acd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0208 	orr.w	r2, r2, #8
 800a8b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	699a      	ldr	r2, [r3, #24]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f022 0204 	bic.w	r2, r2, #4
 800a8c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6999      	ldr	r1, [r3, #24]
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	691a      	ldr	r2, [r3, #16]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	619a      	str	r2, [r3, #24]
      break;
 800a8d6:	e064      	b.n	800a9a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 fa68 	bl	800adb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	699a      	ldr	r2, [r3, #24]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6999      	ldr	r1, [r3, #24]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	021a      	lsls	r2, r3, #8
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	430a      	orrs	r2, r1
 800a916:	619a      	str	r2, [r3, #24]
      break;
 800a918:	e043      	b.n	800a9a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68b9      	ldr	r1, [r7, #8]
 800a920:	4618      	mov	r0, r3
 800a922:	f000 fabd 	bl	800aea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	69da      	ldr	r2, [r3, #28]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f042 0208 	orr.w	r2, r2, #8
 800a934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	69da      	ldr	r2, [r3, #28]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0204 	bic.w	r2, r2, #4
 800a944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	69d9      	ldr	r1, [r3, #28]
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	691a      	ldr	r2, [r3, #16]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	61da      	str	r2, [r3, #28]
      break;
 800a958:	e023      	b.n	800a9a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fb11 	bl	800af88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	69da      	ldr	r2, [r3, #28]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69da      	ldr	r2, [r3, #28]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69d9      	ldr	r1, [r3, #28]
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	021a      	lsls	r2, r3, #8
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	61da      	str	r2, [r3, #28]
      break;
 800a99a:	e002      	b.n	800a9a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d101      	bne.n	800a9d0 <HAL_TIM_ConfigClockSource+0x1c>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	e0b4      	b.n	800ab3a <HAL_TIM_ConfigClockSource+0x186>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a9ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa08:	d03e      	beq.n	800aa88 <HAL_TIM_ConfigClockSource+0xd4>
 800aa0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa0e:	f200 8087 	bhi.w	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa16:	f000 8086 	beq.w	800ab26 <HAL_TIM_ConfigClockSource+0x172>
 800aa1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa1e:	d87f      	bhi.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa20:	2b70      	cmp	r3, #112	; 0x70
 800aa22:	d01a      	beq.n	800aa5a <HAL_TIM_ConfigClockSource+0xa6>
 800aa24:	2b70      	cmp	r3, #112	; 0x70
 800aa26:	d87b      	bhi.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa28:	2b60      	cmp	r3, #96	; 0x60
 800aa2a:	d050      	beq.n	800aace <HAL_TIM_ConfigClockSource+0x11a>
 800aa2c:	2b60      	cmp	r3, #96	; 0x60
 800aa2e:	d877      	bhi.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa30:	2b50      	cmp	r3, #80	; 0x50
 800aa32:	d03c      	beq.n	800aaae <HAL_TIM_ConfigClockSource+0xfa>
 800aa34:	2b50      	cmp	r3, #80	; 0x50
 800aa36:	d873      	bhi.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa38:	2b40      	cmp	r3, #64	; 0x40
 800aa3a:	d058      	beq.n	800aaee <HAL_TIM_ConfigClockSource+0x13a>
 800aa3c:	2b40      	cmp	r3, #64	; 0x40
 800aa3e:	d86f      	bhi.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa40:	2b30      	cmp	r3, #48	; 0x30
 800aa42:	d064      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x15a>
 800aa44:	2b30      	cmp	r3, #48	; 0x30
 800aa46:	d86b      	bhi.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	d060      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x15a>
 800aa4c:	2b20      	cmp	r3, #32
 800aa4e:	d867      	bhi.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d05c      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x15a>
 800aa54:	2b10      	cmp	r3, #16
 800aa56:	d05a      	beq.n	800ab0e <HAL_TIM_ConfigClockSource+0x15a>
 800aa58:	e062      	b.n	800ab20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	6899      	ldr	r1, [r3, #8]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	f000 fb5d 	bl	800b128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68ba      	ldr	r2, [r7, #8]
 800aa84:	609a      	str	r2, [r3, #8]
      break;
 800aa86:	e04f      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6818      	ldr	r0, [r3, #0]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	6899      	ldr	r1, [r3, #8]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f000 fb46 	bl	800b128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689a      	ldr	r2, [r3, #8]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aaaa:	609a      	str	r2, [r3, #8]
      break;
 800aaac:	e03c      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6818      	ldr	r0, [r3, #0]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	6859      	ldr	r1, [r3, #4]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f000 faba 	bl	800b034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2150      	movs	r1, #80	; 0x50
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 fb13 	bl	800b0f2 <TIM_ITRx_SetConfig>
      break;
 800aacc:	e02c      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6818      	ldr	r0, [r3, #0]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6859      	ldr	r1, [r3, #4]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	461a      	mov	r2, r3
 800aadc:	f000 fad9 	bl	800b092 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2160      	movs	r1, #96	; 0x60
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fb03 	bl	800b0f2 <TIM_ITRx_SetConfig>
      break;
 800aaec:	e01c      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6818      	ldr	r0, [r3, #0]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	6859      	ldr	r1, [r3, #4]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	461a      	mov	r2, r3
 800aafc:	f000 fa9a 	bl	800b034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2140      	movs	r1, #64	; 0x40
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 faf3 	bl	800b0f2 <TIM_ITRx_SetConfig>
      break;
 800ab0c:	e00c      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4619      	mov	r1, r3
 800ab18:	4610      	mov	r0, r2
 800ab1a:	f000 faea 	bl	800b0f2 <TIM_ITRx_SetConfig>
      break;
 800ab1e:	e003      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	73fb      	strb	r3, [r7, #15]
      break;
 800ab24:	e000      	b.n	800ab28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab4a:	bf00      	nop
 800ab4c:	370c      	adds	r7, #12
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab5e:	bf00      	nop
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b083      	sub	sp, #12
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a40      	ldr	r2, [pc, #256]	; (800aca8 <TIM_Base_SetConfig+0x114>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d013      	beq.n	800abd4 <TIM_Base_SetConfig+0x40>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb2:	d00f      	beq.n	800abd4 <TIM_Base_SetConfig+0x40>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a3d      	ldr	r2, [pc, #244]	; (800acac <TIM_Base_SetConfig+0x118>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00b      	beq.n	800abd4 <TIM_Base_SetConfig+0x40>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a3c      	ldr	r2, [pc, #240]	; (800acb0 <TIM_Base_SetConfig+0x11c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d007      	beq.n	800abd4 <TIM_Base_SetConfig+0x40>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a3b      	ldr	r2, [pc, #236]	; (800acb4 <TIM_Base_SetConfig+0x120>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d003      	beq.n	800abd4 <TIM_Base_SetConfig+0x40>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a3a      	ldr	r2, [pc, #232]	; (800acb8 <TIM_Base_SetConfig+0x124>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d108      	bne.n	800abe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a2f      	ldr	r2, [pc, #188]	; (800aca8 <TIM_Base_SetConfig+0x114>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d02b      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf4:	d027      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a2c      	ldr	r2, [pc, #176]	; (800acac <TIM_Base_SetConfig+0x118>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d023      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a2b      	ldr	r2, [pc, #172]	; (800acb0 <TIM_Base_SetConfig+0x11c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d01f      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a2a      	ldr	r2, [pc, #168]	; (800acb4 <TIM_Base_SetConfig+0x120>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d01b      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a29      	ldr	r2, [pc, #164]	; (800acb8 <TIM_Base_SetConfig+0x124>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d017      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a28      	ldr	r2, [pc, #160]	; (800acbc <TIM_Base_SetConfig+0x128>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d013      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a27      	ldr	r2, [pc, #156]	; (800acc0 <TIM_Base_SetConfig+0x12c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d00f      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	4a26      	ldr	r2, [pc, #152]	; (800acc4 <TIM_Base_SetConfig+0x130>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d00b      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a25      	ldr	r2, [pc, #148]	; (800acc8 <TIM_Base_SetConfig+0x134>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d007      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a24      	ldr	r2, [pc, #144]	; (800accc <TIM_Base_SetConfig+0x138>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d003      	beq.n	800ac46 <TIM_Base_SetConfig+0xb2>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a23      	ldr	r2, [pc, #140]	; (800acd0 <TIM_Base_SetConfig+0x13c>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d108      	bne.n	800ac58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	4313      	orrs	r3, r2
 800ac56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	689a      	ldr	r2, [r3, #8]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a0a      	ldr	r2, [pc, #40]	; (800aca8 <TIM_Base_SetConfig+0x114>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d003      	beq.n	800ac8c <TIM_Base_SetConfig+0xf8>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a0c      	ldr	r2, [pc, #48]	; (800acb8 <TIM_Base_SetConfig+0x124>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d103      	bne.n	800ac94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	691a      	ldr	r2, [r3, #16]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	615a      	str	r2, [r3, #20]
}
 800ac9a:	bf00      	nop
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	40010000 	.word	0x40010000
 800acac:	40000400 	.word	0x40000400
 800acb0:	40000800 	.word	0x40000800
 800acb4:	40000c00 	.word	0x40000c00
 800acb8:	40010400 	.word	0x40010400
 800acbc:	40014000 	.word	0x40014000
 800acc0:	40014400 	.word	0x40014400
 800acc4:	40014800 	.word	0x40014800
 800acc8:	40001800 	.word	0x40001800
 800accc:	40001c00 	.word	0x40001c00
 800acd0:	40002000 	.word	0x40002000

0800acd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a1b      	ldr	r3, [r3, #32]
 800ace2:	f023 0201 	bic.w	r2, r3, #1
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f023 0302 	bic.w	r3, r3, #2
 800ad1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a20      	ldr	r2, [pc, #128]	; (800adac <TIM_OC1_SetConfig+0xd8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d003      	beq.n	800ad38 <TIM_OC1_SetConfig+0x64>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a1f      	ldr	r2, [pc, #124]	; (800adb0 <TIM_OC1_SetConfig+0xdc>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d10c      	bne.n	800ad52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f023 0308 	bic.w	r3, r3, #8
 800ad3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	f023 0304 	bic.w	r3, r3, #4
 800ad50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a15      	ldr	r2, [pc, #84]	; (800adac <TIM_OC1_SetConfig+0xd8>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d003      	beq.n	800ad62 <TIM_OC1_SetConfig+0x8e>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a14      	ldr	r2, [pc, #80]	; (800adb0 <TIM_OC1_SetConfig+0xdc>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d111      	bne.n	800ad86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	4313      	orrs	r3, r2
 800ad84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	693a      	ldr	r2, [r7, #16]
 800ad8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685a      	ldr	r2, [r3, #4]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	621a      	str	r2, [r3, #32]
}
 800ada0:	bf00      	nop
 800ada2:	371c      	adds	r7, #28
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	40010000 	.word	0x40010000
 800adb0:	40010400 	.word	0x40010400

0800adb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	f023 0210 	bic.w	r2, r3, #16
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	021b      	lsls	r3, r3, #8
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f023 0320 	bic.w	r3, r3, #32
 800adfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	011b      	lsls	r3, r3, #4
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a22      	ldr	r2, [pc, #136]	; (800ae98 <TIM_OC2_SetConfig+0xe4>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d003      	beq.n	800ae1c <TIM_OC2_SetConfig+0x68>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a21      	ldr	r2, [pc, #132]	; (800ae9c <TIM_OC2_SetConfig+0xe8>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d10d      	bne.n	800ae38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a17      	ldr	r2, [pc, #92]	; (800ae98 <TIM_OC2_SetConfig+0xe4>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d003      	beq.n	800ae48 <TIM_OC2_SetConfig+0x94>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a16      	ldr	r2, [pc, #88]	; (800ae9c <TIM_OC2_SetConfig+0xe8>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d113      	bne.n	800ae70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	685a      	ldr	r2, [r3, #4]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	621a      	str	r2, [r3, #32]
}
 800ae8a:	bf00      	nop
 800ae8c:	371c      	adds	r7, #28
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	40010000 	.word	0x40010000
 800ae9c:	40010400 	.word	0x40010400

0800aea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b087      	sub	sp, #28
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	4313      	orrs	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	021b      	lsls	r3, r3, #8
 800aef0:	697a      	ldr	r2, [r7, #20]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4a21      	ldr	r2, [pc, #132]	; (800af80 <TIM_OC3_SetConfig+0xe0>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d003      	beq.n	800af06 <TIM_OC3_SetConfig+0x66>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a20      	ldr	r2, [pc, #128]	; (800af84 <TIM_OC3_SetConfig+0xe4>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d10d      	bne.n	800af22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	021b      	lsls	r3, r3, #8
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	4313      	orrs	r3, r2
 800af18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a16      	ldr	r2, [pc, #88]	; (800af80 <TIM_OC3_SetConfig+0xe0>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d003      	beq.n	800af32 <TIM_OC3_SetConfig+0x92>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a15      	ldr	r2, [pc, #84]	; (800af84 <TIM_OC3_SetConfig+0xe4>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d113      	bne.n	800af5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	011b      	lsls	r3, r3, #4
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	621a      	str	r2, [r3, #32]
}
 800af74:	bf00      	nop
 800af76:	371c      	adds	r7, #28
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	40010000 	.word	0x40010000
 800af84:	40010400 	.word	0x40010400

0800af88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	031b      	lsls	r3, r3, #12
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	4313      	orrs	r3, r2
 800afde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a12      	ldr	r2, [pc, #72]	; (800b02c <TIM_OC4_SetConfig+0xa4>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d003      	beq.n	800aff0 <TIM_OC4_SetConfig+0x68>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a11      	ldr	r2, [pc, #68]	; (800b030 <TIM_OC4_SetConfig+0xa8>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d109      	bne.n	800b004 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	019b      	lsls	r3, r3, #6
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	4313      	orrs	r3, r2
 800b002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	621a      	str	r2, [r3, #32]
}
 800b01e:	bf00      	nop
 800b020:	371c      	adds	r7, #28
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	40010000 	.word	0x40010000
 800b030:	40010400 	.word	0x40010400

0800b034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	f023 0201 	bic.w	r2, r3, #1
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b05e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	011b      	lsls	r3, r3, #4
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	4313      	orrs	r3, r2
 800b068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f023 030a 	bic.w	r3, r3, #10
 800b070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	4313      	orrs	r3, r2
 800b078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	621a      	str	r2, [r3, #32]
}
 800b086:	bf00      	nop
 800b088:	371c      	adds	r7, #28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b092:	b480      	push	{r7}
 800b094:	b087      	sub	sp, #28
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	f023 0210 	bic.w	r2, r3, #16
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6a1b      	ldr	r3, [r3, #32]
 800b0b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	031b      	lsls	r3, r3, #12
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	011b      	lsls	r3, r3, #4
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	621a      	str	r2, [r3, #32]
}
 800b0e6:	bf00      	nop
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b085      	sub	sp, #20
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4313      	orrs	r3, r2
 800b110:	f043 0307 	orr.w	r3, r3, #7
 800b114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	609a      	str	r2, [r3, #8]
}
 800b11c:	bf00      	nop
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b128:	b480      	push	{r7}
 800b12a:	b087      	sub	sp, #28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	021a      	lsls	r2, r3, #8
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	431a      	orrs	r2, r3
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4313      	orrs	r3, r2
 800b150:	697a      	ldr	r2, [r7, #20]
 800b152:	4313      	orrs	r3, r2
 800b154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	609a      	str	r2, [r3, #8]
}
 800b15c:	bf00      	nop
 800b15e:	371c      	adds	r7, #28
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b168:	b480      	push	{r7}
 800b16a:	b087      	sub	sp, #28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f003 031f 	and.w	r3, r3, #31
 800b17a:	2201      	movs	r2, #1
 800b17c:	fa02 f303 	lsl.w	r3, r2, r3
 800b180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6a1a      	ldr	r2, [r3, #32]
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	43db      	mvns	r3, r3
 800b18a:	401a      	ands	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6a1a      	ldr	r2, [r3, #32]
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f003 031f 	and.w	r3, r3, #31
 800b19a:	6879      	ldr	r1, [r7, #4]
 800b19c:	fa01 f303 	lsl.w	r3, r1, r3
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	621a      	str	r2, [r3, #32]
}
 800b1a6:	bf00      	nop
 800b1a8:	371c      	adds	r7, #28
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1ba:	bf00      	nop
 800b1bc:	370c      	adds	r7, #12
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b083      	sub	sp, #12
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e03f      	b.n	800b26c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7fb fdf7 	bl	8006df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2224      	movs	r2, #36	; 0x24
 800b20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68da      	ldr	r2, [r3, #12]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b21c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fd20 	bl	800bc64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	691a      	ldr	r2, [r3, #16]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b232:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	695a      	ldr	r2, [r3, #20]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b242:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68da      	ldr	r2, [r3, #12]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b252:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2220      	movs	r2, #32
 800b25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b20      	cmp	r3, #32
 800b28c:	d130      	bne.n	800b2f0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <HAL_UART_Transmit_IT+0x26>
 800b294:	88fb      	ldrh	r3, [r7, #6]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e029      	b.n	800b2f2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d101      	bne.n	800b2ac <HAL_UART_Transmit_IT+0x38>
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	e022      	b.n	800b2f2 <HAL_UART_Transmit_IT+0x7e>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	88fa      	ldrh	r2, [r7, #6]
 800b2be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	88fa      	ldrh	r2, [r7, #6]
 800b2c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2221      	movs	r2, #33	; 0x21
 800b2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68da      	ldr	r2, [r3, #12]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b2ea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	e000      	b.n	800b2f2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b2f0:	2302      	movs	r3, #2
  }
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	4613      	mov	r3, r2
 800b30a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b20      	cmp	r3, #32
 800b316:	d11d      	bne.n	800b354 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <HAL_UART_Receive_IT+0x26>
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e016      	b.n	800b356 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d101      	bne.n	800b336 <HAL_UART_Receive_IT+0x38>
 800b332:	2302      	movs	r3, #2
 800b334:	e00f      	b.n	800b356 <HAL_UART_Receive_IT+0x58>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b344:	88fb      	ldrh	r3, [r7, #6]
 800b346:	461a      	mov	r2, r3
 800b348:	68b9      	ldr	r1, [r7, #8]
 800b34a:	68f8      	ldr	r0, [r7, #12]
 800b34c:	f000 fab6 	bl	800b8bc <UART_Start_Receive_IT>
 800b350:	4603      	mov	r3, r0
 800b352:	e000      	b.n	800b356 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b354:	2302      	movs	r3, #2
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
	...

0800b360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b0ba      	sub	sp, #232	; 0xe8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	695b      	ldr	r3, [r3, #20]
 800b382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b386:	2300      	movs	r3, #0
 800b388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b396:	f003 030f 	and.w	r3, r3, #15
 800b39a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b39e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10f      	bne.n	800b3c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3aa:	f003 0320 	and.w	r3, r3, #32
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <HAL_UART_IRQHandler+0x66>
 800b3b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b6:	f003 0320 	and.w	r3, r3, #32
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fb95 	bl	800baee <UART_Receive_IT>
      return;
 800b3c4:	e256      	b.n	800b874 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b3c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f000 80de 	beq.w	800b58c <HAL_UART_IRQHandler+0x22c>
 800b3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 80d1 	beq.w	800b58c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00b      	beq.n	800b40e <HAL_UART_IRQHandler+0xae>
 800b3f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b406:	f043 0201 	orr.w	r2, r3, #1
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b412:	f003 0304 	and.w	r3, r3, #4
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00b      	beq.n	800b432 <HAL_UART_IRQHandler+0xd2>
 800b41a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	d005      	beq.n	800b432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	f043 0202 	orr.w	r2, r3, #2
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b436:	f003 0302 	and.w	r3, r3, #2
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <HAL_UART_IRQHandler+0xf6>
 800b43e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44e:	f043 0204 	orr.w	r2, r3, #4
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b45a:	f003 0308 	and.w	r3, r3, #8
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d011      	beq.n	800b486 <HAL_UART_IRQHandler+0x126>
 800b462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b466:	f003 0320 	and.w	r3, r3, #32
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d105      	bne.n	800b47a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b46e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	2b00      	cmp	r3, #0
 800b478:	d005      	beq.n	800b486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47e:	f043 0208 	orr.w	r2, r3, #8
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 81ed 	beq.w	800b86a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b494:	f003 0320 	and.w	r3, r3, #32
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d008      	beq.n	800b4ae <HAL_UART_IRQHandler+0x14e>
 800b49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a0:	f003 0320 	and.w	r3, r3, #32
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d002      	beq.n	800b4ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fb20 	bl	800baee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b8:	2b40      	cmp	r3, #64	; 0x40
 800b4ba:	bf0c      	ite	eq
 800b4bc:	2301      	moveq	r3, #1
 800b4be:	2300      	movne	r3, #0
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ca:	f003 0308 	and.w	r3, r3, #8
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d103      	bne.n	800b4da <HAL_UART_IRQHandler+0x17a>
 800b4d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d04f      	beq.n	800b57a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fa28 	bl	800b930 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ea:	2b40      	cmp	r3, #64	; 0x40
 800b4ec:	d141      	bne.n	800b572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3314      	adds	r3, #20
 800b4f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4fc:	e853 3f00 	ldrex	r3, [r3]
 800b500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b50c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3314      	adds	r3, #20
 800b516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b51a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b51e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b52a:	e841 2300 	strex	r3, r2, [r1]
 800b52e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1d9      	bne.n	800b4ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d013      	beq.n	800b56a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b546:	4a7d      	ldr	r2, [pc, #500]	; (800b73c <HAL_UART_IRQHandler+0x3dc>)
 800b548:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fc fde4 	bl	800811c <HAL_DMA_Abort_IT>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d016      	beq.n	800b588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b564:	4610      	mov	r0, r2
 800b566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b568:	e00e      	b.n	800b588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f990 	bl	800b890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b570:	e00a      	b.n	800b588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f98c 	bl	800b890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b578:	e006      	b.n	800b588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f988 	bl	800b890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b586:	e170      	b.n	800b86a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b588:	bf00      	nop
    return;
 800b58a:	e16e      	b.n	800b86a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b590:	2b01      	cmp	r3, #1
 800b592:	f040 814a 	bne.w	800b82a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59a:	f003 0310 	and.w	r3, r3, #16
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 8143 	beq.w	800b82a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a8:	f003 0310 	and.w	r3, r3, #16
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 813c 	beq.w	800b82a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	60bb      	str	r3, [r7, #8]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	60bb      	str	r3, [r7, #8]
 800b5c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d2:	2b40      	cmp	r3, #64	; 0x40
 800b5d4:	f040 80b4 	bne.w	800b740 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f000 8140 	beq.w	800b86e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	f080 8139 	bcs.w	800b86e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b602:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60e:	f000 8088 	beq.w	800b722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	330c      	adds	r3, #12
 800b618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b620:	e853 3f00 	ldrex	r3, [r3]
 800b624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	330c      	adds	r3, #12
 800b63a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b63e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b646:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b64a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b64e:	e841 2300 	strex	r3, r2, [r1]
 800b652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1d9      	bne.n	800b612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	3314      	adds	r3, #20
 800b664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b66e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b670:	f023 0301 	bic.w	r3, r3, #1
 800b674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3314      	adds	r3, #20
 800b67e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b686:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b68a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e1      	bne.n	800b65e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3314      	adds	r3, #20
 800b6a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6a4:	e853 3f00 	ldrex	r3, [r3]
 800b6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b6aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	3314      	adds	r3, #20
 800b6ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b6be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b6c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b6c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b6cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e3      	bne.n	800b69a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ea:	e853 3f00 	ldrex	r3, [r3]
 800b6ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6f2:	f023 0310 	bic.w	r3, r3, #16
 800b6f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	330c      	adds	r3, #12
 800b700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b704:	65ba      	str	r2, [r7, #88]	; 0x58
 800b706:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b70a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e3      	bne.n	800b6e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fc fc8d 	bl	800803c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	b29b      	uxth	r3, r3
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f8b6 	bl	800b8a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b738:	e099      	b.n	800b86e <HAL_UART_IRQHandler+0x50e>
 800b73a:	bf00      	nop
 800b73c:	0800b9f7 	.word	0x0800b9f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b748:	b29b      	uxth	r3, r3
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b754:	b29b      	uxth	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 808b 	beq.w	800b872 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b75c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 8086 	beq.w	800b872 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	330c      	adds	r3, #12
 800b76c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b77c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	330c      	adds	r3, #12
 800b786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b78a:	647a      	str	r2, [r7, #68]	; 0x44
 800b78c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b792:	e841 2300 	strex	r3, r2, [r1]
 800b796:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d1e3      	bne.n	800b766 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	3314      	adds	r3, #20
 800b7a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	f023 0301 	bic.w	r3, r3, #1
 800b7b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3314      	adds	r3, #20
 800b7be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b7c2:	633a      	str	r2, [r7, #48]	; 0x30
 800b7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e3      	bne.n	800b79e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2220      	movs	r2, #32
 800b7da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	330c      	adds	r3, #12
 800b7ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	e853 3f00 	ldrex	r3, [r3]
 800b7f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f023 0310 	bic.w	r3, r3, #16
 800b7fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	330c      	adds	r3, #12
 800b804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b808:	61fa      	str	r2, [r7, #28]
 800b80a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	69b9      	ldr	r1, [r7, #24]
 800b80e:	69fa      	ldr	r2, [r7, #28]
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	617b      	str	r3, [r7, #20]
   return(result);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e3      	bne.n	800b7e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b81c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 f83e 	bl	800b8a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b828:	e023      	b.n	800b872 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <HAL_UART_IRQHandler+0x4ea>
 800b836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f8eb 	bl	800ba1e <UART_Transmit_IT>
    return;
 800b848:	e014      	b.n	800b874 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00e      	beq.n	800b874 <HAL_UART_IRQHandler+0x514>
 800b856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d008      	beq.n	800b874 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f92b 	bl	800babe <UART_EndTransmit_IT>
    return;
 800b868:	e004      	b.n	800b874 <HAL_UART_IRQHandler+0x514>
    return;
 800b86a:	bf00      	nop
 800b86c:	e002      	b.n	800b874 <HAL_UART_IRQHandler+0x514>
      return;
 800b86e:	bf00      	nop
 800b870:	e000      	b.n	800b874 <HAL_UART_IRQHandler+0x514>
      return;
 800b872:	bf00      	nop
  }
}
 800b874:	37e8      	adds	r7, #232	; 0xe8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop

0800b87c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b8b0:	bf00      	nop
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	88fa      	ldrh	r2, [r7, #6]
 800b8d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	88fa      	ldrh	r2, [r7, #6]
 800b8da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2222      	movs	r2, #34	; 0x22
 800b8e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68da      	ldr	r2, [r3, #12]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b900:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	695a      	ldr	r2, [r3, #20]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f042 0201 	orr.w	r2, r2, #1
 800b910:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68da      	ldr	r2, [r3, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f042 0220 	orr.w	r2, r2, #32
 800b920:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b930:	b480      	push	{r7}
 800b932:	b095      	sub	sp, #84	; 0x54
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	330c      	adds	r3, #12
 800b93e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b942:	e853 3f00 	ldrex	r3, [r3]
 800b946:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b94e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	330c      	adds	r3, #12
 800b956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b958:	643a      	str	r2, [r7, #64]	; 0x40
 800b95a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b95e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b960:	e841 2300 	strex	r3, r2, [r1]
 800b964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e5      	bne.n	800b938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	3314      	adds	r3, #20
 800b972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	e853 3f00 	ldrex	r3, [r3]
 800b97a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f023 0301 	bic.w	r3, r3, #1
 800b982:	64bb      	str	r3, [r7, #72]	; 0x48
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3314      	adds	r3, #20
 800b98a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b98c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b98e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b994:	e841 2300 	strex	r3, r2, [r1]
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e5      	bne.n	800b96c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d119      	bne.n	800b9dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	e853 3f00 	ldrex	r3, [r3]
 800b9b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	f023 0310 	bic.w	r3, r3, #16
 800b9be:	647b      	str	r3, [r7, #68]	; 0x44
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	330c      	adds	r3, #12
 800b9c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c8:	61ba      	str	r2, [r7, #24]
 800b9ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	6979      	ldr	r1, [r7, #20]
 800b9ce:	69ba      	ldr	r2, [r7, #24]
 800b9d0:	e841 2300 	strex	r3, r2, [r1]
 800b9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e5      	bne.n	800b9a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b9ea:	bf00      	nop
 800b9ec:	3754      	adds	r7, #84	; 0x54
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr

0800b9f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f7ff ff3d 	bl	800b890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b085      	sub	sp, #20
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	2b21      	cmp	r3, #33	; 0x21
 800ba30:	d13e      	bne.n	800bab0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba3a:	d114      	bne.n	800ba66 <UART_Transmit_IT+0x48>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d110      	bne.n	800ba66 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	881b      	ldrh	r3, [r3, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a1b      	ldr	r3, [r3, #32]
 800ba5e:	1c9a      	adds	r2, r3, #2
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	621a      	str	r2, [r3, #32]
 800ba64:	e008      	b.n	800ba78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	1c59      	adds	r1, r3, #1
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	6211      	str	r1, [r2, #32]
 800ba70:	781a      	ldrb	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	4619      	mov	r1, r3
 800ba86:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10f      	bne.n	800baac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68da      	ldr	r2, [r3, #12]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	68da      	ldr	r2, [r3, #12]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800baaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	e000      	b.n	800bab2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bab0:	2302      	movs	r3, #2
  }
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68da      	ldr	r2, [r3, #12]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bad4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2220      	movs	r2, #32
 800bada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7ff fecc 	bl	800b87c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b08c      	sub	sp, #48	; 0x30
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b22      	cmp	r3, #34	; 0x22
 800bb00:	f040 80ab 	bne.w	800bc5a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb0c:	d117      	bne.n	800bb3e <UART_Receive_IT+0x50>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d113      	bne.n	800bb3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb36:	1c9a      	adds	r2, r3, #2
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	629a      	str	r2, [r3, #40]	; 0x28
 800bb3c:	e026      	b.n	800bb8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb44:	2300      	movs	r3, #0
 800bb46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb50:	d007      	beq.n	800bb62 <UART_Receive_IT+0x74>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10a      	bne.n	800bb70 <UART_Receive_IT+0x82>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d106      	bne.n	800bb70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6c:	701a      	strb	r2, [r3, #0]
 800bb6e:	e008      	b.n	800bb82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	3b01      	subs	r3, #1
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	4619      	mov	r1, r3
 800bb9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d15a      	bne.n	800bc56 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68da      	ldr	r2, [r3, #12]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f022 0220 	bic.w	r2, r2, #32
 800bbae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	695a      	ldr	r2, [r3, #20]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f022 0201 	bic.w	r2, r2, #1
 800bbce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d135      	bne.n	800bc4c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	330c      	adds	r3, #12
 800bbec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	e853 3f00 	ldrex	r3, [r3]
 800bbf4:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f023 0310 	bic.w	r3, r3, #16
 800bbfc:	627b      	str	r3, [r7, #36]	; 0x24
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	330c      	adds	r3, #12
 800bc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc06:	623a      	str	r2, [r7, #32]
 800bc08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0a:	69f9      	ldr	r1, [r7, #28]
 800bc0c:	6a3a      	ldr	r2, [r7, #32]
 800bc0e:	e841 2300 	strex	r3, r2, [r1]
 800bc12:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1e5      	bne.n	800bbe6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 0310 	and.w	r3, r3, #16
 800bc24:	2b10      	cmp	r3, #16
 800bc26:	d10a      	bne.n	800bc3e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	60fb      	str	r3, [r7, #12]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fe2d 	bl	800b8a4 <HAL_UARTEx_RxEventCallback>
 800bc4a:	e002      	b.n	800bc52 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7f8 ff61 	bl	8004b14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	e002      	b.n	800bc5c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	e000      	b.n	800bc5c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bc5a:	2302      	movs	r3, #2
  }
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3730      	adds	r7, #48	; 0x30
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	b09f      	sub	sp, #124	; 0x7c
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bc78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc7a:	68d9      	ldr	r1, [r3, #12]
 800bc7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	ea40 0301 	orr.w	r3, r0, r1
 800bc84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bc86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	431a      	orrs	r2, r3
 800bc96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc98:	69db      	ldr	r3, [r3, #28]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bc9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bca8:	f021 010c 	bic.w	r1, r1, #12
 800bcac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bcb2:	430b      	orrs	r3, r1
 800bcb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bcb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bcc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc2:	6999      	ldr	r1, [r3, #24]
 800bcc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	ea40 0301 	orr.w	r3, r0, r1
 800bccc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bcce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	4bc5      	ldr	r3, [pc, #788]	; (800bfe8 <UART_SetConfig+0x384>)
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d004      	beq.n	800bce2 <UART_SetConfig+0x7e>
 800bcd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	4bc3      	ldr	r3, [pc, #780]	; (800bfec <UART_SetConfig+0x388>)
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d103      	bne.n	800bcea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bce2:	f7fe fa75 	bl	800a1d0 <HAL_RCC_GetPCLK2Freq>
 800bce6:	6778      	str	r0, [r7, #116]	; 0x74
 800bce8:	e002      	b.n	800bcf0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bcea:	f7fe fa5d 	bl	800a1a8 <HAL_RCC_GetPCLK1Freq>
 800bcee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bcf2:	69db      	ldr	r3, [r3, #28]
 800bcf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcf8:	f040 80b6 	bne.w	800be68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bcfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcfe:	461c      	mov	r4, r3
 800bd00:	f04f 0500 	mov.w	r5, #0
 800bd04:	4622      	mov	r2, r4
 800bd06:	462b      	mov	r3, r5
 800bd08:	1891      	adds	r1, r2, r2
 800bd0a:	6439      	str	r1, [r7, #64]	; 0x40
 800bd0c:	415b      	adcs	r3, r3
 800bd0e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bd14:	1912      	adds	r2, r2, r4
 800bd16:	eb45 0303 	adc.w	r3, r5, r3
 800bd1a:	f04f 0000 	mov.w	r0, #0
 800bd1e:	f04f 0100 	mov.w	r1, #0
 800bd22:	00d9      	lsls	r1, r3, #3
 800bd24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd28:	00d0      	lsls	r0, r2, #3
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	1911      	adds	r1, r2, r4
 800bd30:	6639      	str	r1, [r7, #96]	; 0x60
 800bd32:	416b      	adcs	r3, r5
 800bd34:	667b      	str	r3, [r7, #100]	; 0x64
 800bd36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f04f 0300 	mov.w	r3, #0
 800bd40:	1891      	adds	r1, r2, r2
 800bd42:	63b9      	str	r1, [r7, #56]	; 0x38
 800bd44:	415b      	adcs	r3, r3
 800bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bd4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bd50:	f7f4 ff2c 	bl	8000bac <__aeabi_uldivmod>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	4ba5      	ldr	r3, [pc, #660]	; (800bff0 <UART_SetConfig+0x38c>)
 800bd5a:	fba3 2302 	umull	r2, r3, r3, r2
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	011e      	lsls	r6, r3, #4
 800bd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd64:	461c      	mov	r4, r3
 800bd66:	f04f 0500 	mov.w	r5, #0
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	1891      	adds	r1, r2, r2
 800bd70:	6339      	str	r1, [r7, #48]	; 0x30
 800bd72:	415b      	adcs	r3, r3
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
 800bd76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bd7a:	1912      	adds	r2, r2, r4
 800bd7c:	eb45 0303 	adc.w	r3, r5, r3
 800bd80:	f04f 0000 	mov.w	r0, #0
 800bd84:	f04f 0100 	mov.w	r1, #0
 800bd88:	00d9      	lsls	r1, r3, #3
 800bd8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd8e:	00d0      	lsls	r0, r2, #3
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	1911      	adds	r1, r2, r4
 800bd96:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd98:	416b      	adcs	r3, r5
 800bd9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	461a      	mov	r2, r3
 800bda2:	f04f 0300 	mov.w	r3, #0
 800bda6:	1891      	adds	r1, r2, r2
 800bda8:	62b9      	str	r1, [r7, #40]	; 0x28
 800bdaa:	415b      	adcs	r3, r3
 800bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bdb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800bdb6:	f7f4 fef9 	bl	8000bac <__aeabi_uldivmod>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4b8c      	ldr	r3, [pc, #560]	; (800bff0 <UART_SetConfig+0x38c>)
 800bdc0:	fba3 1302 	umull	r1, r3, r3, r2
 800bdc4:	095b      	lsrs	r3, r3, #5
 800bdc6:	2164      	movs	r1, #100	; 0x64
 800bdc8:	fb01 f303 	mul.w	r3, r1, r3
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	00db      	lsls	r3, r3, #3
 800bdd0:	3332      	adds	r3, #50	; 0x32
 800bdd2:	4a87      	ldr	r2, [pc, #540]	; (800bff0 <UART_SetConfig+0x38c>)
 800bdd4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdd8:	095b      	lsrs	r3, r3, #5
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bde0:	441e      	add	r6, r3
 800bde2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bde4:	4618      	mov	r0, r3
 800bde6:	f04f 0100 	mov.w	r1, #0
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	1894      	adds	r4, r2, r2
 800bdf0:	623c      	str	r4, [r7, #32]
 800bdf2:	415b      	adcs	r3, r3
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
 800bdf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bdfa:	1812      	adds	r2, r2, r0
 800bdfc:	eb41 0303 	adc.w	r3, r1, r3
 800be00:	f04f 0400 	mov.w	r4, #0
 800be04:	f04f 0500 	mov.w	r5, #0
 800be08:	00dd      	lsls	r5, r3, #3
 800be0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800be0e:	00d4      	lsls	r4, r2, #3
 800be10:	4622      	mov	r2, r4
 800be12:	462b      	mov	r3, r5
 800be14:	1814      	adds	r4, r2, r0
 800be16:	653c      	str	r4, [r7, #80]	; 0x50
 800be18:	414b      	adcs	r3, r1
 800be1a:	657b      	str	r3, [r7, #84]	; 0x54
 800be1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	461a      	mov	r2, r3
 800be22:	f04f 0300 	mov.w	r3, #0
 800be26:	1891      	adds	r1, r2, r2
 800be28:	61b9      	str	r1, [r7, #24]
 800be2a:	415b      	adcs	r3, r3
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800be32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800be36:	f7f4 feb9 	bl	8000bac <__aeabi_uldivmod>
 800be3a:	4602      	mov	r2, r0
 800be3c:	460b      	mov	r3, r1
 800be3e:	4b6c      	ldr	r3, [pc, #432]	; (800bff0 <UART_SetConfig+0x38c>)
 800be40:	fba3 1302 	umull	r1, r3, r3, r2
 800be44:	095b      	lsrs	r3, r3, #5
 800be46:	2164      	movs	r1, #100	; 0x64
 800be48:	fb01 f303 	mul.w	r3, r1, r3
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	00db      	lsls	r3, r3, #3
 800be50:	3332      	adds	r3, #50	; 0x32
 800be52:	4a67      	ldr	r2, [pc, #412]	; (800bff0 <UART_SetConfig+0x38c>)
 800be54:	fba2 2303 	umull	r2, r3, r2, r3
 800be58:	095b      	lsrs	r3, r3, #5
 800be5a:	f003 0207 	and.w	r2, r3, #7
 800be5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4432      	add	r2, r6
 800be64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800be66:	e0b9      	b.n	800bfdc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be6a:	461c      	mov	r4, r3
 800be6c:	f04f 0500 	mov.w	r5, #0
 800be70:	4622      	mov	r2, r4
 800be72:	462b      	mov	r3, r5
 800be74:	1891      	adds	r1, r2, r2
 800be76:	6139      	str	r1, [r7, #16]
 800be78:	415b      	adcs	r3, r3
 800be7a:	617b      	str	r3, [r7, #20]
 800be7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be80:	1912      	adds	r2, r2, r4
 800be82:	eb45 0303 	adc.w	r3, r5, r3
 800be86:	f04f 0000 	mov.w	r0, #0
 800be8a:	f04f 0100 	mov.w	r1, #0
 800be8e:	00d9      	lsls	r1, r3, #3
 800be90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be94:	00d0      	lsls	r0, r2, #3
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	eb12 0804 	adds.w	r8, r2, r4
 800be9e:	eb43 0905 	adc.w	r9, r3, r5
 800bea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f04f 0100 	mov.w	r1, #0
 800beac:	f04f 0200 	mov.w	r2, #0
 800beb0:	f04f 0300 	mov.w	r3, #0
 800beb4:	008b      	lsls	r3, r1, #2
 800beb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800beba:	0082      	lsls	r2, r0, #2
 800bebc:	4640      	mov	r0, r8
 800bebe:	4649      	mov	r1, r9
 800bec0:	f7f4 fe74 	bl	8000bac <__aeabi_uldivmod>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4b49      	ldr	r3, [pc, #292]	; (800bff0 <UART_SetConfig+0x38c>)
 800beca:	fba3 2302 	umull	r2, r3, r3, r2
 800bece:	095b      	lsrs	r3, r3, #5
 800bed0:	011e      	lsls	r6, r3, #4
 800bed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed4:	4618      	mov	r0, r3
 800bed6:	f04f 0100 	mov.w	r1, #0
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	1894      	adds	r4, r2, r2
 800bee0:	60bc      	str	r4, [r7, #8]
 800bee2:	415b      	adcs	r3, r3
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800beea:	1812      	adds	r2, r2, r0
 800beec:	eb41 0303 	adc.w	r3, r1, r3
 800bef0:	f04f 0400 	mov.w	r4, #0
 800bef4:	f04f 0500 	mov.w	r5, #0
 800bef8:	00dd      	lsls	r5, r3, #3
 800befa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800befe:	00d4      	lsls	r4, r2, #3
 800bf00:	4622      	mov	r2, r4
 800bf02:	462b      	mov	r3, r5
 800bf04:	1814      	adds	r4, r2, r0
 800bf06:	64bc      	str	r4, [r7, #72]	; 0x48
 800bf08:	414b      	adcs	r3, r1
 800bf0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f04f 0100 	mov.w	r1, #0
 800bf16:	f04f 0200 	mov.w	r2, #0
 800bf1a:	f04f 0300 	mov.w	r3, #0
 800bf1e:	008b      	lsls	r3, r1, #2
 800bf20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bf24:	0082      	lsls	r2, r0, #2
 800bf26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bf2a:	f7f4 fe3f 	bl	8000bac <__aeabi_uldivmod>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	460b      	mov	r3, r1
 800bf32:	4b2f      	ldr	r3, [pc, #188]	; (800bff0 <UART_SetConfig+0x38c>)
 800bf34:	fba3 1302 	umull	r1, r3, r3, r2
 800bf38:	095b      	lsrs	r3, r3, #5
 800bf3a:	2164      	movs	r1, #100	; 0x64
 800bf3c:	fb01 f303 	mul.w	r3, r1, r3
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	011b      	lsls	r3, r3, #4
 800bf44:	3332      	adds	r3, #50	; 0x32
 800bf46:	4a2a      	ldr	r2, [pc, #168]	; (800bff0 <UART_SetConfig+0x38c>)
 800bf48:	fba2 2303 	umull	r2, r3, r2, r3
 800bf4c:	095b      	lsrs	r3, r3, #5
 800bf4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf52:	441e      	add	r6, r3
 800bf54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf56:	4618      	mov	r0, r3
 800bf58:	f04f 0100 	mov.w	r1, #0
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	1894      	adds	r4, r2, r2
 800bf62:	603c      	str	r4, [r7, #0]
 800bf64:	415b      	adcs	r3, r3
 800bf66:	607b      	str	r3, [r7, #4]
 800bf68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf6c:	1812      	adds	r2, r2, r0
 800bf6e:	eb41 0303 	adc.w	r3, r1, r3
 800bf72:	f04f 0400 	mov.w	r4, #0
 800bf76:	f04f 0500 	mov.w	r5, #0
 800bf7a:	00dd      	lsls	r5, r3, #3
 800bf7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bf80:	00d4      	lsls	r4, r2, #3
 800bf82:	4622      	mov	r2, r4
 800bf84:	462b      	mov	r3, r5
 800bf86:	eb12 0a00 	adds.w	sl, r2, r0
 800bf8a:	eb43 0b01 	adc.w	fp, r3, r1
 800bf8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f04f 0100 	mov.w	r1, #0
 800bf98:	f04f 0200 	mov.w	r2, #0
 800bf9c:	f04f 0300 	mov.w	r3, #0
 800bfa0:	008b      	lsls	r3, r1, #2
 800bfa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bfa6:	0082      	lsls	r2, r0, #2
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	4659      	mov	r1, fp
 800bfac:	f7f4 fdfe 	bl	8000bac <__aeabi_uldivmod>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4b0e      	ldr	r3, [pc, #56]	; (800bff0 <UART_SetConfig+0x38c>)
 800bfb6:	fba3 1302 	umull	r1, r3, r3, r2
 800bfba:	095b      	lsrs	r3, r3, #5
 800bfbc:	2164      	movs	r1, #100	; 0x64
 800bfbe:	fb01 f303 	mul.w	r3, r1, r3
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	3332      	adds	r3, #50	; 0x32
 800bfc8:	4a09      	ldr	r2, [pc, #36]	; (800bff0 <UART_SetConfig+0x38c>)
 800bfca:	fba2 2303 	umull	r2, r3, r2, r3
 800bfce:	095b      	lsrs	r3, r3, #5
 800bfd0:	f003 020f 	and.w	r2, r3, #15
 800bfd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4432      	add	r2, r6
 800bfda:	609a      	str	r2, [r3, #8]
}
 800bfdc:	bf00      	nop
 800bfde:	377c      	adds	r7, #124	; 0x7c
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	bf00      	nop
 800bfe8:	40011000 	.word	0x40011000
 800bfec:	40011400 	.word	0x40011400
 800bff0:	51eb851f 	.word	0x51eb851f

0800bff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f103 0208 	add.w	r2, r3, #8
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f04f 32ff 	mov.w	r2, #4294967295
 800c00c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f103 0208 	add.w	r2, r3, #8
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f103 0208 	add.w	r2, r3, #8
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c028:	bf00      	nop
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c042:	bf00      	nop
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c04e:	b480      	push	{r7}
 800c050:	b085      	sub	sp, #20
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	689a      	ldr	r2, [r3, #8]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	683a      	ldr	r2, [r7, #0]
 800c078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	601a      	str	r2, [r3, #0]
}
 800c08a:	bf00      	nop
 800c08c:	3714      	adds	r7, #20
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr

0800c096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c096:	b480      	push	{r7}
 800c098:	b085      	sub	sp, #20
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ac:	d103      	bne.n	800c0b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	e00c      	b.n	800c0d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	3308      	adds	r3, #8
 800c0ba:	60fb      	str	r3, [r7, #12]
 800c0bc:	e002      	b.n	800c0c4 <vListInsert+0x2e>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68ba      	ldr	r2, [r7, #8]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d2f6      	bcs.n	800c0be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	1c5a      	adds	r2, r3, #1
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	601a      	str	r2, [r3, #0]
}
 800c0fc:	bf00      	nop
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	6892      	ldr	r2, [r2, #8]
 800c11e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	6852      	ldr	r2, [r2, #4]
 800c128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	429a      	cmp	r2, r3
 800c132:	d103      	bne.n	800c13c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689a      	ldr	r2, [r3, #8]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	1e5a      	subs	r2, r3, #1
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c186:	f002 fa2d 	bl	800e5e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c192:	68f9      	ldr	r1, [r7, #12]
 800c194:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c196:	fb01 f303 	mul.w	r3, r1, r3
 800c19a:	441a      	add	r2, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	68f9      	ldr	r1, [r7, #12]
 800c1ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1bc:	fb01 f303 	mul.w	r3, r1, r3
 800c1c0:	441a      	add	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	22ff      	movs	r2, #255	; 0xff
 800c1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	22ff      	movs	r2, #255	; 0xff
 800c1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d114      	bne.n	800c206 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d01a      	beq.n	800c21a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3310      	adds	r3, #16
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f001 fad7 	bl	800d79c <xTaskRemoveFromEventList>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d012      	beq.n	800c21a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c1f4:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <xQueueGenericReset+0xcc>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	e009      	b.n	800c21a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3310      	adds	r3, #16
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff fef2 	bl	800bff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	3324      	adds	r3, #36	; 0x24
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff feed 	bl	800bff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c21a:	f002 fa13 	bl	800e644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c21e:	2301      	movs	r3, #1
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08e      	sub	sp, #56	; 0x38
 800c230:	af02      	add	r7, sp, #8
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10a      	bne.n	800c272 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c26e:	bf00      	nop
 800c270:	e7fe      	b.n	800c270 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <xQueueGenericCreateStatic+0x52>
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <xQueueGenericCreateStatic+0x56>
 800c27e:	2301      	movs	r3, #1
 800c280:	e000      	b.n	800c284 <xQueueGenericCreateStatic+0x58>
 800c282:	2300      	movs	r3, #0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10a      	bne.n	800c29e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28c:	f383 8811 	msr	BASEPRI, r3
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	623b      	str	r3, [r7, #32]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <xQueueGenericCreateStatic+0x7e>
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d101      	bne.n	800c2ae <xQueueGenericCreateStatic+0x82>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	e000      	b.n	800c2b0 <xQueueGenericCreateStatic+0x84>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	61fb      	str	r3, [r7, #28]
}
 800c2c6:	bf00      	nop
 800c2c8:	e7fe      	b.n	800c2c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c2ca:	2348      	movs	r3, #72	; 0x48
 800c2cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b48      	cmp	r3, #72	; 0x48
 800c2d2:	d00a      	beq.n	800c2ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	61bb      	str	r3, [r7, #24]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c2ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00d      	beq.n	800c312 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c2fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	4613      	mov	r3, r2
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 f83f 	bl	800c390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c314:	4618      	mov	r0, r3
 800c316:	3730      	adds	r7, #48	; 0x30
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	; 0x28
 800c320:	af02      	add	r7, sp, #8
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	613b      	str	r3, [r7, #16]
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	fb02 f303 	mul.w	r3, r2, r3
 800c34e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	3348      	adds	r3, #72	; 0x48
 800c354:	4618      	mov	r0, r3
 800c356:	f002 fa67 	bl	800e828 <pvPortMalloc>
 800c35a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d011      	beq.n	800c386 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	3348      	adds	r3, #72	; 0x48
 800c36a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c374:	79fa      	ldrb	r2, [r7, #7]
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	4613      	mov	r3, r2
 800c37c:	697a      	ldr	r2, [r7, #20]
 800c37e:	68b9      	ldr	r1, [r7, #8]
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f000 f805 	bl	800c390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c386:	69bb      	ldr	r3, [r7, #24]
	}
 800c388:	4618      	mov	r0, r3
 800c38a:	3720      	adds	r7, #32
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d103      	bne.n	800c3ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	e002      	b.n	800c3b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c3be:	2101      	movs	r1, #1
 800c3c0:	69b8      	ldr	r0, [r7, #24]
 800c3c2:	f7ff fecb 	bl	800c15c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c3c6:	bf00      	nop
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
	...

0800c3d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b08e      	sub	sp, #56	; 0x38
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <xQueueGenericSend+0x32>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d103      	bne.n	800c410 <xQueueGenericSend+0x40>
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d101      	bne.n	800c414 <xQueueGenericSend+0x44>
 800c410:	2301      	movs	r3, #1
 800c412:	e000      	b.n	800c416 <xQueueGenericSend+0x46>
 800c414:	2300      	movs	r3, #0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10a      	bne.n	800c430 <xQueueGenericSend+0x60>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c42c:	bf00      	nop
 800c42e:	e7fe      	b.n	800c42e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	2b02      	cmp	r3, #2
 800c434:	d103      	bne.n	800c43e <xQueueGenericSend+0x6e>
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d101      	bne.n	800c442 <xQueueGenericSend+0x72>
 800c43e:	2301      	movs	r3, #1
 800c440:	e000      	b.n	800c444 <xQueueGenericSend+0x74>
 800c442:	2300      	movs	r3, #0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10a      	bne.n	800c45e <xQueueGenericSend+0x8e>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	623b      	str	r3, [r7, #32]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c45e:	f001 fb59 	bl	800db14 <xTaskGetSchedulerState>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d102      	bne.n	800c46e <xQueueGenericSend+0x9e>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <xQueueGenericSend+0xa2>
 800c46e:	2301      	movs	r3, #1
 800c470:	e000      	b.n	800c474 <xQueueGenericSend+0xa4>
 800c472:	2300      	movs	r3, #0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10a      	bne.n	800c48e <xQueueGenericSend+0xbe>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	61fb      	str	r3, [r7, #28]
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c48e:	f002 f8a9 	bl	800e5e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d302      	bcc.n	800c4a4 <xQueueGenericSend+0xd4>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d129      	bne.n	800c4f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	68b9      	ldr	r1, [r7, #8]
 800c4a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4aa:	f000 fa0b 	bl	800c8c4 <prvCopyDataToQueue>
 800c4ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d010      	beq.n	800c4da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ba:	3324      	adds	r3, #36	; 0x24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f001 f96d 	bl	800d79c <xTaskRemoveFromEventList>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d013      	beq.n	800c4f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c4c8:	4b3f      	ldr	r3, [pc, #252]	; (800c5c8 <xQueueGenericSend+0x1f8>)
 800c4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	e00a      	b.n	800c4f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d007      	beq.n	800c4f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c4e0:	4b39      	ldr	r3, [pc, #228]	; (800c5c8 <xQueueGenericSend+0x1f8>)
 800c4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c4f0:	f002 f8a8 	bl	800e644 <vPortExitCritical>
				return pdPASS;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e063      	b.n	800c5c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d103      	bne.n	800c506 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4fe:	f002 f8a1 	bl	800e644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c502:	2300      	movs	r3, #0
 800c504:	e05c      	b.n	800c5c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c50c:	f107 0314 	add.w	r3, r7, #20
 800c510:	4618      	mov	r0, r3
 800c512:	f001 f9a5 	bl	800d860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c516:	2301      	movs	r3, #1
 800c518:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c51a:	f002 f893 	bl	800e644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c51e:	f000 ff1f 	bl	800d360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c522:	f002 f85f 	bl	800e5e4 <vPortEnterCritical>
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c52c:	b25b      	sxtb	r3, r3
 800c52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c532:	d103      	bne.n	800c53c <xQueueGenericSend+0x16c>
 800c534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c536:	2200      	movs	r2, #0
 800c538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c542:	b25b      	sxtb	r3, r3
 800c544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c548:	d103      	bne.n	800c552 <xQueueGenericSend+0x182>
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c552:	f002 f877 	bl	800e644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c556:	1d3a      	adds	r2, r7, #4
 800c558:	f107 0314 	add.w	r3, r7, #20
 800c55c:	4611      	mov	r1, r2
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 f994 	bl	800d88c <xTaskCheckForTimeOut>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d124      	bne.n	800c5b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c56a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c56c:	f000 faa2 	bl	800cab4 <prvIsQueueFull>
 800c570:	4603      	mov	r3, r0
 800c572:	2b00      	cmp	r3, #0
 800c574:	d018      	beq.n	800c5a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	3310      	adds	r3, #16
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	4611      	mov	r1, r2
 800c57e:	4618      	mov	r0, r3
 800c580:	f001 f8bc 	bl	800d6fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c586:	f000 fa2d 	bl	800c9e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c58a:	f000 fef7 	bl	800d37c <xTaskResumeAll>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	f47f af7c 	bne.w	800c48e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c596:	4b0c      	ldr	r3, [pc, #48]	; (800c5c8 <xQueueGenericSend+0x1f8>)
 800c598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c59c:	601a      	str	r2, [r3, #0]
 800c59e:	f3bf 8f4f 	dsb	sy
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	e772      	b.n	800c48e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c5a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5aa:	f000 fa1b 	bl	800c9e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5ae:	f000 fee5 	bl	800d37c <xTaskResumeAll>
 800c5b2:	e76c      	b.n	800c48e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c5b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5b6:	f000 fa15 	bl	800c9e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5ba:	f000 fedf 	bl	800d37c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c5be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3738      	adds	r7, #56	; 0x38
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	e000ed04 	.word	0xe000ed04

0800c5cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b090      	sub	sp, #64	; 0x40
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10a      	bne.n	800c5fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e8:	f383 8811 	msr	BASEPRI, r3
 800c5ec:	f3bf 8f6f 	isb	sy
 800c5f0:	f3bf 8f4f 	dsb	sy
 800c5f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5f6:	bf00      	nop
 800c5f8:	e7fe      	b.n	800c5f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d103      	bne.n	800c608 <xQueueGenericSendFromISR+0x3c>
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c604:	2b00      	cmp	r3, #0
 800c606:	d101      	bne.n	800c60c <xQueueGenericSendFromISR+0x40>
 800c608:	2301      	movs	r3, #1
 800c60a:	e000      	b.n	800c60e <xQueueGenericSendFromISR+0x42>
 800c60c:	2300      	movs	r3, #0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10a      	bne.n	800c628 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c624:	bf00      	nop
 800c626:	e7fe      	b.n	800c626 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d103      	bne.n	800c636 <xQueueGenericSendFromISR+0x6a>
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c632:	2b01      	cmp	r3, #1
 800c634:	d101      	bne.n	800c63a <xQueueGenericSendFromISR+0x6e>
 800c636:	2301      	movs	r3, #1
 800c638:	e000      	b.n	800c63c <xQueueGenericSendFromISR+0x70>
 800c63a:	2300      	movs	r3, #0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d10a      	bne.n	800c656 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	623b      	str	r3, [r7, #32]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c656:	f002 f8a7 	bl	800e7a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c65a:	f3ef 8211 	mrs	r2, BASEPRI
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	61fa      	str	r2, [r7, #28]
 800c670:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c672:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c674:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c67e:	429a      	cmp	r2, r3
 800c680:	d302      	bcc.n	800c688 <xQueueGenericSendFromISR+0xbc>
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	2b02      	cmp	r3, #2
 800c686:	d12f      	bne.n	800c6e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c696:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	68b9      	ldr	r1, [r7, #8]
 800c69c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c69e:	f000 f911 	bl	800c8c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6aa:	d112      	bne.n	800c6d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d016      	beq.n	800c6e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	3324      	adds	r3, #36	; 0x24
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f001 f86f 	bl	800d79c <xTaskRemoveFromEventList>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00e      	beq.n	800c6e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00b      	beq.n	800c6e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	601a      	str	r2, [r3, #0]
 800c6d0:	e007      	b.n	800c6e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c6d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	b25a      	sxtb	r2, r3
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c6e6:	e001      	b.n	800c6ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c6f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3740      	adds	r7, #64	; 0x40
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08c      	sub	sp, #48	; 0x30
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c710:	2300      	movs	r3, #0
 800c712:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <xQueueReceive+0x30>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	623b      	str	r3, [r7, #32]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d103      	bne.n	800c742 <xQueueReceive+0x3e>
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d101      	bne.n	800c746 <xQueueReceive+0x42>
 800c742:	2301      	movs	r3, #1
 800c744:	e000      	b.n	800c748 <xQueueReceive+0x44>
 800c746:	2300      	movs	r3, #0
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10a      	bne.n	800c762 <xQueueReceive+0x5e>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	61fb      	str	r3, [r7, #28]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c762:	f001 f9d7 	bl	800db14 <xTaskGetSchedulerState>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d102      	bne.n	800c772 <xQueueReceive+0x6e>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <xQueueReceive+0x72>
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <xQueueReceive+0x74>
 800c776:	2300      	movs	r3, #0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10a      	bne.n	800c792 <xQueueReceive+0x8e>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	61bb      	str	r3, [r7, #24]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c792:	f001 ff27 	bl	800e5e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d01f      	beq.n	800c7e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7a2:	68b9      	ldr	r1, [r7, #8]
 800c7a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a6:	f000 f8f7 	bl	800c998 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	1e5a      	subs	r2, r3, #1
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00f      	beq.n	800c7da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	3310      	adds	r3, #16
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 ffec 	bl	800d79c <xTaskRemoveFromEventList>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d007      	beq.n	800c7da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c7ca:	4b3d      	ldr	r3, [pc, #244]	; (800c8c0 <xQueueReceive+0x1bc>)
 800c7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c7da:	f001 ff33 	bl	800e644 <vPortExitCritical>
				return pdPASS;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e069      	b.n	800c8b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d103      	bne.n	800c7f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c7e8:	f001 ff2c 	bl	800e644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	e062      	b.n	800c8b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d106      	bne.n	800c804 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7f6:	f107 0310 	add.w	r3, r7, #16
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f001 f830 	bl	800d860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c800:	2301      	movs	r3, #1
 800c802:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c804:	f001 ff1e 	bl	800e644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c808:	f000 fdaa 	bl	800d360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c80c:	f001 feea 	bl	800e5e4 <vPortEnterCritical>
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c816:	b25b      	sxtb	r3, r3
 800c818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c81c:	d103      	bne.n	800c826 <xQueueReceive+0x122>
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c82c:	b25b      	sxtb	r3, r3
 800c82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c832:	d103      	bne.n	800c83c <xQueueReceive+0x138>
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c83c:	f001 ff02 	bl	800e644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c840:	1d3a      	adds	r2, r7, #4
 800c842:	f107 0310 	add.w	r3, r7, #16
 800c846:	4611      	mov	r1, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f001 f81f 	bl	800d88c <xTaskCheckForTimeOut>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d123      	bne.n	800c89c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c856:	f000 f917 	bl	800ca88 <prvIsQueueEmpty>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d017      	beq.n	800c890 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	3324      	adds	r3, #36	; 0x24
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	4611      	mov	r1, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 ff47 	bl	800d6fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c870:	f000 f8b8 	bl	800c9e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c874:	f000 fd82 	bl	800d37c <xTaskResumeAll>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d189      	bne.n	800c792 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c87e:	4b10      	ldr	r3, [pc, #64]	; (800c8c0 <xQueueReceive+0x1bc>)
 800c880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c884:	601a      	str	r2, [r3, #0]
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	e780      	b.n	800c792 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c892:	f000 f8a7 	bl	800c9e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c896:	f000 fd71 	bl	800d37c <xTaskResumeAll>
 800c89a:	e77a      	b.n	800c792 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c89c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c89e:	f000 f8a1 	bl	800c9e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8a2:	f000 fd6b 	bl	800d37c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a8:	f000 f8ee 	bl	800ca88 <prvIsQueueEmpty>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f43f af6f 	beq.w	800c792 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3730      	adds	r7, #48	; 0x30
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	e000ed04 	.word	0xe000ed04

0800c8c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10d      	bne.n	800c8fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d14d      	bne.n	800c986 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f001 f92e 	bl	800db50 <xTaskPriorityDisinherit>
 800c8f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	609a      	str	r2, [r3, #8]
 800c8fc:	e043      	b.n	800c986 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d119      	bne.n	800c938 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6858      	ldr	r0, [r3, #4]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90c:	461a      	mov	r2, r3
 800c90e:	68b9      	ldr	r1, [r7, #8]
 800c910:	f002 f998 	bl	800ec44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	685a      	ldr	r2, [r3, #4]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91c:	441a      	add	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d32b      	bcc.n	800c986 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681a      	ldr	r2, [r3, #0]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	605a      	str	r2, [r3, #4]
 800c936:	e026      	b.n	800c986 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	68d8      	ldr	r0, [r3, #12]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c940:	461a      	mov	r2, r3
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	f002 f97e 	bl	800ec44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	68da      	ldr	r2, [r3, #12]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c950:	425b      	negs	r3, r3
 800c952:	441a      	add	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	68da      	ldr	r2, [r3, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	429a      	cmp	r2, r3
 800c962:	d207      	bcs.n	800c974 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	689a      	ldr	r2, [r3, #8]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c96c:	425b      	negs	r3, r3
 800c96e:	441a      	add	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b02      	cmp	r3, #2
 800c978:	d105      	bne.n	800c986 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	3b01      	subs	r3, #1
 800c984:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c98e:	697b      	ldr	r3, [r7, #20]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d018      	beq.n	800c9dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68da      	ldr	r2, [r3, #12]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b2:	441a      	add	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d303      	bcc.n	800c9cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68d9      	ldr	r1, [r3, #12]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	6838      	ldr	r0, [r7, #0]
 800c9d8:	f002 f934 	bl	800ec44 <memcpy>
	}
}
 800c9dc:	bf00      	nop
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9ec:	f001 fdfa 	bl	800e5e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9f8:	e011      	b.n	800ca1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d012      	beq.n	800ca28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3324      	adds	r3, #36	; 0x24
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 fec8 	bl	800d79c <xTaskRemoveFromEventList>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca12:	f000 ff9d 	bl	800d950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	dce9      	bgt.n	800c9fa <prvUnlockQueue+0x16>
 800ca26:	e000      	b.n	800ca2a <prvUnlockQueue+0x46>
					break;
 800ca28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	22ff      	movs	r2, #255	; 0xff
 800ca2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca32:	f001 fe07 	bl	800e644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca36:	f001 fdd5 	bl	800e5e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca42:	e011      	b.n	800ca68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d012      	beq.n	800ca72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3310      	adds	r3, #16
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 fea3 	bl	800d79c <xTaskRemoveFromEventList>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d001      	beq.n	800ca60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca5c:	f000 ff78 	bl	800d950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca60:	7bbb      	ldrb	r3, [r7, #14]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	dce9      	bgt.n	800ca44 <prvUnlockQueue+0x60>
 800ca70:	e000      	b.n	800ca74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	22ff      	movs	r2, #255	; 0xff
 800ca78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca7c:	f001 fde2 	bl	800e644 <vPortExitCritical>
}
 800ca80:	bf00      	nop
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca90:	f001 fda8 	bl	800e5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e001      	b.n	800caa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800caa2:	2300      	movs	r3, #0
 800caa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800caa6:	f001 fdcd 	bl	800e644 <vPortExitCritical>

	return xReturn;
 800caaa:	68fb      	ldr	r3, [r7, #12]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cabc:	f001 fd92 	bl	800e5e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac8:	429a      	cmp	r2, r3
 800caca:	d102      	bne.n	800cad2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cacc:	2301      	movs	r3, #1
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	e001      	b.n	800cad6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cad2:	2300      	movs	r3, #0
 800cad4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cad6:	f001 fdb5 	bl	800e644 <vPortExitCritical>

	return xReturn;
 800cada:	68fb      	ldr	r3, [r7, #12]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800caee:	2300      	movs	r3, #0
 800caf0:	60fb      	str	r3, [r7, #12]
 800caf2:	e014      	b.n	800cb1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800caf4:	4a0f      	ldr	r2, [pc, #60]	; (800cb34 <vQueueAddToRegistry+0x50>)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10b      	bne.n	800cb18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb00:	490c      	ldr	r1, [pc, #48]	; (800cb34 <vQueueAddToRegistry+0x50>)
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cb0a:	4a0a      	ldr	r2, [pc, #40]	; (800cb34 <vQueueAddToRegistry+0x50>)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	4413      	add	r3, r2
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb16:	e006      	b.n	800cb26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	60fb      	str	r3, [r7, #12]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b07      	cmp	r3, #7
 800cb22:	d9e7      	bls.n	800caf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
 800cb32:	bf00      	nop
 800cb34:	20004b2c 	.word	0x20004b2c

0800cb38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb48:	f001 fd4c 	bl	800e5e4 <vPortEnterCritical>
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb52:	b25b      	sxtb	r3, r3
 800cb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb58:	d103      	bne.n	800cb62 <vQueueWaitForMessageRestricted+0x2a>
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb68:	b25b      	sxtb	r3, r3
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6e:	d103      	bne.n	800cb78 <vQueueWaitForMessageRestricted+0x40>
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb78:	f001 fd64 	bl	800e644 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d106      	bne.n	800cb92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	3324      	adds	r3, #36	; 0x24
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 fdd9 	bl	800d744 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb92:	6978      	ldr	r0, [r7, #20]
 800cb94:	f7ff ff26 	bl	800c9e4 <prvUnlockQueue>
	}
 800cb98:	bf00      	nop
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08e      	sub	sp, #56	; 0x38
 800cba4:	af04      	add	r7, sp, #16
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	607a      	str	r2, [r7, #4]
 800cbac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	623b      	str	r3, [r7, #32]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d10a      	bne.n	800cbe6 <xTaskCreateStatic+0x46>
	__asm volatile
 800cbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd4:	f383 8811 	msr	BASEPRI, r3
 800cbd8:	f3bf 8f6f 	isb	sy
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	61fb      	str	r3, [r7, #28]
}
 800cbe2:	bf00      	nop
 800cbe4:	e7fe      	b.n	800cbe4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbe6:	2354      	movs	r3, #84	; 0x54
 800cbe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b54      	cmp	r3, #84	; 0x54
 800cbee:	d00a      	beq.n	800cc06 <xTaskCreateStatic+0x66>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	61bb      	str	r3, [r7, #24]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d01e      	beq.n	800cc4c <xTaskCreateStatic+0xac>
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01b      	beq.n	800cc4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc20:	2202      	movs	r2, #2
 800cc22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc26:	2300      	movs	r3, #0
 800cc28:	9303      	str	r3, [sp, #12]
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	9302      	str	r3, [sp, #8]
 800cc2e:	f107 0314 	add.w	r3, r7, #20
 800cc32:	9301      	str	r3, [sp, #4]
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	68b9      	ldr	r1, [r7, #8]
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f000 f850 	bl	800cce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc46:	f000 f8d5 	bl	800cdf4 <prvAddNewTaskToReadyList>
 800cc4a:	e001      	b.n	800cc50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc50:	697b      	ldr	r3, [r7, #20]
	}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3728      	adds	r7, #40	; 0x28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b08c      	sub	sp, #48	; 0x30
 800cc5e:	af04      	add	r7, sp, #16
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	60b9      	str	r1, [r7, #8]
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	4613      	mov	r3, r2
 800cc68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc6a:	88fb      	ldrh	r3, [r7, #6]
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f001 fdda 	bl	800e828 <pvPortMalloc>
 800cc74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00e      	beq.n	800cc9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc7c:	2054      	movs	r0, #84	; 0x54
 800cc7e:	f001 fdd3 	bl	800e828 <pvPortMalloc>
 800cc82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d003      	beq.n	800cc92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	631a      	str	r2, [r3, #48]	; 0x30
 800cc90:	e005      	b.n	800cc9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc92:	6978      	ldr	r0, [r7, #20]
 800cc94:	f001 fe94 	bl	800e9c0 <vPortFree>
 800cc98:	e001      	b.n	800cc9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d017      	beq.n	800ccd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccac:	88fa      	ldrh	r2, [r7, #6]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9303      	str	r3, [sp, #12]
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	9302      	str	r3, [sp, #8]
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	68b9      	ldr	r1, [r7, #8]
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f000 f80e 	bl	800cce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccc8:	69f8      	ldr	r0, [r7, #28]
 800ccca:	f000 f893 	bl	800cdf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	61bb      	str	r3, [r7, #24]
 800ccd2:	e002      	b.n	800ccda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccda:	69bb      	ldr	r3, [r7, #24]
	}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3720      	adds	r7, #32
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b088      	sub	sp, #32
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	4413      	add	r3, r2
 800cd02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	f023 0307 	bic.w	r3, r3, #7
 800cd0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00a      	beq.n	800cd2c <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	617b      	str	r3, [r7, #20]
}
 800cd28:	bf00      	nop
 800cd2a:	e7fe      	b.n	800cd2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d01f      	beq.n	800cd72 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd32:	2300      	movs	r3, #0
 800cd34:	61fb      	str	r3, [r7, #28]
 800cd36:	e012      	b.n	800cd5e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	7819      	ldrb	r1, [r3, #0]
 800cd40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	4413      	add	r3, r2
 800cd46:	3334      	adds	r3, #52	; 0x34
 800cd48:	460a      	mov	r2, r1
 800cd4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	4413      	add	r3, r2
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d006      	beq.n	800cd66 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	61fb      	str	r3, [r7, #28]
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	2b0f      	cmp	r3, #15
 800cd62:	d9e9      	bls.n	800cd38 <prvInitialiseNewTask+0x54>
 800cd64:	e000      	b.n	800cd68 <prvInitialiseNewTask+0x84>
			{
				break;
 800cd66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd70:	e003      	b.n	800cd7a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7c:	2b06      	cmp	r3, #6
 800cd7e:	d901      	bls.n	800cd84 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd80:	2306      	movs	r3, #6
 800cd82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd92:	2200      	movs	r2, #0
 800cd94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	3304      	adds	r3, #4
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7ff f94a 	bl	800c034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	3318      	adds	r3, #24
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7ff f945 	bl	800c034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb2:	f1c3 0207 	rsb	r2, r3, #7
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	68f9      	ldr	r1, [r7, #12]
 800cdd2:	69b8      	ldr	r0, [r7, #24]
 800cdd4:	f001 fada 	bl	800e38c <pxPortInitialiseStack>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cde8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdea:	bf00      	nop
 800cdec:	3720      	adds	r7, #32
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
	...

0800cdf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdfc:	f001 fbf2 	bl	800e5e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce00:	4b2a      	ldr	r3, [pc, #168]	; (800ceac <prvAddNewTaskToReadyList+0xb8>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4a29      	ldr	r2, [pc, #164]	; (800ceac <prvAddNewTaskToReadyList+0xb8>)
 800ce08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce0a:	4b29      	ldr	r3, [pc, #164]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d109      	bne.n	800ce26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce12:	4a27      	ldr	r2, [pc, #156]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce18:	4b24      	ldr	r3, [pc, #144]	; (800ceac <prvAddNewTaskToReadyList+0xb8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d110      	bne.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce20:	f000 fdba 	bl	800d998 <prvInitialiseTaskLists>
 800ce24:	e00d      	b.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce26:	4b23      	ldr	r3, [pc, #140]	; (800ceb4 <prvAddNewTaskToReadyList+0xc0>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d109      	bne.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce2e:	4b20      	ldr	r3, [pc, #128]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d802      	bhi.n	800ce42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce3c:	4a1c      	ldr	r2, [pc, #112]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce42:	4b1d      	ldr	r3, [pc, #116]	; (800ceb8 <prvAddNewTaskToReadyList+0xc4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	4a1b      	ldr	r2, [pc, #108]	; (800ceb8 <prvAddNewTaskToReadyList+0xc4>)
 800ce4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce50:	2201      	movs	r2, #1
 800ce52:	409a      	lsls	r2, r3
 800ce54:	4b19      	ldr	r3, [pc, #100]	; (800cebc <prvAddNewTaskToReadyList+0xc8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	4a18      	ldr	r2, [pc, #96]	; (800cebc <prvAddNewTaskToReadyList+0xc8>)
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce62:	4613      	mov	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	4a15      	ldr	r2, [pc, #84]	; (800cec0 <prvAddNewTaskToReadyList+0xcc>)
 800ce6c:	441a      	add	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	3304      	adds	r3, #4
 800ce72:	4619      	mov	r1, r3
 800ce74:	4610      	mov	r0, r2
 800ce76:	f7ff f8ea 	bl	800c04e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce7a:	f001 fbe3 	bl	800e644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <prvAddNewTaskToReadyList+0xc0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00e      	beq.n	800cea4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce86:	4b0a      	ldr	r3, [pc, #40]	; (800ceb0 <prvAddNewTaskToReadyList+0xbc>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d207      	bcs.n	800cea4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <prvAddNewTaskToReadyList+0xd0>)
 800ce96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	200007dc 	.word	0x200007dc
 800ceb0:	200006dc 	.word	0x200006dc
 800ceb4:	200007e8 	.word	0x200007e8
 800ceb8:	200007f8 	.word	0x200007f8
 800cebc:	200007e4 	.word	0x200007e4
 800cec0:	200006e0 	.word	0x200006e0
 800cec4:	e000ed04 	.word	0xe000ed04

0800cec8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ced0:	f001 fb88 	bl	800e5e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <vTaskDelete+0x18>
 800ceda:	4b39      	ldr	r3, [pc, #228]	; (800cfc0 <vTaskDelete+0xf8>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	e000      	b.n	800cee2 <vTaskDelete+0x1a>
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3304      	adds	r3, #4
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff f90d 	bl	800c108 <uxListRemove>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d115      	bne.n	800cf20 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef8:	4932      	ldr	r1, [pc, #200]	; (800cfc4 <vTaskDelete+0xfc>)
 800cefa:	4613      	mov	r3, r2
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	440b      	add	r3, r1
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d10a      	bne.n	800cf20 <vTaskDelete+0x58>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	2201      	movs	r2, #1
 800cf10:	fa02 f303 	lsl.w	r3, r2, r3
 800cf14:	43da      	mvns	r2, r3
 800cf16:	4b2c      	ldr	r3, [pc, #176]	; (800cfc8 <vTaskDelete+0x100>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	4a2a      	ldr	r2, [pc, #168]	; (800cfc8 <vTaskDelete+0x100>)
 800cf1e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d004      	beq.n	800cf32 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3318      	adds	r3, #24
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7ff f8eb 	bl	800c108 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800cf32:	4b26      	ldr	r3, [pc, #152]	; (800cfcc <vTaskDelete+0x104>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	3301      	adds	r3, #1
 800cf38:	4a24      	ldr	r2, [pc, #144]	; (800cfcc <vTaskDelete+0x104>)
 800cf3a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800cf3c:	4b20      	ldr	r3, [pc, #128]	; (800cfc0 <vTaskDelete+0xf8>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d10b      	bne.n	800cf5e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3304      	adds	r3, #4
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	4820      	ldr	r0, [pc, #128]	; (800cfd0 <vTaskDelete+0x108>)
 800cf4e:	f7ff f87e 	bl	800c04e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800cf52:	4b20      	ldr	r3, [pc, #128]	; (800cfd4 <vTaskDelete+0x10c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	3301      	adds	r3, #1
 800cf58:	4a1e      	ldr	r2, [pc, #120]	; (800cfd4 <vTaskDelete+0x10c>)
 800cf5a:	6013      	str	r3, [r2, #0]
 800cf5c:	e009      	b.n	800cf72 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800cf5e:	4b1e      	ldr	r3, [pc, #120]	; (800cfd8 <vTaskDelete+0x110>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	3b01      	subs	r3, #1
 800cf64:	4a1c      	ldr	r2, [pc, #112]	; (800cfd8 <vTaskDelete+0x110>)
 800cf66:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f000 fd83 	bl	800da74 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800cf6e:	f000 fdb1 	bl	800dad4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800cf72:	f001 fb67 	bl	800e644 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800cf76:	4b19      	ldr	r3, [pc, #100]	; (800cfdc <vTaskDelete+0x114>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d01b      	beq.n	800cfb6 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <vTaskDelete+0xf8>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d116      	bne.n	800cfb6 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800cf88:	4b15      	ldr	r3, [pc, #84]	; (800cfe0 <vTaskDelete+0x118>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00a      	beq.n	800cfa6 <vTaskDelete+0xde>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	60bb      	str	r3, [r7, #8]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800cfa6:	4b0f      	ldr	r3, [pc, #60]	; (800cfe4 <vTaskDelete+0x11c>)
 800cfa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cfb6:	bf00      	nop
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	200006dc 	.word	0x200006dc
 800cfc4:	200006e0 	.word	0x200006e0
 800cfc8:	200007e4 	.word	0x200007e4
 800cfcc:	200007f8 	.word	0x200007f8
 800cfd0:	200007b0 	.word	0x200007b0
 800cfd4:	200007c4 	.word	0x200007c4
 800cfd8:	200007dc 	.word	0x200007dc
 800cfdc:	200007e8 	.word	0x200007e8
 800cfe0:	20000804 	.word	0x20000804
 800cfe4:	e000ed04 	.word	0xe000ed04

0800cfe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cff0:	2300      	movs	r3, #0
 800cff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d017      	beq.n	800d02a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cffa:	4b13      	ldr	r3, [pc, #76]	; (800d048 <vTaskDelay+0x60>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00a      	beq.n	800d018 <vTaskDelay+0x30>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	60bb      	str	r3, [r7, #8]
}
 800d014:	bf00      	nop
 800d016:	e7fe      	b.n	800d016 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d018:	f000 f9a2 	bl	800d360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d01c:	2100      	movs	r1, #0
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fe1c 	bl	800dc5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d024:	f000 f9aa 	bl	800d37c <xTaskResumeAll>
 800d028:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d107      	bne.n	800d040 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d030:	4b06      	ldr	r3, [pc, #24]	; (800d04c <vTaskDelay+0x64>)
 800d032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d036:	601a      	str	r2, [r3, #0]
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d040:	bf00      	nop
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	20000804 	.word	0x20000804
 800d04c:	e000ed04 	.word	0xe000ed04

0800d050 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d058:	f001 fac4 	bl	800e5e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d102      	bne.n	800d068 <vTaskSuspend+0x18>
 800d062:	4b3c      	ldr	r3, [pc, #240]	; (800d154 <vTaskSuspend+0x104>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	e000      	b.n	800d06a <vTaskSuspend+0x1a>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	3304      	adds	r3, #4
 800d070:	4618      	mov	r0, r3
 800d072:	f7ff f849 	bl	800c108 <uxListRemove>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d115      	bne.n	800d0a8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d080:	4935      	ldr	r1, [pc, #212]	; (800d158 <vTaskSuspend+0x108>)
 800d082:	4613      	mov	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	440b      	add	r3, r1
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <vTaskSuspend+0x58>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d096:	2201      	movs	r2, #1
 800d098:	fa02 f303 	lsl.w	r3, r2, r3
 800d09c:	43da      	mvns	r2, r3
 800d09e:	4b2f      	ldr	r3, [pc, #188]	; (800d15c <vTaskSuspend+0x10c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	4a2d      	ldr	r2, [pc, #180]	; (800d15c <vTaskSuspend+0x10c>)
 800d0a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d004      	beq.n	800d0ba <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3318      	adds	r3, #24
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7ff f827 	bl	800c108 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3304      	adds	r3, #4
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4827      	ldr	r0, [pc, #156]	; (800d160 <vTaskSuspend+0x110>)
 800d0c2:	f7fe ffc4 	bl	800c04e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d103      	bne.n	800d0da <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800d0da:	f001 fab3 	bl	800e644 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800d0de:	4b21      	ldr	r3, [pc, #132]	; (800d164 <vTaskSuspend+0x114>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d005      	beq.n	800d0f2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800d0e6:	f001 fa7d 	bl	800e5e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800d0ea:	f000 fcf3 	bl	800dad4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800d0ee:	f001 faa9 	bl	800e644 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800d0f2:	4b18      	ldr	r3, [pc, #96]	; (800d154 <vTaskSuspend+0x104>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d127      	bne.n	800d14c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800d0fc:	4b19      	ldr	r3, [pc, #100]	; (800d164 <vTaskSuspend+0x114>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d017      	beq.n	800d134 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800d104:	4b18      	ldr	r3, [pc, #96]	; (800d168 <vTaskSuspend+0x118>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00a      	beq.n	800d122 <vTaskSuspend+0xd2>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	60bb      	str	r3, [r7, #8]
}
 800d11e:	bf00      	nop
 800d120:	e7fe      	b.n	800d120 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800d122:	4b12      	ldr	r3, [pc, #72]	; (800d16c <vTaskSuspend+0x11c>)
 800d124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d132:	e00b      	b.n	800d14c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800d134:	4b0a      	ldr	r3, [pc, #40]	; (800d160 <vTaskSuspend+0x110>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	4b0d      	ldr	r3, [pc, #52]	; (800d170 <vTaskSuspend+0x120>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d103      	bne.n	800d148 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800d140:	4b04      	ldr	r3, [pc, #16]	; (800d154 <vTaskSuspend+0x104>)
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
	}
 800d146:	e001      	b.n	800d14c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800d148:	f000 fa7c 	bl	800d644 <vTaskSwitchContext>
	}
 800d14c:	bf00      	nop
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	200006dc 	.word	0x200006dc
 800d158:	200006e0 	.word	0x200006e0
 800d15c:	200007e4 	.word	0x200007e4
 800d160:	200007c8 	.word	0x200007c8
 800d164:	200007e8 	.word	0x200007e8
 800d168:	20000804 	.word	0x20000804
 800d16c:	e000ed04 	.word	0xe000ed04
 800d170:	200007dc 	.word	0x200007dc

0800d174 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800d17c:	2300      	movs	r3, #0
 800d17e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10a      	bne.n	800d1a0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800d18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18e:	f383 8811 	msr	BASEPRI, r3
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	f3bf 8f4f 	dsb	sy
 800d19a:	60fb      	str	r3, [r7, #12]
}
 800d19c:	bf00      	nop
 800d19e:	e7fe      	b.n	800d19e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	695b      	ldr	r3, [r3, #20]
 800d1a4:	4a0a      	ldr	r2, [pc, #40]	; (800d1d0 <prvTaskIsTaskSuspended+0x5c>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d10a      	bne.n	800d1c0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ae:	4a09      	ldr	r2, [pc, #36]	; (800d1d4 <prvTaskIsTaskSuspended+0x60>)
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d005      	beq.n	800d1c0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d101      	bne.n	800d1c0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1c0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	371c      	adds	r7, #28
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	200007c8 	.word	0x200007c8
 800d1d4:	2000079c 	.word	0x2000079c

0800d1d8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d10a      	bne.n	800d200 <vTaskResume+0x28>
	__asm volatile
 800d1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ee:	f383 8811 	msr	BASEPRI, r3
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	f3bf 8f4f 	dsb	sy
 800d1fa:	60bb      	str	r3, [r7, #8]
}
 800d1fc:	bf00      	nop
 800d1fe:	e7fe      	b.n	800d1fe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800d200:	4b20      	ldr	r3, [pc, #128]	; (800d284 <vTaskResume+0xac>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	429a      	cmp	r2, r3
 800d208:	d037      	beq.n	800d27a <vTaskResume+0xa2>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d034      	beq.n	800d27a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800d210:	f001 f9e8 	bl	800e5e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7ff ffad 	bl	800d174 <prvTaskIsTaskSuspended>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d02a      	beq.n	800d276 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	3304      	adds	r3, #4
 800d224:	4618      	mov	r0, r3
 800d226:	f7fe ff6f 	bl	800c108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22e:	2201      	movs	r2, #1
 800d230:	409a      	lsls	r2, r3
 800d232:	4b15      	ldr	r3, [pc, #84]	; (800d288 <vTaskResume+0xb0>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4313      	orrs	r3, r2
 800d238:	4a13      	ldr	r2, [pc, #76]	; (800d288 <vTaskResume+0xb0>)
 800d23a:	6013      	str	r3, [r2, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	4a10      	ldr	r2, [pc, #64]	; (800d28c <vTaskResume+0xb4>)
 800d24a:	441a      	add	r2, r3
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	3304      	adds	r3, #4
 800d250:	4619      	mov	r1, r3
 800d252:	4610      	mov	r0, r2
 800d254:	f7fe fefb 	bl	800c04e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d25c:	4b09      	ldr	r3, [pc, #36]	; (800d284 <vTaskResume+0xac>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d262:	429a      	cmp	r2, r3
 800d264:	d307      	bcc.n	800d276 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800d266:	4b0a      	ldr	r3, [pc, #40]	; (800d290 <vTaskResume+0xb8>)
 800d268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26c:	601a      	str	r2, [r3, #0]
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800d276:	f001 f9e5 	bl	800e644 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d27a:	bf00      	nop
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	200006dc 	.word	0x200006dc
 800d288:	200007e4 	.word	0x200007e4
 800d28c:	200006e0 	.word	0x200006e0
 800d290:	e000ed04 	.word	0xe000ed04

0800d294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b08a      	sub	sp, #40	; 0x28
 800d298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d29a:	2300      	movs	r3, #0
 800d29c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d2a2:	463a      	mov	r2, r7
 800d2a4:	1d39      	adds	r1, r7, #4
 800d2a6:	f107 0308 	add.w	r3, r7, #8
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7f8 fd86 	bl	8005dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	9202      	str	r2, [sp, #8]
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	460a      	mov	r2, r1
 800d2c2:	4921      	ldr	r1, [pc, #132]	; (800d348 <vTaskStartScheduler+0xb4>)
 800d2c4:	4821      	ldr	r0, [pc, #132]	; (800d34c <vTaskStartScheduler+0xb8>)
 800d2c6:	f7ff fc6b 	bl	800cba0 <xTaskCreateStatic>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4a20      	ldr	r2, [pc, #128]	; (800d350 <vTaskStartScheduler+0xbc>)
 800d2ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2d0:	4b1f      	ldr	r3, [pc, #124]	; (800d350 <vTaskStartScheduler+0xbc>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	617b      	str	r3, [r7, #20]
 800d2dc:	e001      	b.n	800d2e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d102      	bne.n	800d2ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2e8:	f000 fd1e 	bl	800dd28 <xTimerCreateTimerTask>
 800d2ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d116      	bne.n	800d322 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	613b      	str	r3, [r7, #16]
}
 800d306:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d308:	4b12      	ldr	r3, [pc, #72]	; (800d354 <vTaskStartScheduler+0xc0>)
 800d30a:	f04f 32ff 	mov.w	r2, #4294967295
 800d30e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d310:	4b11      	ldr	r3, [pc, #68]	; (800d358 <vTaskStartScheduler+0xc4>)
 800d312:	2201      	movs	r2, #1
 800d314:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d316:	4b11      	ldr	r3, [pc, #68]	; (800d35c <vTaskStartScheduler+0xc8>)
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d31c:	f001 f8c0 	bl	800e4a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d320:	e00e      	b.n	800d340 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d328:	d10a      	bne.n	800d340 <vTaskStartScheduler+0xac>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	60fb      	str	r3, [r7, #12]
}
 800d33c:	bf00      	nop
 800d33e:	e7fe      	b.n	800d33e <vTaskStartScheduler+0xaa>
}
 800d340:	bf00      	nop
 800d342:	3718      	adds	r7, #24
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	0800edf0 	.word	0x0800edf0
 800d34c:	0800d969 	.word	0x0800d969
 800d350:	20000800 	.word	0x20000800
 800d354:	200007fc 	.word	0x200007fc
 800d358:	200007e8 	.word	0x200007e8
 800d35c:	200007e0 	.word	0x200007e0

0800d360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d360:	b480      	push	{r7}
 800d362:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d364:	4b04      	ldr	r3, [pc, #16]	; (800d378 <vTaskSuspendAll+0x18>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3301      	adds	r3, #1
 800d36a:	4a03      	ldr	r2, [pc, #12]	; (800d378 <vTaskSuspendAll+0x18>)
 800d36c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d36e:	bf00      	nop
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	20000804 	.word	0x20000804

0800d37c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d382:	2300      	movs	r3, #0
 800d384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d386:	2300      	movs	r3, #0
 800d388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d38a:	4b41      	ldr	r3, [pc, #260]	; (800d490 <xTaskResumeAll+0x114>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	603b      	str	r3, [r7, #0]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d3a8:	f001 f91c 	bl	800e5e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d3ac:	4b38      	ldr	r3, [pc, #224]	; (800d490 <xTaskResumeAll+0x114>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	4a37      	ldr	r2, [pc, #220]	; (800d490 <xTaskResumeAll+0x114>)
 800d3b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3b6:	4b36      	ldr	r3, [pc, #216]	; (800d490 <xTaskResumeAll+0x114>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d161      	bne.n	800d482 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3be:	4b35      	ldr	r3, [pc, #212]	; (800d494 <xTaskResumeAll+0x118>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d05d      	beq.n	800d482 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3c6:	e02e      	b.n	800d426 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c8:	4b33      	ldr	r3, [pc, #204]	; (800d498 <xTaskResumeAll+0x11c>)
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	3318      	adds	r3, #24
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe fe97 	bl	800c108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fe fe92 	bl	800c108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	409a      	lsls	r2, r3
 800d3ec:	4b2b      	ldr	r3, [pc, #172]	; (800d49c <xTaskResumeAll+0x120>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	4a2a      	ldr	r2, [pc, #168]	; (800d49c <xTaskResumeAll+0x120>)
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4a27      	ldr	r2, [pc, #156]	; (800d4a0 <xTaskResumeAll+0x124>)
 800d404:	441a      	add	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3304      	adds	r3, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fe fe1e 	bl	800c04e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d416:	4b23      	ldr	r3, [pc, #140]	; (800d4a4 <xTaskResumeAll+0x128>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d302      	bcc.n	800d426 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d420:	4b21      	ldr	r3, [pc, #132]	; (800d4a8 <xTaskResumeAll+0x12c>)
 800d422:	2201      	movs	r2, #1
 800d424:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d426:	4b1c      	ldr	r3, [pc, #112]	; (800d498 <xTaskResumeAll+0x11c>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1cc      	bne.n	800d3c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d434:	f000 fb4e 	bl	800dad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d438:	4b1c      	ldr	r3, [pc, #112]	; (800d4ac <xTaskResumeAll+0x130>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d010      	beq.n	800d466 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d444:	f000 f846 	bl	800d4d4 <xTaskIncrementTick>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d002      	beq.n	800d454 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d44e:	4b16      	ldr	r3, [pc, #88]	; (800d4a8 <xTaskResumeAll+0x12c>)
 800d450:	2201      	movs	r2, #1
 800d452:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3b01      	subs	r3, #1
 800d458:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1f1      	bne.n	800d444 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d460:	4b12      	ldr	r3, [pc, #72]	; (800d4ac <xTaskResumeAll+0x130>)
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d466:	4b10      	ldr	r3, [pc, #64]	; (800d4a8 <xTaskResumeAll+0x12c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d009      	beq.n	800d482 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d46e:	2301      	movs	r3, #1
 800d470:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d472:	4b0f      	ldr	r3, [pc, #60]	; (800d4b0 <xTaskResumeAll+0x134>)
 800d474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d482:	f001 f8df 	bl	800e644 <vPortExitCritical>

	return xAlreadyYielded;
 800d486:	68bb      	ldr	r3, [r7, #8]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	20000804 	.word	0x20000804
 800d494:	200007dc 	.word	0x200007dc
 800d498:	2000079c 	.word	0x2000079c
 800d49c:	200007e4 	.word	0x200007e4
 800d4a0:	200006e0 	.word	0x200006e0
 800d4a4:	200006dc 	.word	0x200006dc
 800d4a8:	200007f0 	.word	0x200007f0
 800d4ac:	200007ec 	.word	0x200007ec
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4ba:	4b05      	ldr	r3, [pc, #20]	; (800d4d0 <xTaskGetTickCount+0x1c>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4c0:	687b      	ldr	r3, [r7, #4]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	200007e0 	.word	0x200007e0

0800d4d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4de:	4b4e      	ldr	r3, [pc, #312]	; (800d618 <xTaskIncrementTick+0x144>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f040 808e 	bne.w	800d604 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4e8:	4b4c      	ldr	r3, [pc, #304]	; (800d61c <xTaskIncrementTick+0x148>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4f0:	4a4a      	ldr	r2, [pc, #296]	; (800d61c <xTaskIncrementTick+0x148>)
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d120      	bne.n	800d53e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4fc:	4b48      	ldr	r3, [pc, #288]	; (800d620 <xTaskIncrementTick+0x14c>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00a      	beq.n	800d51c <xTaskIncrementTick+0x48>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	603b      	str	r3, [r7, #0]
}
 800d518:	bf00      	nop
 800d51a:	e7fe      	b.n	800d51a <xTaskIncrementTick+0x46>
 800d51c:	4b40      	ldr	r3, [pc, #256]	; (800d620 <xTaskIncrementTick+0x14c>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	60fb      	str	r3, [r7, #12]
 800d522:	4b40      	ldr	r3, [pc, #256]	; (800d624 <xTaskIncrementTick+0x150>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a3e      	ldr	r2, [pc, #248]	; (800d620 <xTaskIncrementTick+0x14c>)
 800d528:	6013      	str	r3, [r2, #0]
 800d52a:	4a3e      	ldr	r2, [pc, #248]	; (800d624 <xTaskIncrementTick+0x150>)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6013      	str	r3, [r2, #0]
 800d530:	4b3d      	ldr	r3, [pc, #244]	; (800d628 <xTaskIncrementTick+0x154>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	3301      	adds	r3, #1
 800d536:	4a3c      	ldr	r2, [pc, #240]	; (800d628 <xTaskIncrementTick+0x154>)
 800d538:	6013      	str	r3, [r2, #0]
 800d53a:	f000 facb 	bl	800dad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d53e:	4b3b      	ldr	r3, [pc, #236]	; (800d62c <xTaskIncrementTick+0x158>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	693a      	ldr	r2, [r7, #16]
 800d544:	429a      	cmp	r2, r3
 800d546:	d348      	bcc.n	800d5da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d548:	4b35      	ldr	r3, [pc, #212]	; (800d620 <xTaskIncrementTick+0x14c>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d104      	bne.n	800d55c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d552:	4b36      	ldr	r3, [pc, #216]	; (800d62c <xTaskIncrementTick+0x158>)
 800d554:	f04f 32ff 	mov.w	r2, #4294967295
 800d558:	601a      	str	r2, [r3, #0]
					break;
 800d55a:	e03e      	b.n	800d5da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d55c:	4b30      	ldr	r3, [pc, #192]	; (800d620 <xTaskIncrementTick+0x14c>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d56c:	693a      	ldr	r2, [r7, #16]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	429a      	cmp	r2, r3
 800d572:	d203      	bcs.n	800d57c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d574:	4a2d      	ldr	r2, [pc, #180]	; (800d62c <xTaskIncrementTick+0x158>)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d57a:	e02e      	b.n	800d5da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	3304      	adds	r3, #4
 800d580:	4618      	mov	r0, r3
 800d582:	f7fe fdc1 	bl	800c108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d004      	beq.n	800d598 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	3318      	adds	r3, #24
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe fdb8 	bl	800c108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d59c:	2201      	movs	r2, #1
 800d59e:	409a      	lsls	r2, r3
 800d5a0:	4b23      	ldr	r3, [pc, #140]	; (800d630 <xTaskIncrementTick+0x15c>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	4a22      	ldr	r2, [pc, #136]	; (800d630 <xTaskIncrementTick+0x15c>)
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	4413      	add	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4a1f      	ldr	r2, [pc, #124]	; (800d634 <xTaskIncrementTick+0x160>)
 800d5b8:	441a      	add	r2, r3
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	3304      	adds	r3, #4
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	f7fe fd44 	bl	800c04e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ca:	4b1b      	ldr	r3, [pc, #108]	; (800d638 <xTaskIncrementTick+0x164>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d3b9      	bcc.n	800d548 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5d8:	e7b6      	b.n	800d548 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5da:	4b17      	ldr	r3, [pc, #92]	; (800d638 <xTaskIncrementTick+0x164>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e0:	4914      	ldr	r1, [pc, #80]	; (800d634 <xTaskIncrementTick+0x160>)
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4413      	add	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	440b      	add	r3, r1
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d901      	bls.n	800d5f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5f6:	4b11      	ldr	r3, [pc, #68]	; (800d63c <xTaskIncrementTick+0x168>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d007      	beq.n	800d60e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d5fe:	2301      	movs	r3, #1
 800d600:	617b      	str	r3, [r7, #20]
 800d602:	e004      	b.n	800d60e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d604:	4b0e      	ldr	r3, [pc, #56]	; (800d640 <xTaskIncrementTick+0x16c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3301      	adds	r3, #1
 800d60a:	4a0d      	ldr	r2, [pc, #52]	; (800d640 <xTaskIncrementTick+0x16c>)
 800d60c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d60e:	697b      	ldr	r3, [r7, #20]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3718      	adds	r7, #24
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	20000804 	.word	0x20000804
 800d61c:	200007e0 	.word	0x200007e0
 800d620:	20000794 	.word	0x20000794
 800d624:	20000798 	.word	0x20000798
 800d628:	200007f4 	.word	0x200007f4
 800d62c:	200007fc 	.word	0x200007fc
 800d630:	200007e4 	.word	0x200007e4
 800d634:	200006e0 	.word	0x200006e0
 800d638:	200006dc 	.word	0x200006dc
 800d63c:	200007f0 	.word	0x200007f0
 800d640:	200007ec 	.word	0x200007ec

0800d644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d644:	b480      	push	{r7}
 800d646:	b087      	sub	sp, #28
 800d648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d64a:	4b27      	ldr	r3, [pc, #156]	; (800d6e8 <vTaskSwitchContext+0xa4>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d003      	beq.n	800d65a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d652:	4b26      	ldr	r3, [pc, #152]	; (800d6ec <vTaskSwitchContext+0xa8>)
 800d654:	2201      	movs	r2, #1
 800d656:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d658:	e03f      	b.n	800d6da <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d65a:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <vTaskSwitchContext+0xa8>)
 800d65c:	2200      	movs	r2, #0
 800d65e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d660:	4b23      	ldr	r3, [pc, #140]	; (800d6f0 <vTaskSwitchContext+0xac>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	fab3 f383 	clz	r3, r3
 800d66c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d66e:	7afb      	ldrb	r3, [r7, #11]
 800d670:	f1c3 031f 	rsb	r3, r3, #31
 800d674:	617b      	str	r3, [r7, #20]
 800d676:	491f      	ldr	r1, [pc, #124]	; (800d6f4 <vTaskSwitchContext+0xb0>)
 800d678:	697a      	ldr	r2, [r7, #20]
 800d67a:	4613      	mov	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	4413      	add	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	440b      	add	r3, r1
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10a      	bne.n	800d6a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68e:	f383 8811 	msr	BASEPRI, r3
 800d692:	f3bf 8f6f 	isb	sy
 800d696:	f3bf 8f4f 	dsb	sy
 800d69a:	607b      	str	r3, [r7, #4]
}
 800d69c:	bf00      	nop
 800d69e:	e7fe      	b.n	800d69e <vTaskSwitchContext+0x5a>
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4a12      	ldr	r2, [pc, #72]	; (800d6f4 <vTaskSwitchContext+0xb0>)
 800d6ac:	4413      	add	r3, r2
 800d6ae:	613b      	str	r3, [r7, #16]
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	605a      	str	r2, [r3, #4]
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d104      	bne.n	800d6d0 <vTaskSwitchContext+0x8c>
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	605a      	str	r2, [r3, #4]
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	4a08      	ldr	r2, [pc, #32]	; (800d6f8 <vTaskSwitchContext+0xb4>)
 800d6d8:	6013      	str	r3, [r2, #0]
}
 800d6da:	bf00      	nop
 800d6dc:	371c      	adds	r7, #28
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	20000804 	.word	0x20000804
 800d6ec:	200007f0 	.word	0x200007f0
 800d6f0:	200007e4 	.word	0x200007e4
 800d6f4:	200006e0 	.word	0x200006e0
 800d6f8:	200006dc 	.word	0x200006dc

0800d6fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	60fb      	str	r3, [r7, #12]
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d722:	4b07      	ldr	r3, [pc, #28]	; (800d740 <vTaskPlaceOnEventList+0x44>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3318      	adds	r3, #24
 800d728:	4619      	mov	r1, r3
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7fe fcb3 	bl	800c096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d730:	2101      	movs	r1, #1
 800d732:	6838      	ldr	r0, [r7, #0]
 800d734:	f000 fa92 	bl	800dc5c <prvAddCurrentTaskToDelayedList>
}
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	200006dc 	.word	0x200006dc

0800d744 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10a      	bne.n	800d76c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	617b      	str	r3, [r7, #20]
}
 800d768:	bf00      	nop
 800d76a:	e7fe      	b.n	800d76a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d76c:	4b0a      	ldr	r3, [pc, #40]	; (800d798 <vTaskPlaceOnEventListRestricted+0x54>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3318      	adds	r3, #24
 800d772:	4619      	mov	r1, r3
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f7fe fc6a 	bl	800c04e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d780:	f04f 33ff 	mov.w	r3, #4294967295
 800d784:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	68b8      	ldr	r0, [r7, #8]
 800d78a:	f000 fa67 	bl	800dc5c <prvAddCurrentTaskToDelayedList>
	}
 800d78e:	bf00      	nop
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	200006dc 	.word	0x200006dc

0800d79c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10a      	bne.n	800d7c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	60fb      	str	r3, [r7, #12]
}
 800d7c4:	bf00      	nop
 800d7c6:	e7fe      	b.n	800d7c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	3318      	adds	r3, #24
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fe fc9b 	bl	800c108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7d2:	4b1d      	ldr	r3, [pc, #116]	; (800d848 <xTaskRemoveFromEventList+0xac>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d11c      	bne.n	800d814 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	3304      	adds	r3, #4
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7fe fc92 	bl	800c108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	409a      	lsls	r2, r3
 800d7ec:	4b17      	ldr	r3, [pc, #92]	; (800d84c <xTaskRemoveFromEventList+0xb0>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	4a16      	ldr	r2, [pc, #88]	; (800d84c <xTaskRemoveFromEventList+0xb0>)
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	4413      	add	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4a13      	ldr	r2, [pc, #76]	; (800d850 <xTaskRemoveFromEventList+0xb4>)
 800d804:	441a      	add	r2, r3
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	3304      	adds	r3, #4
 800d80a:	4619      	mov	r1, r3
 800d80c:	4610      	mov	r0, r2
 800d80e:	f7fe fc1e 	bl	800c04e <vListInsertEnd>
 800d812:	e005      	b.n	800d820 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	3318      	adds	r3, #24
 800d818:	4619      	mov	r1, r3
 800d81a:	480e      	ldr	r0, [pc, #56]	; (800d854 <xTaskRemoveFromEventList+0xb8>)
 800d81c:	f7fe fc17 	bl	800c04e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d824:	4b0c      	ldr	r3, [pc, #48]	; (800d858 <xTaskRemoveFromEventList+0xbc>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d905      	bls.n	800d83a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d82e:	2301      	movs	r3, #1
 800d830:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d832:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <xTaskRemoveFromEventList+0xc0>)
 800d834:	2201      	movs	r2, #1
 800d836:	601a      	str	r2, [r3, #0]
 800d838:	e001      	b.n	800d83e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d83e:	697b      	ldr	r3, [r7, #20]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3718      	adds	r7, #24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	20000804 	.word	0x20000804
 800d84c:	200007e4 	.word	0x200007e4
 800d850:	200006e0 	.word	0x200006e0
 800d854:	2000079c 	.word	0x2000079c
 800d858:	200006dc 	.word	0x200006dc
 800d85c:	200007f0 	.word	0x200007f0

0800d860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d868:	4b06      	ldr	r3, [pc, #24]	; (800d884 <vTaskInternalSetTimeOutState+0x24>)
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d870:	4b05      	ldr	r3, [pc, #20]	; (800d888 <vTaskInternalSetTimeOutState+0x28>)
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	605a      	str	r2, [r3, #4]
}
 800d878:	bf00      	nop
 800d87a:	370c      	adds	r7, #12
 800d87c:	46bd      	mov	sp, r7
 800d87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d882:	4770      	bx	lr
 800d884:	200007f4 	.word	0x200007f4
 800d888:	200007e0 	.word	0x200007e0

0800d88c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10a      	bne.n	800d8b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	613b      	str	r3, [r7, #16]
}
 800d8ae:	bf00      	nop
 800d8b0:	e7fe      	b.n	800d8b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d10a      	bne.n	800d8ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8bc:	f383 8811 	msr	BASEPRI, r3
 800d8c0:	f3bf 8f6f 	isb	sy
 800d8c4:	f3bf 8f4f 	dsb	sy
 800d8c8:	60fb      	str	r3, [r7, #12]
}
 800d8ca:	bf00      	nop
 800d8cc:	e7fe      	b.n	800d8cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8ce:	f000 fe89 	bl	800e5e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8d2:	4b1d      	ldr	r3, [pc, #116]	; (800d948 <xTaskCheckForTimeOut+0xbc>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	1ad3      	subs	r3, r2, r3
 800d8e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ea:	d102      	bne.n	800d8f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	61fb      	str	r3, [r7, #28]
 800d8f0:	e023      	b.n	800d93a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	4b15      	ldr	r3, [pc, #84]	; (800d94c <xTaskCheckForTimeOut+0xc0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d007      	beq.n	800d90e <xTaskCheckForTimeOut+0x82>
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	69ba      	ldr	r2, [r7, #24]
 800d904:	429a      	cmp	r2, r3
 800d906:	d302      	bcc.n	800d90e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d908:	2301      	movs	r3, #1
 800d90a:	61fb      	str	r3, [r7, #28]
 800d90c:	e015      	b.n	800d93a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	429a      	cmp	r2, r3
 800d916:	d20b      	bcs.n	800d930 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	1ad2      	subs	r2, r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7ff ff9b 	bl	800d860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	61fb      	str	r3, [r7, #28]
 800d92e:	e004      	b.n	800d93a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2200      	movs	r2, #0
 800d934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d936:	2301      	movs	r3, #1
 800d938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d93a:	f000 fe83 	bl	800e644 <vPortExitCritical>

	return xReturn;
 800d93e:	69fb      	ldr	r3, [r7, #28]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	200007e0 	.word	0x200007e0
 800d94c:	200007f4 	.word	0x200007f4

0800d950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d950:	b480      	push	{r7}
 800d952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d954:	4b03      	ldr	r3, [pc, #12]	; (800d964 <vTaskMissedYield+0x14>)
 800d956:	2201      	movs	r2, #1
 800d958:	601a      	str	r2, [r3, #0]
}
 800d95a:	bf00      	nop
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	200007f0 	.word	0x200007f0

0800d968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d970:	f000 f852 	bl	800da18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d974:	4b06      	ldr	r3, [pc, #24]	; (800d990 <prvIdleTask+0x28>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d9f9      	bls.n	800d970 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d97c:	4b05      	ldr	r3, [pc, #20]	; (800d994 <prvIdleTask+0x2c>)
 800d97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d98c:	e7f0      	b.n	800d970 <prvIdleTask+0x8>
 800d98e:	bf00      	nop
 800d990:	200006e0 	.word	0x200006e0
 800d994:	e000ed04 	.word	0xe000ed04

0800d998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d99e:	2300      	movs	r3, #0
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	e00c      	b.n	800d9be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4a12      	ldr	r2, [pc, #72]	; (800d9f8 <prvInitialiseTaskLists+0x60>)
 800d9b0:	4413      	add	r3, r2
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe fb1e 	bl	800bff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	607b      	str	r3, [r7, #4]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b06      	cmp	r3, #6
 800d9c2:	d9ef      	bls.n	800d9a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9c4:	480d      	ldr	r0, [pc, #52]	; (800d9fc <prvInitialiseTaskLists+0x64>)
 800d9c6:	f7fe fb15 	bl	800bff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9ca:	480d      	ldr	r0, [pc, #52]	; (800da00 <prvInitialiseTaskLists+0x68>)
 800d9cc:	f7fe fb12 	bl	800bff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9d0:	480c      	ldr	r0, [pc, #48]	; (800da04 <prvInitialiseTaskLists+0x6c>)
 800d9d2:	f7fe fb0f 	bl	800bff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9d6:	480c      	ldr	r0, [pc, #48]	; (800da08 <prvInitialiseTaskLists+0x70>)
 800d9d8:	f7fe fb0c 	bl	800bff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9dc:	480b      	ldr	r0, [pc, #44]	; (800da0c <prvInitialiseTaskLists+0x74>)
 800d9de:	f7fe fb09 	bl	800bff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9e2:	4b0b      	ldr	r3, [pc, #44]	; (800da10 <prvInitialiseTaskLists+0x78>)
 800d9e4:	4a05      	ldr	r2, [pc, #20]	; (800d9fc <prvInitialiseTaskLists+0x64>)
 800d9e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <prvInitialiseTaskLists+0x7c>)
 800d9ea:	4a05      	ldr	r2, [pc, #20]	; (800da00 <prvInitialiseTaskLists+0x68>)
 800d9ec:	601a      	str	r2, [r3, #0]
}
 800d9ee:	bf00      	nop
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	200006e0 	.word	0x200006e0
 800d9fc:	2000076c 	.word	0x2000076c
 800da00:	20000780 	.word	0x20000780
 800da04:	2000079c 	.word	0x2000079c
 800da08:	200007b0 	.word	0x200007b0
 800da0c:	200007c8 	.word	0x200007c8
 800da10:	20000794 	.word	0x20000794
 800da14:	20000798 	.word	0x20000798

0800da18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da1e:	e019      	b.n	800da54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da20:	f000 fde0 	bl	800e5e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da24:	4b10      	ldr	r3, [pc, #64]	; (800da68 <prvCheckTasksWaitingTermination+0x50>)
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	3304      	adds	r3, #4
 800da30:	4618      	mov	r0, r3
 800da32:	f7fe fb69 	bl	800c108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da36:	4b0d      	ldr	r3, [pc, #52]	; (800da6c <prvCheckTasksWaitingTermination+0x54>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	4a0b      	ldr	r2, [pc, #44]	; (800da6c <prvCheckTasksWaitingTermination+0x54>)
 800da3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da40:	4b0b      	ldr	r3, [pc, #44]	; (800da70 <prvCheckTasksWaitingTermination+0x58>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3b01      	subs	r3, #1
 800da46:	4a0a      	ldr	r2, [pc, #40]	; (800da70 <prvCheckTasksWaitingTermination+0x58>)
 800da48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da4a:	f000 fdfb 	bl	800e644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 f810 	bl	800da74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da54:	4b06      	ldr	r3, [pc, #24]	; (800da70 <prvCheckTasksWaitingTermination+0x58>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e1      	bne.n	800da20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	200007b0 	.word	0x200007b0
 800da6c:	200007dc 	.word	0x200007dc
 800da70:	200007c4 	.word	0x200007c4

0800da74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da82:	2b00      	cmp	r3, #0
 800da84:	d108      	bne.n	800da98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da8a:	4618      	mov	r0, r3
 800da8c:	f000 ff98 	bl	800e9c0 <vPortFree>
				vPortFree( pxTCB );
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 ff95 	bl	800e9c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da96:	e018      	b.n	800daca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d103      	bne.n	800daaa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 ff8c 	bl	800e9c0 <vPortFree>
	}
 800daa8:	e00f      	b.n	800daca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dab0:	2b02      	cmp	r3, #2
 800dab2:	d00a      	beq.n	800daca <prvDeleteTCB+0x56>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	60fb      	str	r3, [r7, #12]
}
 800dac6:	bf00      	nop
 800dac8:	e7fe      	b.n	800dac8 <prvDeleteTCB+0x54>
	}
 800daca:	bf00      	nop
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dada:	4b0c      	ldr	r3, [pc, #48]	; (800db0c <prvResetNextTaskUnblockTime+0x38>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d104      	bne.n	800daee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dae4:	4b0a      	ldr	r3, [pc, #40]	; (800db10 <prvResetNextTaskUnblockTime+0x3c>)
 800dae6:	f04f 32ff 	mov.w	r2, #4294967295
 800daea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800daec:	e008      	b.n	800db00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daee:	4b07      	ldr	r3, [pc, #28]	; (800db0c <prvResetNextTaskUnblockTime+0x38>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	4a04      	ldr	r2, [pc, #16]	; (800db10 <prvResetNextTaskUnblockTime+0x3c>)
 800dafe:	6013      	str	r3, [r2, #0]
}
 800db00:	bf00      	nop
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr
 800db0c:	20000794 	.word	0x20000794
 800db10:	200007fc 	.word	0x200007fc

0800db14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db1a:	4b0b      	ldr	r3, [pc, #44]	; (800db48 <xTaskGetSchedulerState+0x34>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d102      	bne.n	800db28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db22:	2301      	movs	r3, #1
 800db24:	607b      	str	r3, [r7, #4]
 800db26:	e008      	b.n	800db3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db28:	4b08      	ldr	r3, [pc, #32]	; (800db4c <xTaskGetSchedulerState+0x38>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d102      	bne.n	800db36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db30:	2302      	movs	r3, #2
 800db32:	607b      	str	r3, [r7, #4]
 800db34:	e001      	b.n	800db3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db36:	2300      	movs	r3, #0
 800db38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db3a:	687b      	ldr	r3, [r7, #4]
	}
 800db3c:	4618      	mov	r0, r3
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	200007e8 	.word	0x200007e8
 800db4c:	20000804 	.word	0x20000804

0800db50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db5c:	2300      	movs	r3, #0
 800db5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d06e      	beq.n	800dc44 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db66:	4b3a      	ldr	r3, [pc, #232]	; (800dc50 <xTaskPriorityDisinherit+0x100>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	693a      	ldr	r2, [r7, #16]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d00a      	beq.n	800db86 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	60fb      	str	r3, [r7, #12]
}
 800db82:	bf00      	nop
 800db84:	e7fe      	b.n	800db84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10a      	bne.n	800dba4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	60bb      	str	r3, [r7, #8]
}
 800dba0:	bf00      	nop
 800dba2:	e7fe      	b.n	800dba2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dba8:	1e5a      	subs	r2, r3, #1
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d044      	beq.n	800dc44 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d140      	bne.n	800dc44 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	3304      	adds	r3, #4
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fe fa9e 	bl	800c108 <uxListRemove>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d115      	bne.n	800dbfe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd6:	491f      	ldr	r1, [pc, #124]	; (800dc54 <xTaskPriorityDisinherit+0x104>)
 800dbd8:	4613      	mov	r3, r2
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	4413      	add	r3, r2
 800dbde:	009b      	lsls	r3, r3, #2
 800dbe0:	440b      	add	r3, r1
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10a      	bne.n	800dbfe <xTaskPriorityDisinherit+0xae>
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	2201      	movs	r2, #1
 800dbee:	fa02 f303 	lsl.w	r3, r2, r3
 800dbf2:	43da      	mvns	r2, r3
 800dbf4:	4b18      	ldr	r3, [pc, #96]	; (800dc58 <xTaskPriorityDisinherit+0x108>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	4a17      	ldr	r2, [pc, #92]	; (800dc58 <xTaskPriorityDisinherit+0x108>)
 800dbfc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	f1c3 0207 	rsb	r2, r3, #7
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc16:	2201      	movs	r2, #1
 800dc18:	409a      	lsls	r2, r3
 800dc1a:	4b0f      	ldr	r3, [pc, #60]	; (800dc58 <xTaskPriorityDisinherit+0x108>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	4a0d      	ldr	r2, [pc, #52]	; (800dc58 <xTaskPriorityDisinherit+0x108>)
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc28:	4613      	mov	r3, r2
 800dc2a:	009b      	lsls	r3, r3, #2
 800dc2c:	4413      	add	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4a08      	ldr	r2, [pc, #32]	; (800dc54 <xTaskPriorityDisinherit+0x104>)
 800dc32:	441a      	add	r2, r3
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	3304      	adds	r3, #4
 800dc38:	4619      	mov	r1, r3
 800dc3a:	4610      	mov	r0, r2
 800dc3c:	f7fe fa07 	bl	800c04e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc40:	2301      	movs	r3, #1
 800dc42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc44:	697b      	ldr	r3, [r7, #20]
	}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	200006dc 	.word	0x200006dc
 800dc54:	200006e0 	.word	0x200006e0
 800dc58:	200007e4 	.word	0x200007e4

0800dc5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc66:	4b29      	ldr	r3, [pc, #164]	; (800dd0c <prvAddCurrentTaskToDelayedList+0xb0>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc6c:	4b28      	ldr	r3, [pc, #160]	; (800dd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	3304      	adds	r3, #4
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fe fa48 	bl	800c108 <uxListRemove>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10b      	bne.n	800dc96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dc7e:	4b24      	ldr	r3, [pc, #144]	; (800dd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc84:	2201      	movs	r2, #1
 800dc86:	fa02 f303 	lsl.w	r3, r2, r3
 800dc8a:	43da      	mvns	r2, r3
 800dc8c:	4b21      	ldr	r3, [pc, #132]	; (800dd14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4013      	ands	r3, r2
 800dc92:	4a20      	ldr	r2, [pc, #128]	; (800dd14 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc9c:	d10a      	bne.n	800dcb4 <prvAddCurrentTaskToDelayedList+0x58>
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dca4:	4b1a      	ldr	r3, [pc, #104]	; (800dd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3304      	adds	r3, #4
 800dcaa:	4619      	mov	r1, r3
 800dcac:	481a      	ldr	r0, [pc, #104]	; (800dd18 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dcae:	f7fe f9ce 	bl	800c04e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dcb2:	e026      	b.n	800dd02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4413      	add	r3, r2
 800dcba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dcbc:	4b14      	ldr	r3, [pc, #80]	; (800dd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d209      	bcs.n	800dce0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dccc:	4b13      	ldr	r3, [pc, #76]	; (800dd1c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	4b0f      	ldr	r3, [pc, #60]	; (800dd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4610      	mov	r0, r2
 800dcda:	f7fe f9dc 	bl	800c096 <vListInsert>
}
 800dcde:	e010      	b.n	800dd02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dce0:	4b0f      	ldr	r3, [pc, #60]	; (800dd20 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	4b0a      	ldr	r3, [pc, #40]	; (800dd10 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3304      	adds	r3, #4
 800dcea:	4619      	mov	r1, r3
 800dcec:	4610      	mov	r0, r2
 800dcee:	f7fe f9d2 	bl	800c096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dcf2:	4b0c      	ldr	r3, [pc, #48]	; (800dd24 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d202      	bcs.n	800dd02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dcfc:	4a09      	ldr	r2, [pc, #36]	; (800dd24 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	6013      	str	r3, [r2, #0]
}
 800dd02:	bf00      	nop
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	200007e0 	.word	0x200007e0
 800dd10:	200006dc 	.word	0x200006dc
 800dd14:	200007e4 	.word	0x200007e4
 800dd18:	200007c8 	.word	0x200007c8
 800dd1c:	20000798 	.word	0x20000798
 800dd20:	20000794 	.word	0x20000794
 800dd24:	200007fc 	.word	0x200007fc

0800dd28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dd32:	f000 faeb 	bl	800e30c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dd36:	4b1c      	ldr	r3, [pc, #112]	; (800dda8 <xTimerCreateTimerTask+0x80>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d021      	beq.n	800dd82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd42:	2300      	movs	r3, #0
 800dd44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd46:	1d3a      	adds	r2, r7, #4
 800dd48:	f107 0108 	add.w	r1, r7, #8
 800dd4c:	f107 030c 	add.w	r3, r7, #12
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7f8 f84d 	bl	8005df0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd56:	6879      	ldr	r1, [r7, #4]
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	9202      	str	r2, [sp, #8]
 800dd5e:	9301      	str	r3, [sp, #4]
 800dd60:	2306      	movs	r3, #6
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	2300      	movs	r3, #0
 800dd66:	460a      	mov	r2, r1
 800dd68:	4910      	ldr	r1, [pc, #64]	; (800ddac <xTimerCreateTimerTask+0x84>)
 800dd6a:	4811      	ldr	r0, [pc, #68]	; (800ddb0 <xTimerCreateTimerTask+0x88>)
 800dd6c:	f7fe ff18 	bl	800cba0 <xTaskCreateStatic>
 800dd70:	4603      	mov	r3, r0
 800dd72:	4a10      	ldr	r2, [pc, #64]	; (800ddb4 <xTimerCreateTimerTask+0x8c>)
 800dd74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd76:	4b0f      	ldr	r3, [pc, #60]	; (800ddb4 <xTimerCreateTimerTask+0x8c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d10a      	bne.n	800dd9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd8c:	f383 8811 	msr	BASEPRI, r3
 800dd90:	f3bf 8f6f 	isb	sy
 800dd94:	f3bf 8f4f 	dsb	sy
 800dd98:	613b      	str	r3, [r7, #16]
}
 800dd9a:	bf00      	nop
 800dd9c:	e7fe      	b.n	800dd9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd9e:	697b      	ldr	r3, [r7, #20]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	20000838 	.word	0x20000838
 800ddac:	0800edf8 	.word	0x0800edf8
 800ddb0:	0800deed 	.word	0x0800deed
 800ddb4:	2000083c 	.word	0x2000083c

0800ddb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10a      	bne.n	800dde6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ddd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd4:	f383 8811 	msr	BASEPRI, r3
 800ddd8:	f3bf 8f6f 	isb	sy
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	623b      	str	r3, [r7, #32]
}
 800dde2:	bf00      	nop
 800dde4:	e7fe      	b.n	800dde4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dde6:	4b1a      	ldr	r3, [pc, #104]	; (800de50 <xTimerGenericCommand+0x98>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d02a      	beq.n	800de44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b05      	cmp	r3, #5
 800ddfe:	dc18      	bgt.n	800de32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de00:	f7ff fe88 	bl	800db14 <xTaskGetSchedulerState>
 800de04:	4603      	mov	r3, r0
 800de06:	2b02      	cmp	r3, #2
 800de08:	d109      	bne.n	800de1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de0a:	4b11      	ldr	r3, [pc, #68]	; (800de50 <xTimerGenericCommand+0x98>)
 800de0c:	6818      	ldr	r0, [r3, #0]
 800de0e:	f107 0114 	add.w	r1, r7, #20
 800de12:	2300      	movs	r3, #0
 800de14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de16:	f7fe fadb 	bl	800c3d0 <xQueueGenericSend>
 800de1a:	6278      	str	r0, [r7, #36]	; 0x24
 800de1c:	e012      	b.n	800de44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de1e:	4b0c      	ldr	r3, [pc, #48]	; (800de50 <xTimerGenericCommand+0x98>)
 800de20:	6818      	ldr	r0, [r3, #0]
 800de22:	f107 0114 	add.w	r1, r7, #20
 800de26:	2300      	movs	r3, #0
 800de28:	2200      	movs	r2, #0
 800de2a:	f7fe fad1 	bl	800c3d0 <xQueueGenericSend>
 800de2e:	6278      	str	r0, [r7, #36]	; 0x24
 800de30:	e008      	b.n	800de44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de32:	4b07      	ldr	r3, [pc, #28]	; (800de50 <xTimerGenericCommand+0x98>)
 800de34:	6818      	ldr	r0, [r3, #0]
 800de36:	f107 0114 	add.w	r1, r7, #20
 800de3a:	2300      	movs	r3, #0
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	f7fe fbc5 	bl	800c5cc <xQueueGenericSendFromISR>
 800de42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de46:	4618      	mov	r0, r3
 800de48:	3728      	adds	r7, #40	; 0x28
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	20000838 	.word	0x20000838

0800de54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b088      	sub	sp, #32
 800de58:	af02      	add	r7, sp, #8
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de5e:	4b22      	ldr	r3, [pc, #136]	; (800dee8 <prvProcessExpiredTimer+0x94>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	68db      	ldr	r3, [r3, #12]
 800de66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	3304      	adds	r3, #4
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fe f94b 	bl	800c108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de78:	f003 0304 	and.w	r3, r3, #4
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d022      	beq.n	800dec6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	699a      	ldr	r2, [r3, #24]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	18d1      	adds	r1, r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	683a      	ldr	r2, [r7, #0]
 800de8c:	6978      	ldr	r0, [r7, #20]
 800de8e:	f000 f8d1 	bl	800e034 <prvInsertTimerInActiveList>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01f      	beq.n	800ded8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de98:	2300      	movs	r3, #0
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	2300      	movs	r3, #0
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	2100      	movs	r1, #0
 800dea2:	6978      	ldr	r0, [r7, #20]
 800dea4:	f7ff ff88 	bl	800ddb8 <xTimerGenericCommand>
 800dea8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d113      	bne.n	800ded8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800deb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deb4:	f383 8811 	msr	BASEPRI, r3
 800deb8:	f3bf 8f6f 	isb	sy
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	60fb      	str	r3, [r7, #12]
}
 800dec2:	bf00      	nop
 800dec4:	e7fe      	b.n	800dec4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800decc:	f023 0301 	bic.w	r3, r3, #1
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	6a1b      	ldr	r3, [r3, #32]
 800dedc:	6978      	ldr	r0, [r7, #20]
 800dede:	4798      	blx	r3
}
 800dee0:	bf00      	nop
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	20000830 	.word	0x20000830

0800deec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800def4:	f107 0308 	add.w	r3, r7, #8
 800def8:	4618      	mov	r0, r3
 800defa:	f000 f857 	bl	800dfac <prvGetNextExpireTime>
 800defe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	4619      	mov	r1, r3
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 f803 	bl	800df10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df0a:	f000 f8d5 	bl	800e0b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df0e:	e7f1      	b.n	800def4 <prvTimerTask+0x8>

0800df10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df1a:	f7ff fa21 	bl	800d360 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df1e:	f107 0308 	add.w	r3, r7, #8
 800df22:	4618      	mov	r0, r3
 800df24:	f000 f866 	bl	800dff4 <prvSampleTimeNow>
 800df28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d130      	bne.n	800df92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d10a      	bne.n	800df4c <prvProcessTimerOrBlockTask+0x3c>
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d806      	bhi.n	800df4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df3e:	f7ff fa1d 	bl	800d37c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df42:	68f9      	ldr	r1, [r7, #12]
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f7ff ff85 	bl	800de54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df4a:	e024      	b.n	800df96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d008      	beq.n	800df64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df52:	4b13      	ldr	r3, [pc, #76]	; (800dfa0 <prvProcessTimerOrBlockTask+0x90>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <prvProcessTimerOrBlockTask+0x50>
 800df5c:	2301      	movs	r3, #1
 800df5e:	e000      	b.n	800df62 <prvProcessTimerOrBlockTask+0x52>
 800df60:	2300      	movs	r3, #0
 800df62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df64:	4b0f      	ldr	r3, [pc, #60]	; (800dfa4 <prvProcessTimerOrBlockTask+0x94>)
 800df66:	6818      	ldr	r0, [r3, #0]
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	1ad3      	subs	r3, r2, r3
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	4619      	mov	r1, r3
 800df72:	f7fe fde1 	bl	800cb38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df76:	f7ff fa01 	bl	800d37c <xTaskResumeAll>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10a      	bne.n	800df96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df80:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <prvProcessTimerOrBlockTask+0x98>)
 800df82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	f3bf 8f6f 	isb	sy
}
 800df90:	e001      	b.n	800df96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df92:	f7ff f9f3 	bl	800d37c <xTaskResumeAll>
}
 800df96:	bf00      	nop
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	20000834 	.word	0x20000834
 800dfa4:	20000838 	.word	0x20000838
 800dfa8:	e000ed04 	.word	0xe000ed04

0800dfac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dfb4:	4b0e      	ldr	r3, [pc, #56]	; (800dff0 <prvGetNextExpireTime+0x44>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <prvGetNextExpireTime+0x16>
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	e000      	b.n	800dfc4 <prvGetNextExpireTime+0x18>
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d105      	bne.n	800dfdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfd0:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <prvGetNextExpireTime+0x44>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	60fb      	str	r3, [r7, #12]
 800dfda:	e001      	b.n	800dfe0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	20000830 	.word	0x20000830

0800dff4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dffc:	f7ff fa5a 	bl	800d4b4 <xTaskGetTickCount>
 800e000:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e002:	4b0b      	ldr	r3, [pc, #44]	; (800e030 <prvSampleTimeNow+0x3c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d205      	bcs.n	800e018 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e00c:	f000 f91a 	bl	800e244 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	601a      	str	r2, [r3, #0]
 800e016:	e002      	b.n	800e01e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e01e:	4a04      	ldr	r2, [pc, #16]	; (800e030 <prvSampleTimeNow+0x3c>)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e024:	68fb      	ldr	r3, [r7, #12]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	20000840 	.word	0x20000840

0800e034 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
 800e040:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e042:	2300      	movs	r3, #0
 800e044:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	68fa      	ldr	r2, [r7, #12]
 800e050:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	429a      	cmp	r2, r3
 800e058:	d812      	bhi.n	800e080 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	1ad2      	subs	r2, r2, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	429a      	cmp	r2, r3
 800e066:	d302      	bcc.n	800e06e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e068:	2301      	movs	r3, #1
 800e06a:	617b      	str	r3, [r7, #20]
 800e06c:	e01b      	b.n	800e0a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e06e:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <prvInsertTimerInActiveList+0x7c>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3304      	adds	r3, #4
 800e076:	4619      	mov	r1, r3
 800e078:	4610      	mov	r0, r2
 800e07a:	f7fe f80c 	bl	800c096 <vListInsert>
 800e07e:	e012      	b.n	800e0a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	429a      	cmp	r2, r3
 800e086:	d206      	bcs.n	800e096 <prvInsertTimerInActiveList+0x62>
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d302      	bcc.n	800e096 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e090:	2301      	movs	r3, #1
 800e092:	617b      	str	r3, [r7, #20]
 800e094:	e007      	b.n	800e0a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e096:	4b07      	ldr	r3, [pc, #28]	; (800e0b4 <prvInsertTimerInActiveList+0x80>)
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4619      	mov	r1, r3
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	f7fd fff8 	bl	800c096 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e0a6:	697b      	ldr	r3, [r7, #20]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	20000834 	.word	0x20000834
 800e0b4:	20000830 	.word	0x20000830

0800e0b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b08c      	sub	sp, #48	; 0x30
 800e0bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0be:	e0ae      	b.n	800e21e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f2c0 80aa 	blt.w	800e21c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fe f815 	bl	800c108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0de:	1d3b      	adds	r3, r7, #4
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff ff87 	bl	800dff4 <prvSampleTimeNow>
 800e0e6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	2b09      	cmp	r3, #9
 800e0ec:	f200 8097 	bhi.w	800e21e <prvProcessReceivedCommands+0x166>
 800e0f0:	a201      	add	r2, pc, #4	; (adr r2, 800e0f8 <prvProcessReceivedCommands+0x40>)
 800e0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f6:	bf00      	nop
 800e0f8:	0800e121 	.word	0x0800e121
 800e0fc:	0800e121 	.word	0x0800e121
 800e100:	0800e121 	.word	0x0800e121
 800e104:	0800e195 	.word	0x0800e195
 800e108:	0800e1a9 	.word	0x0800e1a9
 800e10c:	0800e1f3 	.word	0x0800e1f3
 800e110:	0800e121 	.word	0x0800e121
 800e114:	0800e121 	.word	0x0800e121
 800e118:	0800e195 	.word	0x0800e195
 800e11c:	0800e1a9 	.word	0x0800e1a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e126:	f043 0301 	orr.w	r3, r3, #1
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e132:	68fa      	ldr	r2, [r7, #12]
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	18d1      	adds	r1, r2, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6a3a      	ldr	r2, [r7, #32]
 800e13e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e140:	f7ff ff78 	bl	800e034 <prvInsertTimerInActiveList>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d069      	beq.n	800e21e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	6a1b      	ldr	r3, [r3, #32]
 800e14e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e158:	f003 0304 	and.w	r3, r3, #4
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d05e      	beq.n	800e21e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e164:	699b      	ldr	r3, [r3, #24]
 800e166:	441a      	add	r2, r3
 800e168:	2300      	movs	r3, #0
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	2300      	movs	r3, #0
 800e16e:	2100      	movs	r1, #0
 800e170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e172:	f7ff fe21 	bl	800ddb8 <xTimerGenericCommand>
 800e176:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d14f      	bne.n	800e21e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e182:	f383 8811 	msr	BASEPRI, r3
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	f3bf 8f4f 	dsb	sy
 800e18e:	61bb      	str	r3, [r7, #24]
}
 800e190:	bf00      	nop
 800e192:	e7fe      	b.n	800e192 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e196:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e19a:	f023 0301 	bic.w	r3, r3, #1
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e1a6:	e03a      	b.n	800e21e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1ae:	f043 0301 	orr.w	r3, r3, #1
 800e1b2:	b2da      	uxtb	r2, r3
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c2:	699b      	ldr	r3, [r3, #24]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10a      	bne.n	800e1de <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	617b      	str	r3, [r7, #20]
}
 800e1da:	bf00      	nop
 800e1dc:	e7fe      	b.n	800e1dc <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e0:	699a      	ldr	r2, [r3, #24]
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	18d1      	adds	r1, r2, r3
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	6a3a      	ldr	r2, [r7, #32]
 800e1ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ec:	f7ff ff22 	bl	800e034 <prvInsertTimerInActiveList>
					break;
 800e1f0:	e015      	b.n	800e21e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1f8:	f003 0302 	and.w	r3, r3, #2
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d103      	bne.n	800e208 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e202:	f000 fbdd 	bl	800e9c0 <vPortFree>
 800e206:	e00a      	b.n	800e21e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e20e:	f023 0301 	bic.w	r3, r3, #1
 800e212:	b2da      	uxtb	r2, r3
 800e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e21a:	e000      	b.n	800e21e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e21c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e21e:	4b08      	ldr	r3, [pc, #32]	; (800e240 <prvProcessReceivedCommands+0x188>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f107 0108 	add.w	r1, r7, #8
 800e226:	2200      	movs	r2, #0
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fe fa6b 	bl	800c704 <xQueueReceive>
 800e22e:	4603      	mov	r3, r0
 800e230:	2b00      	cmp	r3, #0
 800e232:	f47f af45 	bne.w	800e0c0 <prvProcessReceivedCommands+0x8>
	}
}
 800e236:	bf00      	nop
 800e238:	bf00      	nop
 800e23a:	3728      	adds	r7, #40	; 0x28
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	20000838 	.word	0x20000838

0800e244 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b088      	sub	sp, #32
 800e248:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e24a:	e048      	b.n	800e2de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e24c:	4b2d      	ldr	r3, [pc, #180]	; (800e304 <prvSwitchTimerLists+0xc0>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e256:	4b2b      	ldr	r3, [pc, #172]	; (800e304 <prvSwitchTimerLists+0xc0>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	3304      	adds	r3, #4
 800e264:	4618      	mov	r0, r3
 800e266:	f7fd ff4f 	bl	800c108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6a1b      	ldr	r3, [r3, #32]
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e278:	f003 0304 	and.w	r3, r3, #4
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d02e      	beq.n	800e2de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	699b      	ldr	r3, [r3, #24]
 800e284:	693a      	ldr	r2, [r7, #16]
 800e286:	4413      	add	r3, r2
 800e288:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d90e      	bls.n	800e2b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e29e:	4b19      	ldr	r3, [pc, #100]	; (800e304 <prvSwitchTimerLists+0xc0>)
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	f7fd fef4 	bl	800c096 <vListInsert>
 800e2ae:	e016      	b.n	800e2de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	693a      	ldr	r2, [r7, #16]
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	68f8      	ldr	r0, [r7, #12]
 800e2bc:	f7ff fd7c 	bl	800ddb8 <xTimerGenericCommand>
 800e2c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	603b      	str	r3, [r7, #0]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2de:	4b09      	ldr	r3, [pc, #36]	; (800e304 <prvSwitchTimerLists+0xc0>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1b1      	bne.n	800e24c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2e8:	4b06      	ldr	r3, [pc, #24]	; (800e304 <prvSwitchTimerLists+0xc0>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2ee:	4b06      	ldr	r3, [pc, #24]	; (800e308 <prvSwitchTimerLists+0xc4>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a04      	ldr	r2, [pc, #16]	; (800e304 <prvSwitchTimerLists+0xc0>)
 800e2f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2f6:	4a04      	ldr	r2, [pc, #16]	; (800e308 <prvSwitchTimerLists+0xc4>)
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	6013      	str	r3, [r2, #0]
}
 800e2fc:	bf00      	nop
 800e2fe:	3718      	adds	r7, #24
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	20000830 	.word	0x20000830
 800e308:	20000834 	.word	0x20000834

0800e30c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e312:	f000 f967 	bl	800e5e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e316:	4b15      	ldr	r3, [pc, #84]	; (800e36c <prvCheckForValidListAndQueue+0x60>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d120      	bne.n	800e360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e31e:	4814      	ldr	r0, [pc, #80]	; (800e370 <prvCheckForValidListAndQueue+0x64>)
 800e320:	f7fd fe68 	bl	800bff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e324:	4813      	ldr	r0, [pc, #76]	; (800e374 <prvCheckForValidListAndQueue+0x68>)
 800e326:	f7fd fe65 	bl	800bff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e32a:	4b13      	ldr	r3, [pc, #76]	; (800e378 <prvCheckForValidListAndQueue+0x6c>)
 800e32c:	4a10      	ldr	r2, [pc, #64]	; (800e370 <prvCheckForValidListAndQueue+0x64>)
 800e32e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e330:	4b12      	ldr	r3, [pc, #72]	; (800e37c <prvCheckForValidListAndQueue+0x70>)
 800e332:	4a10      	ldr	r2, [pc, #64]	; (800e374 <prvCheckForValidListAndQueue+0x68>)
 800e334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e336:	2300      	movs	r3, #0
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	4b11      	ldr	r3, [pc, #68]	; (800e380 <prvCheckForValidListAndQueue+0x74>)
 800e33c:	4a11      	ldr	r2, [pc, #68]	; (800e384 <prvCheckForValidListAndQueue+0x78>)
 800e33e:	210c      	movs	r1, #12
 800e340:	200a      	movs	r0, #10
 800e342:	f7fd ff73 	bl	800c22c <xQueueGenericCreateStatic>
 800e346:	4603      	mov	r3, r0
 800e348:	4a08      	ldr	r2, [pc, #32]	; (800e36c <prvCheckForValidListAndQueue+0x60>)
 800e34a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e34c:	4b07      	ldr	r3, [pc, #28]	; (800e36c <prvCheckForValidListAndQueue+0x60>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d005      	beq.n	800e360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e354:	4b05      	ldr	r3, [pc, #20]	; (800e36c <prvCheckForValidListAndQueue+0x60>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	490b      	ldr	r1, [pc, #44]	; (800e388 <prvCheckForValidListAndQueue+0x7c>)
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe fbc2 	bl	800cae4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e360:	f000 f970 	bl	800e644 <vPortExitCritical>
}
 800e364:	bf00      	nop
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20000838 	.word	0x20000838
 800e370:	20000808 	.word	0x20000808
 800e374:	2000081c 	.word	0x2000081c
 800e378:	20000830 	.word	0x20000830
 800e37c:	20000834 	.word	0x20000834
 800e380:	200008bc 	.word	0x200008bc
 800e384:	20000844 	.word	0x20000844
 800e388:	0800ee00 	.word	0x0800ee00

0800e38c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	60b9      	str	r1, [r7, #8]
 800e396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3b04      	subs	r3, #4
 800e39c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3b04      	subs	r3, #4
 800e3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	f023 0201 	bic.w	r2, r3, #1
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3b04      	subs	r3, #4
 800e3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3bc:	4a0c      	ldr	r2, [pc, #48]	; (800e3f0 <pxPortInitialiseStack+0x64>)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	3b14      	subs	r3, #20
 800e3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	3b04      	subs	r3, #4
 800e3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f06f 0202 	mvn.w	r2, #2
 800e3da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3b20      	subs	r3, #32
 800e3e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3714      	adds	r7, #20
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	0800e3f5 	.word	0x0800e3f5

0800e3f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3fe:	4b12      	ldr	r3, [pc, #72]	; (800e448 <prvTaskExitError+0x54>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e406:	d00a      	beq.n	800e41e <prvTaskExitError+0x2a>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40c:	f383 8811 	msr	BASEPRI, r3
 800e410:	f3bf 8f6f 	isb	sy
 800e414:	f3bf 8f4f 	dsb	sy
 800e418:	60fb      	str	r3, [r7, #12]
}
 800e41a:	bf00      	nop
 800e41c:	e7fe      	b.n	800e41c <prvTaskExitError+0x28>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	60bb      	str	r3, [r7, #8]
}
 800e430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e432:	bf00      	nop
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d0fc      	beq.n	800e434 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	3714      	adds	r7, #20
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	2000000c 	.word	0x2000000c
 800e44c:	00000000 	.word	0x00000000

0800e450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e450:	4b07      	ldr	r3, [pc, #28]	; (800e470 <pxCurrentTCBConst2>)
 800e452:	6819      	ldr	r1, [r3, #0]
 800e454:	6808      	ldr	r0, [r1, #0]
 800e456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45a:	f380 8809 	msr	PSP, r0
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f04f 0000 	mov.w	r0, #0
 800e466:	f380 8811 	msr	BASEPRI, r0
 800e46a:	4770      	bx	lr
 800e46c:	f3af 8000 	nop.w

0800e470 <pxCurrentTCBConst2>:
 800e470:	200006dc 	.word	0x200006dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e474:	bf00      	nop
 800e476:	bf00      	nop

0800e478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e478:	4808      	ldr	r0, [pc, #32]	; (800e49c <prvPortStartFirstTask+0x24>)
 800e47a:	6800      	ldr	r0, [r0, #0]
 800e47c:	6800      	ldr	r0, [r0, #0]
 800e47e:	f380 8808 	msr	MSP, r0
 800e482:	f04f 0000 	mov.w	r0, #0
 800e486:	f380 8814 	msr	CONTROL, r0
 800e48a:	b662      	cpsie	i
 800e48c:	b661      	cpsie	f
 800e48e:	f3bf 8f4f 	dsb	sy
 800e492:	f3bf 8f6f 	isb	sy
 800e496:	df00      	svc	0
 800e498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e49a:	bf00      	nop
 800e49c:	e000ed08 	.word	0xe000ed08

0800e4a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e4a6:	4b46      	ldr	r3, [pc, #280]	; (800e5c0 <xPortStartScheduler+0x120>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4a46      	ldr	r2, [pc, #280]	; (800e5c4 <xPortStartScheduler+0x124>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d10a      	bne.n	800e4c6 <xPortStartScheduler+0x26>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	f383 8811 	msr	BASEPRI, r3
 800e4b8:	f3bf 8f6f 	isb	sy
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	613b      	str	r3, [r7, #16]
}
 800e4c2:	bf00      	nop
 800e4c4:	e7fe      	b.n	800e4c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4c6:	4b3e      	ldr	r3, [pc, #248]	; (800e5c0 <xPortStartScheduler+0x120>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a3f      	ldr	r2, [pc, #252]	; (800e5c8 <xPortStartScheduler+0x128>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d10a      	bne.n	800e4e6 <xPortStartScheduler+0x46>
	__asm volatile
 800e4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d4:	f383 8811 	msr	BASEPRI, r3
 800e4d8:	f3bf 8f6f 	isb	sy
 800e4dc:	f3bf 8f4f 	dsb	sy
 800e4e0:	60fb      	str	r3, [r7, #12]
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4e6:	4b39      	ldr	r3, [pc, #228]	; (800e5cc <xPortStartScheduler+0x12c>)
 800e4e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	22ff      	movs	r2, #255	; 0xff
 800e4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	b2db      	uxtb	r3, r3
 800e504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	4b31      	ldr	r3, [pc, #196]	; (800e5d0 <xPortStartScheduler+0x130>)
 800e50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e50e:	4b31      	ldr	r3, [pc, #196]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e510:	2207      	movs	r2, #7
 800e512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e514:	e009      	b.n	800e52a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e516:	4b2f      	ldr	r3, [pc, #188]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	4a2d      	ldr	r2, [pc, #180]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e520:	78fb      	ldrb	r3, [r7, #3]
 800e522:	b2db      	uxtb	r3, r3
 800e524:	005b      	lsls	r3, r3, #1
 800e526:	b2db      	uxtb	r3, r3
 800e528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e52a:	78fb      	ldrb	r3, [r7, #3]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e532:	2b80      	cmp	r3, #128	; 0x80
 800e534:	d0ef      	beq.n	800e516 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e536:	4b27      	ldr	r3, [pc, #156]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f1c3 0307 	rsb	r3, r3, #7
 800e53e:	2b04      	cmp	r3, #4
 800e540:	d00a      	beq.n	800e558 <xPortStartScheduler+0xb8>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	60bb      	str	r3, [r7, #8]
}
 800e554:	bf00      	nop
 800e556:	e7fe      	b.n	800e556 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e558:	4b1e      	ldr	r3, [pc, #120]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	021b      	lsls	r3, r3, #8
 800e55e:	4a1d      	ldr	r2, [pc, #116]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e560:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e562:	4b1c      	ldr	r3, [pc, #112]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e56a:	4a1a      	ldr	r2, [pc, #104]	; (800e5d4 <xPortStartScheduler+0x134>)
 800e56c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	b2da      	uxtb	r2, r3
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e576:	4b18      	ldr	r3, [pc, #96]	; (800e5d8 <xPortStartScheduler+0x138>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a17      	ldr	r2, [pc, #92]	; (800e5d8 <xPortStartScheduler+0x138>)
 800e57c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e582:	4b15      	ldr	r3, [pc, #84]	; (800e5d8 <xPortStartScheduler+0x138>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a14      	ldr	r2, [pc, #80]	; (800e5d8 <xPortStartScheduler+0x138>)
 800e588:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e58c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e58e:	f000 f8dd 	bl	800e74c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e592:	4b12      	ldr	r3, [pc, #72]	; (800e5dc <xPortStartScheduler+0x13c>)
 800e594:	2200      	movs	r2, #0
 800e596:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e598:	f000 f8fc 	bl	800e794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e59c:	4b10      	ldr	r3, [pc, #64]	; (800e5e0 <xPortStartScheduler+0x140>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a0f      	ldr	r2, [pc, #60]	; (800e5e0 <xPortStartScheduler+0x140>)
 800e5a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e5a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5a8:	f7ff ff66 	bl	800e478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5ac:	f7ff f84a 	bl	800d644 <vTaskSwitchContext>
	prvTaskExitError();
 800e5b0:	f7ff ff20 	bl	800e3f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3718      	adds	r7, #24
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	e000ed00 	.word	0xe000ed00
 800e5c4:	410fc271 	.word	0x410fc271
 800e5c8:	410fc270 	.word	0x410fc270
 800e5cc:	e000e400 	.word	0xe000e400
 800e5d0:	20000904 	.word	0x20000904
 800e5d4:	20000908 	.word	0x20000908
 800e5d8:	e000ed20 	.word	0xe000ed20
 800e5dc:	2000000c 	.word	0x2000000c
 800e5e0:	e000ef34 	.word	0xe000ef34

0800e5e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	607b      	str	r3, [r7, #4]
}
 800e5fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5fe:	4b0f      	ldr	r3, [pc, #60]	; (800e63c <vPortEnterCritical+0x58>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	4a0d      	ldr	r2, [pc, #52]	; (800e63c <vPortEnterCritical+0x58>)
 800e606:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e608:	4b0c      	ldr	r3, [pc, #48]	; (800e63c <vPortEnterCritical+0x58>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d10f      	bne.n	800e630 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e610:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <vPortEnterCritical+0x5c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00a      	beq.n	800e630 <vPortEnterCritical+0x4c>
	__asm volatile
 800e61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	603b      	str	r3, [r7, #0]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <vPortEnterCritical+0x4a>
	}
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr
 800e63c:	2000000c 	.word	0x2000000c
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e64a:	4b12      	ldr	r3, [pc, #72]	; (800e694 <vPortExitCritical+0x50>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10a      	bne.n	800e668 <vPortExitCritical+0x24>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	607b      	str	r3, [r7, #4]
}
 800e664:	bf00      	nop
 800e666:	e7fe      	b.n	800e666 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e668:	4b0a      	ldr	r3, [pc, #40]	; (800e694 <vPortExitCritical+0x50>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3b01      	subs	r3, #1
 800e66e:	4a09      	ldr	r2, [pc, #36]	; (800e694 <vPortExitCritical+0x50>)
 800e670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e672:	4b08      	ldr	r3, [pc, #32]	; (800e694 <vPortExitCritical+0x50>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d105      	bne.n	800e686 <vPortExitCritical+0x42>
 800e67a:	2300      	movs	r3, #0
 800e67c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	f383 8811 	msr	BASEPRI, r3
}
 800e684:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e686:	bf00      	nop
 800e688:	370c      	adds	r7, #12
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr
 800e692:	bf00      	nop
 800e694:	2000000c 	.word	0x2000000c
	...

0800e6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6a0:	f3ef 8009 	mrs	r0, PSP
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	4b15      	ldr	r3, [pc, #84]	; (800e700 <pxCurrentTCBConst>)
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	f01e 0f10 	tst.w	lr, #16
 800e6b0:	bf08      	it	eq
 800e6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ba:	6010      	str	r0, [r2, #0]
 800e6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6c4:	f380 8811 	msr	BASEPRI, r0
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	f7fe ffb8 	bl	800d644 <vTaskSwitchContext>
 800e6d4:	f04f 0000 	mov.w	r0, #0
 800e6d8:	f380 8811 	msr	BASEPRI, r0
 800e6dc:	bc09      	pop	{r0, r3}
 800e6de:	6819      	ldr	r1, [r3, #0]
 800e6e0:	6808      	ldr	r0, [r1, #0]
 800e6e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e6:	f01e 0f10 	tst.w	lr, #16
 800e6ea:	bf08      	it	eq
 800e6ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6f0:	f380 8809 	msr	PSP, r0
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	f3af 8000 	nop.w

0800e700 <pxCurrentTCBConst>:
 800e700:	200006dc 	.word	0x200006dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e704:	bf00      	nop
 800e706:	bf00      	nop

0800e708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	607b      	str	r3, [r7, #4]
}
 800e720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e722:	f7fe fed7 	bl	800d4d4 <xTaskIncrementTick>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d003      	beq.n	800e734 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e72c:	4b06      	ldr	r3, [pc, #24]	; (800e748 <SysTick_Handler+0x40>)
 800e72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	2300      	movs	r3, #0
 800e736:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	f383 8811 	msr	BASEPRI, r3
}
 800e73e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e740:	bf00      	nop
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	e000ed04 	.word	0xe000ed04

0800e74c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e74c:	b480      	push	{r7}
 800e74e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e750:	4b0b      	ldr	r3, [pc, #44]	; (800e780 <vPortSetupTimerInterrupt+0x34>)
 800e752:	2200      	movs	r2, #0
 800e754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e756:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <vPortSetupTimerInterrupt+0x38>)
 800e758:	2200      	movs	r2, #0
 800e75a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e75c:	4b0a      	ldr	r3, [pc, #40]	; (800e788 <vPortSetupTimerInterrupt+0x3c>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a0a      	ldr	r2, [pc, #40]	; (800e78c <vPortSetupTimerInterrupt+0x40>)
 800e762:	fba2 2303 	umull	r2, r3, r2, r3
 800e766:	099b      	lsrs	r3, r3, #6
 800e768:	4a09      	ldr	r2, [pc, #36]	; (800e790 <vPortSetupTimerInterrupt+0x44>)
 800e76a:	3b01      	subs	r3, #1
 800e76c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e76e:	4b04      	ldr	r3, [pc, #16]	; (800e780 <vPortSetupTimerInterrupt+0x34>)
 800e770:	2207      	movs	r2, #7
 800e772:	601a      	str	r2, [r3, #0]
}
 800e774:	bf00      	nop
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	e000e010 	.word	0xe000e010
 800e784:	e000e018 	.word	0xe000e018
 800e788:	20000000 	.word	0x20000000
 800e78c:	10624dd3 	.word	0x10624dd3
 800e790:	e000e014 	.word	0xe000e014

0800e794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e794:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7a4 <vPortEnableVFP+0x10>
 800e798:	6801      	ldr	r1, [r0, #0]
 800e79a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e79e:	6001      	str	r1, [r0, #0]
 800e7a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7a2:	bf00      	nop
 800e7a4:	e000ed88 	.word	0xe000ed88

0800e7a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7ae:	f3ef 8305 	mrs	r3, IPSR
 800e7b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2b0f      	cmp	r3, #15
 800e7b8:	d914      	bls.n	800e7e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7ba:	4a17      	ldr	r2, [pc, #92]	; (800e818 <vPortValidateInterruptPriority+0x70>)
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	4413      	add	r3, r2
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7c4:	4b15      	ldr	r3, [pc, #84]	; (800e81c <vPortValidateInterruptPriority+0x74>)
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	7afa      	ldrb	r2, [r7, #11]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d20a      	bcs.n	800e7e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d2:	f383 8811 	msr	BASEPRI, r3
 800e7d6:	f3bf 8f6f 	isb	sy
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	607b      	str	r3, [r7, #4]
}
 800e7e0:	bf00      	nop
 800e7e2:	e7fe      	b.n	800e7e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7e4:	4b0e      	ldr	r3, [pc, #56]	; (800e820 <vPortValidateInterruptPriority+0x78>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7ec:	4b0d      	ldr	r3, [pc, #52]	; (800e824 <vPortValidateInterruptPriority+0x7c>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d90a      	bls.n	800e80a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f8:	f383 8811 	msr	BASEPRI, r3
 800e7fc:	f3bf 8f6f 	isb	sy
 800e800:	f3bf 8f4f 	dsb	sy
 800e804:	603b      	str	r3, [r7, #0]
}
 800e806:	bf00      	nop
 800e808:	e7fe      	b.n	800e808 <vPortValidateInterruptPriority+0x60>
	}
 800e80a:	bf00      	nop
 800e80c:	3714      	adds	r7, #20
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	e000e3f0 	.word	0xe000e3f0
 800e81c:	20000904 	.word	0x20000904
 800e820:	e000ed0c 	.word	0xe000ed0c
 800e824:	20000908 	.word	0x20000908

0800e828 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b08a      	sub	sp, #40	; 0x28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e830:	2300      	movs	r3, #0
 800e832:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e834:	f7fe fd94 	bl	800d360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e838:	4b5b      	ldr	r3, [pc, #364]	; (800e9a8 <pvPortMalloc+0x180>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e840:	f000 f920 	bl	800ea84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e844:	4b59      	ldr	r3, [pc, #356]	; (800e9ac <pvPortMalloc+0x184>)
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4013      	ands	r3, r2
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f040 8093 	bne.w	800e978 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d01d      	beq.n	800e894 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e858:	2208      	movs	r2, #8
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4413      	add	r3, r2
 800e85e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f003 0307 	and.w	r3, r3, #7
 800e866:	2b00      	cmp	r3, #0
 800e868:	d014      	beq.n	800e894 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f023 0307 	bic.w	r3, r3, #7
 800e870:	3308      	adds	r3, #8
 800e872:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f003 0307 	and.w	r3, r3, #7
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d00a      	beq.n	800e894 <pvPortMalloc+0x6c>
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	617b      	str	r3, [r7, #20]
}
 800e890:	bf00      	nop
 800e892:	e7fe      	b.n	800e892 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d06e      	beq.n	800e978 <pvPortMalloc+0x150>
 800e89a:	4b45      	ldr	r3, [pc, #276]	; (800e9b0 <pvPortMalloc+0x188>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d869      	bhi.n	800e978 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8a4:	4b43      	ldr	r3, [pc, #268]	; (800e9b4 <pvPortMalloc+0x18c>)
 800e8a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8a8:	4b42      	ldr	r3, [pc, #264]	; (800e9b4 <pvPortMalloc+0x18c>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8ae:	e004      	b.n	800e8ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	687a      	ldr	r2, [r7, #4]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d903      	bls.n	800e8cc <pvPortMalloc+0xa4>
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1f1      	bne.n	800e8b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8cc:	4b36      	ldr	r3, [pc, #216]	; (800e9a8 <pvPortMalloc+0x180>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d050      	beq.n	800e978 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2208      	movs	r2, #8
 800e8dc:	4413      	add	r3, r2
 800e8de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	6a3b      	ldr	r3, [r7, #32]
 800e8e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	685a      	ldr	r2, [r3, #4]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	1ad2      	subs	r2, r2, r3
 800e8f0:	2308      	movs	r3, #8
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d91f      	bls.n	800e938 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	f003 0307 	and.w	r3, r3, #7
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00a      	beq.n	800e920 <pvPortMalloc+0xf8>
	__asm volatile
 800e90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90e:	f383 8811 	msr	BASEPRI, r3
 800e912:	f3bf 8f6f 	isb	sy
 800e916:	f3bf 8f4f 	dsb	sy
 800e91a:	613b      	str	r3, [r7, #16]
}
 800e91c:	bf00      	nop
 800e91e:	e7fe      	b.n	800e91e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	1ad2      	subs	r2, r2, r3
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e932:	69b8      	ldr	r0, [r7, #24]
 800e934:	f000 f908 	bl	800eb48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e938:	4b1d      	ldr	r3, [pc, #116]	; (800e9b0 <pvPortMalloc+0x188>)
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	1ad3      	subs	r3, r2, r3
 800e942:	4a1b      	ldr	r2, [pc, #108]	; (800e9b0 <pvPortMalloc+0x188>)
 800e944:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e946:	4b1a      	ldr	r3, [pc, #104]	; (800e9b0 <pvPortMalloc+0x188>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	4b1b      	ldr	r3, [pc, #108]	; (800e9b8 <pvPortMalloc+0x190>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d203      	bcs.n	800e95a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e952:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <pvPortMalloc+0x188>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a18      	ldr	r2, [pc, #96]	; (800e9b8 <pvPortMalloc+0x190>)
 800e958:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	685a      	ldr	r2, [r3, #4]
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <pvPortMalloc+0x184>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	431a      	orrs	r2, r3
 800e964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e966:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	2200      	movs	r2, #0
 800e96c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e96e:	4b13      	ldr	r3, [pc, #76]	; (800e9bc <pvPortMalloc+0x194>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3301      	adds	r3, #1
 800e974:	4a11      	ldr	r2, [pc, #68]	; (800e9bc <pvPortMalloc+0x194>)
 800e976:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e978:	f7fe fd00 	bl	800d37c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	f003 0307 	and.w	r3, r3, #7
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00a      	beq.n	800e99c <pvPortMalloc+0x174>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98a:	f383 8811 	msr	BASEPRI, r3
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f3bf 8f4f 	dsb	sy
 800e996:	60fb      	str	r3, [r7, #12]
}
 800e998:	bf00      	nop
 800e99a:	e7fe      	b.n	800e99a <pvPortMalloc+0x172>
	return pvReturn;
 800e99c:	69fb      	ldr	r3, [r7, #28]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3728      	adds	r7, #40	; 0x28
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	20004514 	.word	0x20004514
 800e9ac:	20004528 	.word	0x20004528
 800e9b0:	20004518 	.word	0x20004518
 800e9b4:	2000450c 	.word	0x2000450c
 800e9b8:	2000451c 	.word	0x2000451c
 800e9bc:	20004520 	.word	0x20004520

0800e9c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d04d      	beq.n	800ea6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9d2:	2308      	movs	r3, #8
 800e9d4:	425b      	negs	r3, r3
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	4413      	add	r3, r2
 800e9da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	4b24      	ldr	r3, [pc, #144]	; (800ea78 <vPortFree+0xb8>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4013      	ands	r3, r2
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10a      	bne.n	800ea04 <vPortFree+0x44>
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	60fb      	str	r3, [r7, #12]
}
 800ea00:	bf00      	nop
 800ea02:	e7fe      	b.n	800ea02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00a      	beq.n	800ea22 <vPortFree+0x62>
	__asm volatile
 800ea0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	60bb      	str	r3, [r7, #8]
}
 800ea1e:	bf00      	nop
 800ea20:	e7fe      	b.n	800ea20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	685a      	ldr	r2, [r3, #4]
 800ea26:	4b14      	ldr	r3, [pc, #80]	; (800ea78 <vPortFree+0xb8>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d01e      	beq.n	800ea6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d11a      	bne.n	800ea6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	685a      	ldr	r2, [r3, #4]
 800ea3c:	4b0e      	ldr	r3, [pc, #56]	; (800ea78 <vPortFree+0xb8>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	43db      	mvns	r3, r3
 800ea42:	401a      	ands	r2, r3
 800ea44:	693b      	ldr	r3, [r7, #16]
 800ea46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea48:	f7fe fc8a 	bl	800d360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	685a      	ldr	r2, [r3, #4]
 800ea50:	4b0a      	ldr	r3, [pc, #40]	; (800ea7c <vPortFree+0xbc>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4413      	add	r3, r2
 800ea56:	4a09      	ldr	r2, [pc, #36]	; (800ea7c <vPortFree+0xbc>)
 800ea58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea5a:	6938      	ldr	r0, [r7, #16]
 800ea5c:	f000 f874 	bl	800eb48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea60:	4b07      	ldr	r3, [pc, #28]	; (800ea80 <vPortFree+0xc0>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3301      	adds	r3, #1
 800ea66:	4a06      	ldr	r2, [pc, #24]	; (800ea80 <vPortFree+0xc0>)
 800ea68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea6a:	f7fe fc87 	bl	800d37c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea6e:	bf00      	nop
 800ea70:	3718      	adds	r7, #24
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	20004528 	.word	0x20004528
 800ea7c:	20004518 	.word	0x20004518
 800ea80:	20004524 	.word	0x20004524

0800ea84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea84:	b480      	push	{r7}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea90:	4b27      	ldr	r3, [pc, #156]	; (800eb30 <prvHeapInit+0xac>)
 800ea92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f003 0307 	and.w	r3, r3, #7
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00c      	beq.n	800eab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	3307      	adds	r3, #7
 800eaa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f023 0307 	bic.w	r3, r3, #7
 800eaaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eaac:	68ba      	ldr	r2, [r7, #8]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	4a1f      	ldr	r2, [pc, #124]	; (800eb30 <prvHeapInit+0xac>)
 800eab4:	4413      	add	r3, r2
 800eab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eabc:	4a1d      	ldr	r2, [pc, #116]	; (800eb34 <prvHeapInit+0xb0>)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eac2:	4b1c      	ldr	r3, [pc, #112]	; (800eb34 <prvHeapInit+0xb0>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	4413      	add	r3, r2
 800eace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ead0:	2208      	movs	r2, #8
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	1a9b      	subs	r3, r3, r2
 800ead6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f023 0307 	bic.w	r3, r3, #7
 800eade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	4a15      	ldr	r2, [pc, #84]	; (800eb38 <prvHeapInit+0xb4>)
 800eae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eae6:	4b14      	ldr	r3, [pc, #80]	; (800eb38 <prvHeapInit+0xb4>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2200      	movs	r2, #0
 800eaec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eaee:	4b12      	ldr	r3, [pc, #72]	; (800eb38 <prvHeapInit+0xb4>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	1ad2      	subs	r2, r2, r3
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb04:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <prvHeapInit+0xb4>)
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	4a0a      	ldr	r2, [pc, #40]	; (800eb3c <prvHeapInit+0xb8>)
 800eb12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	4a09      	ldr	r2, [pc, #36]	; (800eb40 <prvHeapInit+0xbc>)
 800eb1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb1c:	4b09      	ldr	r3, [pc, #36]	; (800eb44 <prvHeapInit+0xc0>)
 800eb1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb22:	601a      	str	r2, [r3, #0]
}
 800eb24:	bf00      	nop
 800eb26:	3714      	adds	r7, #20
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	2000090c 	.word	0x2000090c
 800eb34:	2000450c 	.word	0x2000450c
 800eb38:	20004514 	.word	0x20004514
 800eb3c:	2000451c 	.word	0x2000451c
 800eb40:	20004518 	.word	0x20004518
 800eb44:	20004528 	.word	0x20004528

0800eb48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb50:	4b28      	ldr	r3, [pc, #160]	; (800ebf4 <prvInsertBlockIntoFreeList+0xac>)
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	e002      	b.n	800eb5c <prvInsertBlockIntoFreeList+0x14>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d8f7      	bhi.n	800eb56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	68ba      	ldr	r2, [r7, #8]
 800eb70:	4413      	add	r3, r2
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d108      	bne.n	800eb8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	685a      	ldr	r2, [r3, #4]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	441a      	add	r2, r3
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	68ba      	ldr	r2, [r7, #8]
 800eb94:	441a      	add	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d118      	bne.n	800ebd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	4b15      	ldr	r3, [pc, #84]	; (800ebf8 <prvInsertBlockIntoFreeList+0xb0>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d00d      	beq.n	800ebc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	685a      	ldr	r2, [r3, #4]
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	441a      	add	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	601a      	str	r2, [r3, #0]
 800ebc4:	e008      	b.n	800ebd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ebc6:	4b0c      	ldr	r3, [pc, #48]	; (800ebf8 <prvInsertBlockIntoFreeList+0xb0>)
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	e003      	b.n	800ebd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d002      	beq.n	800ebe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebe6:	bf00      	nop
 800ebe8:	3714      	adds	r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	2000450c 	.word	0x2000450c
 800ebf8:	20004514 	.word	0x20004514

0800ebfc <__libc_init_array>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	4d0d      	ldr	r5, [pc, #52]	; (800ec34 <__libc_init_array+0x38>)
 800ec00:	4c0d      	ldr	r4, [pc, #52]	; (800ec38 <__libc_init_array+0x3c>)
 800ec02:	1b64      	subs	r4, r4, r5
 800ec04:	10a4      	asrs	r4, r4, #2
 800ec06:	2600      	movs	r6, #0
 800ec08:	42a6      	cmp	r6, r4
 800ec0a:	d109      	bne.n	800ec20 <__libc_init_array+0x24>
 800ec0c:	4d0b      	ldr	r5, [pc, #44]	; (800ec3c <__libc_init_array+0x40>)
 800ec0e:	4c0c      	ldr	r4, [pc, #48]	; (800ec40 <__libc_init_array+0x44>)
 800ec10:	f000 f82e 	bl	800ec70 <_init>
 800ec14:	1b64      	subs	r4, r4, r5
 800ec16:	10a4      	asrs	r4, r4, #2
 800ec18:	2600      	movs	r6, #0
 800ec1a:	42a6      	cmp	r6, r4
 800ec1c:	d105      	bne.n	800ec2a <__libc_init_array+0x2e>
 800ec1e:	bd70      	pop	{r4, r5, r6, pc}
 800ec20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec24:	4798      	blx	r3
 800ec26:	3601      	adds	r6, #1
 800ec28:	e7ee      	b.n	800ec08 <__libc_init_array+0xc>
 800ec2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec2e:	4798      	blx	r3
 800ec30:	3601      	adds	r6, #1
 800ec32:	e7f2      	b.n	800ec1a <__libc_init_array+0x1e>
 800ec34:	0800ee30 	.word	0x0800ee30
 800ec38:	0800ee30 	.word	0x0800ee30
 800ec3c:	0800ee30 	.word	0x0800ee30
 800ec40:	0800ee34 	.word	0x0800ee34

0800ec44 <memcpy>:
 800ec44:	440a      	add	r2, r1
 800ec46:	4291      	cmp	r1, r2
 800ec48:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec4c:	d100      	bne.n	800ec50 <memcpy+0xc>
 800ec4e:	4770      	bx	lr
 800ec50:	b510      	push	{r4, lr}
 800ec52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec5a:	4291      	cmp	r1, r2
 800ec5c:	d1f9      	bne.n	800ec52 <memcpy+0xe>
 800ec5e:	bd10      	pop	{r4, pc}

0800ec60 <memset>:
 800ec60:	4402      	add	r2, r0
 800ec62:	4603      	mov	r3, r0
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d100      	bne.n	800ec6a <memset+0xa>
 800ec68:	4770      	bx	lr
 800ec6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec6e:	e7f9      	b.n	800ec64 <memset+0x4>

0800ec70 <_init>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	bf00      	nop
 800ec74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec76:	bc08      	pop	{r3}
 800ec78:	469e      	mov	lr, r3
 800ec7a:	4770      	bx	lr

0800ec7c <_fini>:
 800ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec7e:	bf00      	nop
 800ec80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec82:	bc08      	pop	{r3}
 800ec84:	469e      	mov	lr, r3
 800ec86:	4770      	bx	lr
